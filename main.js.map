{"version":3,"sources":["./src/app/view/main-frame/main-frame.component.ts","./src/app/view/main-frame/main-frame.component.html","./src/app/core/services/scene.service.ts","./src/app/core/simulation/structures/array/bubble-sort.ts","./src/app/core/simulation/helpers/mouse/node-mouse.ts","./src/app/view/prompt/prompt.component.ts","./src/app/view/prompt/prompt.component.html","./src/app/core/simulation/helpers/drawing/bst-cell-drawing.ts","./src/app/core/simulation/helpers/drag/node-drag.ts","./src/app/core/simulation/handlers/array-handler.ts","./src/app/core/simulation/object-factory.ts","./src/scenarios/binary-search-tree/scenes/deletion-one-child.ts","./src/app/core/simulation/helpers/drawing/array-drawing.ts","./src/scenarios/stack-queue/scenes/circular-queue.ts","./src/app/core/simulation/handlers/linked-list-handler.ts","./src/app/core/simulation/structures/array/quick-sort.ts","./src/scenarios/sort/scenes/quick.ts","./src/app/core/camera.ts","./src/scenarios/linked-list/scenes/linked-list-scene.ts","./src/app/core/simulation/helpers/mouse/array-mouse.ts","./src/app/view/playground/playground.component.ts","./src/app/view/playground/playground.component.html","./src/app/core/simulation/scenario.ts","./src/scenarios/binary-search-tree/bst-scenario.ts","./src/app/core/simulation/providers/color-provider.ts","./src/scenarios/binary-search-tree/scenes/deletion-two-children.ts","./src/scenarios/sort/sort-scenario.ts","./src/environments/environment.ts","./src/scenarios/rb-tree/scenes/deletion-third-case.ts","./src/app/core/simulation/handlers/node-handler.ts","./src/app/view/content-view/content-view.component.ts","./src/app/view/content-view/content-view.component.html","./src/app/core/simulation/basics/simulation-link.ts","./src/scenarios/stack-queue/scenes/pop.ts","./src/scenarios/arrays/scenes/insertion-beginning.ts","./src/scenarios/sort/scenes/selection.ts","./src/app/core/simulation/helpers/arrowhead-helper.ts","./src/scenarios/rb-tree/rb-scenario.ts","./src/app/view/scenario-grid/scenario-grid.component.html","./src/app/view/scenario-grid/scenario-grid.component.ts","./src/scenarios/arrays/scenes/deletion-beginning.ts","./src/scenarios/arrays/scenes/insertion-middle.ts","./src/scenarios/arrays/scenes/deletion-end.ts","./src/app/core/simulation/handlers/binary-search-tree-handler.ts","./src/scenarios/sort/scenes/insertion.ts","./src/scenarios/linked-list/scenes/pop-first.ts","./src/scenarios/heap/scenes/deletion.ts","./src/app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree.ts","./src/app/core/simulation/structures/tree/binary-tree/binary-tree.ts","./src/scenarios/linked-list/linked-list-scenario.ts","./src/app/core/simulation/helpers/mouse/heap-mouse.ts","./src/app/core/simulation/structures/array/simulation-stack.ts","./src/scenarios/arrays/scenes/sorted-search.ts","./src/app/core/simulation/structures/array/selection-sort.ts","./src/scenarios/arrays/scenes/unsuccessful-search.ts","./src/app/core/simulation/basics/simulation-node.ts","./src/scenarios/binary-search-tree/scenes/insertion.ts","./src/scenarios/heap/scenes/tree-scene.ts","./src/app/core/simulation/helpers/mouse/array-menu.ts","./src/app/core/simulation/structures/array/insertion-sort.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/core/simulation/helpers/mouse/stack-menu.ts","./src/scenarios/linked-list/scenes/prepend.ts","./src/scenarios/rb-tree/scenes/insertion-first-case.ts","./src/app/core/simulation/structures/array/simulation-queue.ts","./src/scenarios/rb-tree/scenes/red-black.ts","./src/scenarios/heap/scenes/find-min.ts","./src/app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree.ts","./src/scenarios/linked-list/scenes/pop-last.ts","./src/scenarios/stack-queue/scenes/queue.ts","./src/app/core/simulation/helpers/mouse/bst-cell-mouse.ts","./src/scenarios/linked-list/scenes/deletion.ts","./src/scenarios/arrays/scenes/insertion-end.ts","./src/app/core/services/scenario.service.ts","./src/app/app.module.ts","./src/scenarios/stack-queue/scenes/stack.ts","./src/app/core/simulation/helpers/drawing/heap-drawing.ts","./src/app/core/simulation/structures/tree/binary-tree/heap/heap.ts","./src/scenarios/binary-search-tree/scenes/search.ts","./src/app/view/scene-view/scene-view.component.html","./src/app/view/scene-view/scene-view.component.ts","./src/scenarios/rb-tree/scenes/insertion-second-case.ts","./src/app/core/consts.ts","./src/scenarios/arrays/array-scenario.ts","./src/app/core/simulation/structures/tree/simulation-graph.ts","./src/scenarios/binary-search-tree/scenes/bst-scene.ts","./src/scenarios/rb-tree/scenes/deletion-first-case.ts","./src/scenarios/rb-tree/scenes/insertion-third-case.ts","./src/scenarios/heap/scenes/insertion.ts","./src/app/view/navbar/navbar.component.ts","./src/app/view/navbar/navbar.component.html","./src/app/core/simulation/helpers/drawing/bst-drawing.ts","./src/scenarios/stack-queue/scenes/enqueue.ts","./src/scenarios/linked-list/scenes/insertion.ts","./src/app/core/simulation/helpers/mouse/linked-list-mouse.ts","./src/app/view/visualization-view/visualization-view.component.ts","./src/app/view/visualization-view/visualization-view.component.html","./src/scenarios/sort/scenes/merge.ts","./src/app/core/simulation/structures/array/array-cell.ts","./src/scenarios/scenarios.ts","./src/app/core/simulation/helpers/mouse/bst-mouse.ts","./src/app/core/simulation/structures/array/merge-sort.ts","./src/app/core/simulation/structures/tree/linked-list/linked-list.ts","./src/scenarios/heap/scenes/heap-scene.ts","./src/app/core/simulation/helpers/link-helper.ts","./src/scenarios/stack-queue/scenes/dequeue.ts","./src/app/core/simulation/structures/array/simulation-array.ts","./src/scenarios/linked-list/scenes/append.ts","./src/scenarios/sort/scenes/start.ts","./src/app/core/simulation/structures/tree/binary-tree/avl-tree/avl-tree.ts","./src/scenarios/arrays/scenes/deletion-middle.ts","./src/app/core/simulation/helpers/mouse/svg-mouse.ts","./src/app/core/simulation/structures/tree/bst-cell.ts","./src/app/core/simulation/helpers/drawing/linked-list-drawing.ts","./src/app/core/simulation/helpers/drag/array-drag.ts","./src/app/core/simulation/helpers/mouse/queue-menu.ts","./src/app/core/services/playground.service.ts","./src/app/core/simulation/helpers/drawing/node-drawing.ts","./src/scenarios/arrays/scenes/start.ts","./src/scenarios/binary-search-tree/scenes/deletion-no-children.ts","./src/scenarios/binary-search-tree/scenes/imbalance.ts","./src/app/core/simulation/helpers/drawing/array-cell-drawing.ts","./src/scenarios/arrays/scenes/search.ts","./src/app/app-routing.module.ts","./src/app/core/simulation/helpers/mouse/array-cell-mouse.ts","./src/app/core/simulation/helpers/drawing/link-drawing-helper.ts","./src/scenarios/rb-tree/scenes/deletion-second-case.ts","./src/app/core/simulation/simulation.ts","./src/scenarios/heap/heap-scenario.ts","./src/scenarios/stack-queue/scenes/push.ts","./src/scenarios/sort/scenes/bubble.ts","./src/app/core/simulation/handlers/simulation-loop.ts","./src/scenarios/stack-queue/stack-queue-scenario.ts","./src/app/core/simulation/helpers/drag/bst-cell-drag.ts","./src/app/core/simulation/handlers/heap-handler.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main-frame',\n  templateUrl: './main-frame.component.html',\n  styleUrls: ['./main-frame.component.css']\n})\nexport class MainFrameComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-navbar></app-navbar>\n<router-outlet></router-outlet>\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject, from, Observable} from 'rxjs';\nimport {Scene} from '../simulation/scene';\nimport {fromPromise} from 'rxjs/internal-compatibility';\nimport {map, mergeMap, tap} from 'rxjs/operators';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Scenario} from '../simulation/scenario';\nimport {scenariosPath} from '../consts';\n\ntype JsonScene = {contentPath: string, setupPath: string, playPath: string, content?: string};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SceneService {\n\n  scene: BehaviorSubject<Scene | undefined> = new BehaviorSubject<Scene | undefined>(undefined);\n  played: BehaviorSubject<string> = new BehaviorSubject('not_played');\n  set: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n}\n","import {Sort} from './sort';\r\nimport {SimulationArray} from './simulation-array';\r\n\r\nexport class BubbleSort implements Sort {\r\n  async sort(arr: SimulationArray): Promise<void> {\r\n\r\n      for (let i = 0; i < arr.size; ++i) {\r\n        for (let j = 0; j < arr.size - i - 1; ++j) {\r\n          arr.data[j].highlight('#fdd828');\r\n          arr.data[j + 1].highlight('#fdd828');\r\n          await new Promise(r => setTimeout(r, 600));\r\n          arr.data[j].resetColor();\r\n          arr.data[j + 1].resetColor();\r\n          if (arr.data[j].node.value > arr.data[j + 1].node.value) {\r\n            await arr.swapNodes(arr.data[j], arr.data[j + 1]);\r\n          }\r\n        }\r\n\r\n        arr.data[arr.size - i - 1].highlight('#98dc73');\r\n      }\r\n\r\n  }\r\n    /*\r\n\r\n    # loop to access each array element\r\n    for i in range(len(array)):\r\n\r\n      # loop to compare array elements\r\n      for j in range(0, len(array) - i - 1):\r\n\r\n        # compare two adjacent elements\r\n        # change > to < to sort in descending order\r\n        if array[j] > array[j + 1]:\r\n\r\n          # swapping elements if elements\r\n          # are not in the intended order\r\n          temp = array[j]\r\n          array[j] = array[j+1]\r\n          array[j+1] = temp\r\n\r\n     */\r\n\r\n}\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport contextMenu, {ContextMenuFn, MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {defaultRadius} from '../../../consts';\r\nimport {Simulation} from '../../simulation';\r\n\r\nexport class NodeMouse implements MouseHelper<SimulationNode> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  mouseOver(d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>): void {\r\n    const circle = d3.select(nodes[i]);\r\n\r\n    if (!d.isInteractable) {\r\n      return;\r\n    }\r\n\r\n    circle\r\n      .transition()\r\n      .duration(600)\r\n      .ease(d3.easeElastic)\r\n      .attr('r', defaultRadius + 10);\r\n  }\r\n\r\n  mouseOut(d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>): void {\r\n    const circle = d3.select(nodes[i]);\r\n\r\n    if (!d.isInteractable) {\r\n      return;\r\n    }\r\n\r\n    circle\r\n      .transition()\r\n      .duration(600)\r\n      .ease(d3.easeElastic)\r\n      .attr('r', defaultRadius);\r\n  }\r\n\r\n  contextMenu(d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>): void {\r\n    const menu = [\r\n      {\r\n        title: 'Set value',\r\n        action: async (elm: SimulationNode) => {\r\n          const newValue = await this.simulation.prompt('Set value to');\r\n\r\n          let parsed = parseFloat(newValue);\r\n\r\n          if (isNaN(parsed)) {\r\n            parsed = 69;\r\n          }\r\n          // var node_to_find = dataHandler.getAllFiguresOfClass(\"Circle\").filter(d => d.value === number)[0]\r\n          elm.value = parsed;\r\n          elm.highlighted = true;\r\n          await new Promise(r => setTimeout(r, 1000));\r\n          elm.highlighted = false;\r\n        }\r\n      },\r\n      {\r\n        title: 'Info log',\r\n        action: async (elm: SimulationNode) => {\r\n          console.log(elm);\r\n        }\r\n      },\r\n      {\r\n        title: 'Delete',\r\n        action: async (elm) => {\r\n          this.simulation.nodeHandler.remove(elm);\r\n        }\r\n      }\r\n    ];\r\n\r\n    contextMenu(menu)(d, i);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element.on('mouseover', (d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, nodes))\r\n      .on('mouseout', (d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, nodes))\r\n      .on('contextmenu', (d: SimulationNode, i: number, nodes: d3Element[] | ArrayLike<d3Element>) => this.contextMenu(d, i, nodes));\r\n    return element;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {DynamicDialogConfig, DynamicDialogRef} from 'primeng/dynamicdialog';\n\n@Component({\n  selector: 'app-prompt',\n  templateUrl: './prompt.component.html',\n  styleUrls: ['./prompt.component.css']\n})\nexport class PromptComponent implements OnInit {\n\n  group: FormGroup;\n\n\n  constructor(private formBuilder: FormBuilder,\n              private ref: DynamicDialogRef) { }\n\n  ngOnInit(): void {\n    this.group = this.formBuilder.group({\n      typed: ['']\n    });\n  }\n\n  close(): void {\n    const typed = this.group.get('typed').value;\n    this.group.get('typed').reset('');\n\n    this.ref.close(typed);\n  }\n\n}\n","<form [formGroup]=\"group\" (ngSubmit)=\"close()\">\n  <input formControlName=\"typed\" [autofocus]=\"true\" type=\"text\" pInputText/>\n  <div class=\"p-flex-row\">\n    <button class=\"p-ml-auto\" type=\"button\" label=\"Close\" (click)=\"close()\" pButton></button>\n    <button class=\"p-ml-2 p-mr-2\" type=\"submit\" label=\"Submit\" pButton></button>\n  </div>\n</form>\n","import {DrawingHelper} from './drawing-helper';\r\nimport * as d3 from 'd3';\r\nimport contextMenu, {MenuItem} from 'd3-context-menu';\r\nimport {ColorProvider} from '../../providers/color-provider';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\n\r\nexport class BstCellDrawing implements DrawingHelper<BstCell> {\r\n\r\n  // colorProvider: ColorProvider;\r\n  //\r\n  // constructor(colorProvider: ColorProvider) {\r\n  //   this.colorProvider = colorProvider;\r\n  // }\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, BstCell, any, any>): d3.Selection<d3.BaseType, BstCell, any, any> {\r\n    const bstCell = enterElement.append('g')\r\n      .attr('class', 'bst-cell')\r\n      .attr('transform', (d: BstCell) => `translate(${d.x}, ${d.y})`);\r\n\r\n    bstCell\r\n      .append('circle')\r\n      .attr('class', 'bst-cell-circle')\r\n      // .on('mouseover', (d, i, nodes) => this.nodeMouseOver(d, i, nodes))\r\n      // .on('mouseout', (d, i, nodes) => this.nodeMouseOut(d, i, nodes))\r\n      // .on('contextmenu', contextMenu(this.getContextMenu()))\r\n      .attr('fill', d => d.isValid ? '#E2E8CE' : '#e8cece')\r\n      .style('opacity', .9)\r\n      .style('cursor', 'pointer')\r\n      .attr('r', d => d.radius)\r\n      .style('stroke-opacity', 1)\r\n      .style('stroke-width', 0)\r\n      .style('stroke', '#9381FF');\r\n\r\n    bstCell\r\n      .append('text')\r\n      .attr('class', 'bst-cell-empty')\r\n      .attr('dx', 0)\r\n      .attr('dy', 40 / 8)\r\n      .style('text-anchor', 'middle')\r\n      .attr('pointer-events', 'none')\r\n      .attr('font-size', 0)\r\n      .raise()\r\n      .style('fill', d => d.graph.isValid ? d.descriptorColor : '#860000')\r\n      .text(d => d.graph.isValid ? 'empty' : 'invalid')\r\n      .transition()\r\n      .duration(500)\r\n      .attr('font-size', 16);\r\n\r\n    bstCell\r\n      .append('text')\r\n      .style('fill', 'white')\r\n      .attr('class', 'bst-cell-name')\r\n      .attr('dx', 0)\r\n      .attr('dy', d => -d.radius * 1.2)\r\n      .style('text-anchor', 'middle')\r\n      .attr('pointer-events', 'none')\r\n      .attr('font-size', 32)\r\n      .style('opacity', d => !d.descriptor ? 0 : 1)\r\n      .text(d => !d.descriptor ? '' : d.descriptor);\r\n    return bstCell;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, BstCell, any, any>): d3.Selection<d3.BaseType, BstCell, any, any> {\r\n\r\n    updateElement\r\n      .select('.bst-cell-circle')\r\n      .attr('fill', d => !d.graph.isValid ? '#e8cece' : d.color);\r\n\r\n    updateElement\r\n      .select('.bst-cell-name')\r\n      .style('opacity', d => !d.descriptor ? 0 : 1)\r\n      .text(d => !d.descriptor ? '' : d.descriptor);\r\n\r\n    updateElement\r\n      .select('.bst-cell-empty')\r\n      .style('fill', d => d.graph.isValid ? d.descriptorColor : '#860000')\r\n      .text(d => d.graph.isValid ? 'empty' : 'invalid');\r\n\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, BstCell, any, any>): d3.Selection<d3.BaseType, BstCell, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n\r\n}\r\n","import {DragHelper} from './drag-helper';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport * as d3 from 'd3';\r\nimport {Selection} from 'd3-selection';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\n\r\nexport class NodeDrag implements DragHelper<SimulationNode> {\r\n\r\n  simulation: Simulation;\r\n  previouslyHoveredPlaceholders: Selection<any, any, any, any>[] = [];\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  dragStart(d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>): void {\r\n    d3.select('*').style('cursor', 'grabbing');\r\n    d3.select(nodes[i]).raise();\r\n    d3.selectAll('line').attr('pointer-events', 'none'); // remove hovering from all lines\r\n    d.noCollision = true;\r\n    d.pointerEvents = false;\r\n    d.nodeOrder = 0;\r\n    d.dragStartX = d.x;\r\n    d.dragStartY = d.y;\r\n    d.move(d3.event.x, d3.event.y);\r\n    // d.setTransform(d3.event.x, d3.event.y);\r\n  }\r\n\r\n  dragging(d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>): void {\r\n\r\n    d.move(d3.event.x, d3.event.y);\r\n    // d.setTransform(d3.event.x, d3.event.y);\r\n    this.simulation.loop.draggedNode = d;\r\n\r\n  }\r\n\r\n  dragEnd(d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>): void {\r\n    // if (!d) {\r\n    //\r\n    //   d3.selectAll('line').attr('pointer-events', 'auto');\r\n    //   d3.selectAll('.node').attr('pointer-events', 'auto');\r\n    //   this.simulation.loop.draggedNode = null;\r\n    //   return;\r\n    // }\r\n\r\n    d3.select('*').style('cursor', null);\r\n    d3.selectAll('line').attr('pointer-events', 'auto');\r\n    d3.selectAll('.node').attr('pointer-events', 'auto');\r\n\r\n    const distanceDragged = Math.sqrt(Math.pow(d3.event.x - d.dragStartX, 2) + Math.pow(d3.event.y - d.dragStartY, 2));\r\n\r\n    if (distanceDragged < 30 && !d.lockedGrid && !d.lockedPlaceholder) {\r\n      // short drag, do nothing\r\n      this.freeUpNode(d);\r\n\r\n      this.simulation.loop.draggedNode = null;\r\n      return;\r\n    }\r\n\r\n    if (this.simulation.loop.draggedNode) {\r\n      const arrayCell = d3\r\n        .selectAll('.array-cell-container')\r\n        .data()\r\n        .filter((ac: ArrayCell) => ac.isMouseOver)[0] as ArrayCell; // select array cell where mouse is hovering over\r\n\r\n      if (arrayCell) {\r\n        // is mouse hovering over an arraycell\r\n        if (!arrayCell.node) {\r\n          if (d.lockedGrid) {\r\n            d.lockedGrid.removeNode();\r\n          }\r\n          arrayCell.addNode(d);\r\n          // this.simulation.simulationLoop.repaint();\r\n        } else if (arrayCell.node !== d) {\r\n          // if (d.lockedGrid) {\r\n          //   d.lockedGrid.removeNode();\r\n          //   // this.simulation.simulationLoop.repaint();\r\n          // }\r\n          // arrayCell.removeNode();\r\n          // arrayCell.addNode(d);\r\n        }\r\n      } else {\r\n        if (d.lockedGrid) {\r\n          d.lockedGrid.removeNode();\r\n          // this.simulation.simulationLoop.repaint();\r\n        }\r\n        d.fx = undefined;\r\n        d.fy = undefined;\r\n      }\r\n\r\n      const bstCell = d3.selectAll('.bst-cell-circle')\r\n        .data()\r\n        .filter((bc: BstCell) => bc.isMouseOver)[0] as BstCell;\r\n\r\n      if (bstCell &&\r\n        !bstCell.node &&\r\n        bstCell.graph.isValid &&\r\n        (!d.lockedPlaceholder || bstCell.graph !== d.lockedPlaceholder.graph)) {\r\n        bstCell.graph.add(d, bstCell);\r\n      }\r\n    }\r\n    d.setTarget(d3.event.x, d3.event.y);\r\n    d3.selectAll('line').attr('pointer-events', 'auto');\r\n    d3.selectAll('.node').attr('pointer-events', 'auto');\r\n\r\n    this.freeUpNode(d);\r\n\r\n    this.simulation.loop.draggedNode = null;\r\n\r\n  }\r\n\r\n  addDragInteraction(element: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    const drag = d3.drag<Element, SimulationNode, unknown>()\r\n      .on('start', (d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>) => this.dragStart(d, i, nodes))\r\n      .on('drag', (d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>) => this.dragging(d, i, nodes))\r\n      .on('end', (d: SimulationNode, i: number, nodes: Element[] | ArrayLike<Element>) => this.dragEnd(d, i, nodes));\r\n\r\n    element.call(drag);\r\n\r\n    return element;\r\n  }\r\n\r\n  private freeUpNode(d: SimulationNode): void {\r\n    if (!d.lockedGrid && !d.lockedPlaceholder) {\r\n      d.noCollision = false;\r\n      d.pointerEvents = true;\r\n      d.nodeOrder = 1;\r\n      d.fx = undefined;\r\n      d.fy = undefined;\r\n    } else if (d.lockedGrid) {\r\n      d.noCollision = true;\r\n      d.pointerEvents = true;\r\n      d.nodeOrder = 2;\r\n      d.move(d.lockedGrid.parent.x + d.lockedGrid.x + d.lockedGrid.width / 2, d.lockedGrid.height / 2 + d.lockedGrid.parent.y);\r\n    } else if (d.lockedPlaceholder) {\r\n      d.noCollision = true;\r\n      d.pointerEvents = false;\r\n      d.nodeOrder = 2;\r\n    }\r\n  }\r\n\r\n}\r\n","import {SimulationLoop} from './simulation-loop';\nimport {SimulationArray} from '../structures/array/simulation-array';\nimport {Selection} from 'd3-selection';\nimport {PositionHelper} from '../helpers/position-helper';\nimport {DrawableHandler} from './drawable-handler';\nimport * as d3 from 'd3';\nimport {SimulationNode} from '../basics/simulation-node';\nimport {ArrayCell} from '../structures/array/array-cell';\nimport contextMenu from 'd3-context-menu';\nimport {DrawingHelper} from '../helpers/drawing/drawing-helper';\nimport {DragHelper} from '../helpers/drag/drag-helper';\nimport {ArrayCellDrawing} from '../helpers/drawing/array-cell-drawing';\nimport {ArrayCellMouse} from '../helpers/mouse/array-cell-mouse';\nimport {MouseHelper} from '../helpers/mouse/mouse-helper';\nimport {Simulation} from '../simulation';\nimport {Drawable} from '../drawable';\n\nexport class ArrayHandler implements DrawableHandler<SimulationArray> {\n\n  drawingHelper: DrawingHelper<SimulationArray>;\n  dragHelper: DragHelper<SimulationArray>;\n  mouseHelper: MouseHelper<SimulationArray>;\n  arrayCellDrawingHelper: DrawingHelper<ArrayCell>;\n  arrayCellMouseHelper: MouseHelper<ArrayCell>;\n  simulation: Simulation;\n\n  maxId = 0;\n\n  data: SimulationArray[] = [];\n  canvas: Selection<any, any, any, any>;\n\n  constructor(simulation: Simulation,\n              drawingHelper: DrawingHelper<SimulationArray>,\n              arrayCellDrawingHelper: DrawingHelper<ArrayCell>,\n              dragHelper: DragHelper<SimulationArray>,\n              mouseHelper: MouseHelper<SimulationArray>,\n              arrayCellMouseHelper: MouseHelper<ArrayCell>,\n              canvas: Selection<any, any, any, any>) {\n    this.drawingHelper = drawingHelper;\n    this.arrayCellDrawingHelper = arrayCellDrawingHelper;\n    this.dragHelper = dragHelper;\n    this.mouseHelper = mouseHelper;\n    this.arrayCellMouseHelper = arrayCellMouseHelper;\n    this.simulation = simulation;\n    this.canvas = canvas;\n  }\n\n  add(obj: SimulationArray | Drawable): void {\n    if (!(obj instanceof SimulationArray)) {\n      return;\n    }\n    const array = obj as SimulationArray;\n\n    array.id = this.maxId++;\n    this.data.push(array);\n  }\n\n  draw(): void {\n\n    const arrayElements = this.canvas\n      .selectAll('.array')\n      .data(this.data, (arr: SimulationArray) => arr.id)\n      .join(enterElement => this.enter(enterElement),\n            updateElement => this.update(updateElement),\n        exitElement => this.exit(exitElement));\n\n    arrayElements.lower();\n\n  }\n\n  enter(enterElement: d3.Selection<d3.EnterElement, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\n    const arrElement = this.drawingHelper.enter(enterElement);\n    this.mouseHelper.addMouseInteraction(arrElement);\n    this.dragHelper.addDragInteraction(arrElement);\n    arrElement\n      .selectAll('.array-cell')\n      .data((d: SimulationArray) => d.data, (cell: ArrayCell) => cell.id)\n      .join(enterCell => {\n        const cellElement = this.arrayCellDrawingHelper.enter(enterCell);\n        this.arrayCellMouseHelper.addMouseInteraction(cellElement);\n        return cellElement;\n      });\n    return arrElement;\n  }\n\n\n  update(updateElement: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\n    this.drawingHelper.update(updateElement);\n    updateElement\n      .selectAll('.array-cell')\n      .data((d: SimulationArray) => d.data, (cell: ArrayCell) => cell.id)\n      .join(enterCell => {\n          const cellElement = this.arrayCellDrawingHelper.enter(enterCell);\n          this.arrayCellMouseHelper.addMouseInteraction(cellElement);\n          return cellElement;\n        },\n          updateCell => this.arrayCellDrawingHelper.update(updateCell),\n        exitCell => this.arrayCellDrawingHelper.exit(exitCell));\n    return updateElement;\n  }\n\n  exit(exitElement: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\n    return this.drawingHelper.exit(exitElement);\n  }\n\n  reset(): void {\n    this.maxId = 0;\n    this.data = [];\n  }\n}\n","import {Drawable} from './drawable';\r\nimport {SimulationNode} from './basics/simulation-node';\r\nimport {SimulationArray} from './structures/array/simulation-array';\r\nimport {BinarySearchTree} from './structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {AvlTree} from './structures/tree/binary-tree/avl-tree/avl-tree';\r\nimport {RedBlackTree} from './structures/tree/binary-tree/red-black-tree/red-black-tree';\r\nimport {Heap} from './structures/tree/binary-tree/heap/heap';\r\nimport {LinkedList} from './structures/tree/linked-list/linked-list';\r\nimport {SimulationStack} from './structures/array/simulation-stack';\r\nimport {SimulationQueue} from './structures/array/simulation-queue';\r\n\r\ntype objectType = 'node' | 'array' | 'bst' | 'avl' | 'rb' | 'heap' | 'singlyLinkedList' | 'stack' | 'queue';\r\n\r\nexport class ObjectFactory {\r\n  create(type: objectType, x: number, y: number, value?: number): Drawable {\r\n    switch (type.toLowerCase()) {\r\n      case 'node':\r\n        return this.createNode(x, y, value);\r\n      case 'array':\r\n        return this.createArray(x, y, value);\r\n      case 'bst':\r\n        return this.createBst(x, y);\r\n      case 'avl':\r\n        return this.createAvl(x, y);\r\n      case 'rb':\r\n        return this.createRb(x, y);\r\n      case 'heap':\r\n        return this.createHeap(x, y);\r\n      case 'singlylinkedlist':\r\n        return this.createSinglyLinkedList(x, y);\r\n      case 'stack':\r\n        return this.createStack(x, y, value);\r\n      case 'queue':\r\n        return this.createQueue(x, y, value);\r\n    }\r\n  }\r\n\r\n  private createNode(x: number, y: number, value?: number): SimulationNode {\r\n    return new SimulationNode(value ?? 0, -1, x, y);\r\n  }\r\n\r\n  private createArray(x: number, y: number, value?: number): SimulationArray {\r\n    const arr = new SimulationArray(-1, x, y);\r\n    arr.setCapacity(value ?? 10);\r\n    return arr;\r\n  }\r\n\r\n  private createStack(x: number, y: number, value?: number): SimulationStack {\r\n    const stack = new SimulationStack(-1, x, y);\r\n    stack.setCapacity(value ?? 10);\r\n    return stack;\r\n  }\r\n\r\n  private createQueue(x: number, y: number, value?: number): SimulationQueue {\r\n    const queue = new SimulationQueue(-1, x, y);\r\n    queue.setCapacity(value ?? 10);\r\n    return queue;\r\n  }\r\n\r\n  private createBst(x: number, y: number): BinarySearchTree {\r\n    return new BinarySearchTree(-1, x, y);\r\n  }\r\n\r\n  private createAvl(x: number, y: number, value?: number): AvlTree {\r\n    return new AvlTree(-1, x, y);\r\n  }\r\n\r\n  private createRb(x: number, y: number, value?: number): RedBlackTree {\r\n    return new RedBlackTree(-1, x, y);\r\n  }\r\n\r\n  private createHeap(x: number, y: number, value?: number): Heap {\r\n    return new Heap(-1, x, y);\r\n  }\r\n\r\n  private createSinglyLinkedList(x: number, y: number, value?: number): LinkedList {\r\n    return new LinkedList(-1, x, y);\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {BstCell} from '../../../app/core/simulation/structures/tree/bst-cell';\r\n\r\nexport class DeletionOneChild implements Scene {\r\n  id = 5;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toRemove = -1;\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(8);\r\n    nodes.sort((a, b) => a.value > b.value ? 1 : a.value === b.value ? 0 : -1);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    this.toRemove = nodes[3].value;\r\n\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toRemove);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - One child</h1>\r\n  <p>\r\n    It's quite complicated to delete an element from a binary search tree. There are\r\n    three cases:\r\n  </p>\r\n  <ol>\r\n    <li>\r\n      <small>The node we're deleting</small> doesn't have any children (its children are empty leaves);\r\n    </li>\r\n    <li>\r\n      <b><small>The node we're deleting</small> has only one child (the other one is an empty leaf);</b>\r\n    </li>\r\n    <li>\r\n      <small>The node we're deleting</small> has two children.\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    Now, let's see the second case and remove the node with value ${this.toRemove}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    This case was a little bit more complicated than the previous one. Here, the node was deleted and\r\n    and its child took the node's place, that is parent of the <em>target</em> node now has child\r\n    of the <em>target</em> node set as its own child.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {DrawingHelper} from './drawing-helper';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport * as d3 from 'd3';\r\nimport contextMenu, {MenuItem} from 'd3-context-menu';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {DrawableHandler} from '../../handlers/drawable-handler';\r\n\r\nexport class ArrayDrawing implements DrawingHelper<SimulationArray> {\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\r\n    const arrayElement = enterElement.append('g')\r\n      .attr('class', 'array')\r\n      .attr('transform', arr => `translate(${arr.x}, ${arr.y})`)\r\n      .style('cursor', 'pointer');\r\n\r\n    arrayElement\r\n      .append('rect')\r\n      .attr('class', 'array-bg')\r\n      .attr('x', -25)\r\n      .attr('y', -60)\r\n      .attr('width', (arr: SimulationArray) => arr.capacity * (arr.cellWidth + arr.cellWidth / 20) + 45)\r\n      .attr('height', 200)\r\n      .attr('rx', 25)\r\n      .attr('ry', 25)\r\n      .style('stroke', 'white')\r\n      .style('stroke-width', 2)\r\n      .attr('fill', (arr: SimulationArray) => arr.color)\r\n      .style('opacity', .8)\r\n      .lower();\r\n\r\n    arrayElement\r\n      .append('text')\r\n      .attr('class', 'array-title')\r\n      .attr('dx', arr => (arr.capacity * arr.cellWidth) / 2)\r\n      .attr('dy', -25)\r\n      .text(arr => `${arr.descriptor}${arr.sorted ? ' (sorted)' : ''}`)\r\n      .attr('font-size', 30)\r\n      .style('fill', 'white')\r\n      .style('text-anchor', 'middle')\r\n      .attr('pointer-events', 'none');\r\n\r\n    return arrayElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\r\n    updateElement\r\n      .select('.array-bg')\r\n      .attr('width', (arr: SimulationArray) => arr.capacity * (arr.cellWidth + arr.cellWidth / 20) + 45)\r\n      .lower();\r\n\r\n    updateElement\r\n      .select('.array-title')\r\n      .attr('dx', arr => (arr.capacity * arr.cellWidth) / 2)\r\n      .text(arr => `${arr.descriptor}${arr.sorted ? ' (sorted)' : ''}`);\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {SimulationQueue} from '../../../app/core/simulation/structures/array/simulation-queue';\r\n\r\nexport class CircularQueue implements Scene {\r\n  id = 6;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  queue: SimulationQueue;\r\n  elements = '';\r\n  queueSize = -1;\r\n  firstValue = -1;\r\n  lastValue = -1;\r\n  toEnqueue = 23.11;\r\n  capacity = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.queue = simulation.objectFactory.create('queue', 0, 0, 10) as SimulationQueue;\r\n    simulation.arrayHandler.add(this.queue);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.queue.insertAt(nodes[i], i + this.queue.capacity - nodes.length, false);\r\n    }\r\n\r\n    await this.queue.setLeft(this.queue.capacity - nodes.length, false);\r\n    this.capacity = this.queue.capacity;\r\n    await this.queue.setRight(this.queue.capacity - 1, false);\r\n    this.firstValue = this.queue.left.node.value;\r\n    this.lastValue = this.queue.right.node.value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.toEnqueue, -1, this.queue.x, this.queue.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.queue.enqueue(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Queue - Circular queue</h1>\r\n  <p>\r\n    Take a look at that array on the right-hand side. That's the queue implementation.\r\n  </p>\r\n  <p>\r\n    The first element of the queue is <span style=\"color: #a0ff6f; font-weight: bold\">${this.firstValue}</span>,\r\n    and the last element is <span style=\"color: #ff9494; font-weight: bold\">${this.lastValue}</span>.\r\n  </p>\r\n  <p>\r\n    Current queue configuration was achieved using consecutive enqueue and dequeue operations,\r\n    without moving elements to the left when dequeueing.\r\n  </p>\r\n  <p>\r\n    Now, utilizing the previously learned way of appending element ${this.toEnqueue}\r\n    to the end of the array won't work. Even though the array itself isn't completely full,\r\n    we can't simply add an element to it.\r\n  </p>\r\n  <p>\r\n    That is why a circular variant of the queue is implemented. Now, we're not simply adding\r\n    an element to the end of array. Instead, imagine we're checking if the last element is at the last index\r\n    of the array. If it is, we'll check if there is empty space at the beginning of the array and out new last element\r\n    will be placed there this time.\r\n  </p>\r\n  <p>\r\n    Only, we can avoid that checking if the last element is at the last index, and simply insert\r\n    our new element (which will be denoted as the last element of the queue) at the index\r\n    [(i + 1) % N] where <em>i</em> is index of the last element of the queue and N is capacity of the array.\r\n  </p>\r\n  <p>\r\n    Moreover, we can avoid that checking process and simply insert\r\n    our new element (which will be denoted as the last element of the queue) at the index\r\n    [(i + 1) % N] where <em>i</em> is index of the last element of the queue and N is capacity of the array.\r\n  </p>\r\n  <p>\r\n    Let's see how this works by enqueueing ${this.toEnqueue}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After successfully enqueueing the value ${this.toEnqueue}, it has became the new last element.\r\n  </p>\r\n  <small>\r\n    The same principle goes for dequeueing as well, where the first element would\r\n    be placed at the index [0] after dequeueing an element from the index [${this.capacity}].\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {DrawableHandler} from './drawable-handler';\r\nimport {SimulationNode} from '../basics/simulation-node';\r\nimport * as d3 from 'd3';\r\nimport {DragHelper} from '../helpers/drag/drag-helper';\r\nimport {DrawingHelper} from '../helpers/drawing/drawing-helper';\r\nimport {MouseHelper} from '../helpers/mouse/mouse-helper';\r\nimport {SimulationArray} from '../structures/array/simulation-array';\r\nimport {ArrayCell} from '../structures/array/array-cell';\r\nimport {BstCell} from '../structures/tree/bst-cell';\r\nimport {Simulation} from '../simulation';\r\nimport {BstCellDrag} from '../helpers/drag/bst-cell-drag';\r\nimport {BstCellMouse} from '../helpers/mouse/bst-cell-mouse';\r\nimport {LinkDrawingHelper} from '../helpers/drawing/link-drawing-helper';\r\nimport {SimulationLink} from '../basics/simulation-link';\r\nimport {LinkedList} from '../structures/tree/linked-list/linked-list';\r\n\r\nexport class LinkedListHandler implements DrawableHandler<LinkedList> {\r\n\r\n  dragHelper: DragHelper<LinkedList>;\r\n  drawingHelper: DrawingHelper<LinkedList>;\r\n  mouseHelper: MouseHelper<LinkedList>;\r\n  simulation: Simulation;\r\n\r\n  bstCellDrawingHelper: DrawingHelper<BstCell>;\r\n  bstCellDragHelper: DragHelper<BstCell>;\r\n  bstCellMouseHelper: MouseHelper<BstCell>;\r\n\r\n  linkDrawingHelper: DrawingHelper<SimulationLink>;\r\n  data: LinkedList[] = [];\r\n  maxId = 0;\r\n  canvas: d3.Selection<any, any, any, any>;\r\n\r\n  constructor(simulation: Simulation,\r\n              dragHelper: DragHelper<LinkedList>,\r\n              drawingHelper: DrawingHelper<LinkedList>,\r\n              mouseHelper: MouseHelper<LinkedList>,\r\n              bstCellDrawingHelper: DrawingHelper<BstCell>,\r\n              bstCellDragHelper: DragHelper<BstCell>,\r\n              bstCellMouseHelper: MouseHelper<BstCell>,\r\n              linkDrawingHelper: DrawingHelper<SimulationLink>,\r\n              canvas: d3.Selection<any, any, any, any>) {\r\n    this.simulation = simulation;\r\n    this.dragHelper = dragHelper;\r\n    this.drawingHelper = drawingHelper;\r\n    this.mouseHelper = mouseHelper;\r\n    this.bstCellDrawingHelper = bstCellDrawingHelper;\r\n    this.bstCellDragHelper = bstCellDragHelper;\r\n    this.bstCellMouseHelper = bstCellMouseHelper;\r\n    this.linkDrawingHelper = linkDrawingHelper;\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  add(tree: LinkedList): void {\r\n    tree.id = this.maxId++;\r\n    tree.init();\r\n    this.data.push(tree);\r\n  }\r\n\r\n  draw(): void {\r\n    const treeElements = this.canvas\r\n      .selectAll('.linked-list')\r\n      .data(this.data, (tree: LinkedList) => tree.id)\r\n      .join(enterElement => this.enter(enterElement),\r\n        updateElement => this.update(updateElement),\r\n        exitElement => this.exit(exitElement));\r\n\r\n    treeElements.lower();\r\n  }\r\n\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    const treeElement = this.drawingHelper.enter(enterElement);\r\n    this.mouseHelper.addMouseInteraction(treeElement);\r\n    treeElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: LinkedList) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n        const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n        this.bstCellDragHelper.addDragInteraction(cellElement);\r\n        this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n        return cellElement;\r\n      });\r\n\r\n    treeElement\r\n      .selectAll('.link')\r\n      .data((d: LinkedList) => d.getLinks(), (link: SimulationLink) => `${link.target.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      });\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    this.drawingHelper.update(updateElement);\r\n    updateElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: LinkedList) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n          const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n          this.bstCellDragHelper.addDragInteraction(cellElement);\r\n          this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n          return cellElement;\r\n        },\r\n        updateCell => this.bstCellDrawingHelper.update(updateCell),\r\n        exitCell => this.bstCellDrawingHelper.exit(exitCell));\r\n\r\n    updateElement\r\n      .selectAll('.link')\r\n      .data((d: LinkedList) => d.getLinks(), (link: SimulationLink) => `${link.source.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      },\r\n        updateLink => this.linkDrawingHelper.update(updateLink).lower(),\r\n        exitLink => this.linkDrawingHelper.exit(exitLink));\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    return this.drawingHelper.exit(exitElement);\r\n  }\r\n  reset(): void {\r\n    this.maxId = 0;\r\n    this.data = [];\r\n  }\r\n\r\n\r\n}\r\n","import {Sort} from './sort';\r\nimport {SimulationArray} from './simulation-array';\r\nimport {ArrayCell} from './array-cell';\r\n\r\nexport class QuickSort implements Sort {\r\n  async sort(arr: SimulationArray): Promise<void> {\r\n    await this.quickSort(arr, arr.data.slice(0, arr.size), 0, arr.size - 1);\r\n  }\r\n\r\n  async quickSort(arr: SimulationArray, data: ArrayCell[], low: number, high: number): Promise<void> {\r\n    if (low < high) {\r\n      data.slice(low, high + 1).forEach(c => c.highlight('#ff6257'));\r\n      await new Promise(r => setTimeout(r, 1200));\r\n      data.slice(low, high + 1).forEach(c => c.resetColor());\r\n      await new Promise(r => setTimeout(r, 600));\r\n\r\n      const pivot = await this.partition(arr, data, low, high);\r\n\r\n      await this.quickSort(arr, data, low, pivot - 1);\r\n      await this.quickSort(arr, data, pivot, high);\r\n    }\r\n  }\r\n\r\n  async partition(arr: SimulationArray, data: ArrayCell[], low: number, high: number): Promise<number> {\r\n    const pivot = data[high];\r\n    const pivotNode = pivot.removeNode();\r\n    pivotNode.setTarget(pivot.absoluteX, pivot.absoluteY + 100);\r\n    pivot.highlight('#ff8441');\r\n    await new Promise(r => setTimeout(r, 600));\r\n\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high; ++j) {\r\n      data[j].highlight('#fdd828');\r\n      await new Promise(r => setTimeout(r, 600));\r\n      if (data[j].node.value <= pivotNode.value) {\r\n        if (i >= 0) {\r\n          data[i].resetColor();\r\n        }\r\n        ++i;\r\n        data[i].highlight('#41d9ff');\r\n        await new Promise(r => setTimeout(r, 600));\r\n        if (i !== j) {\r\n          await arr.swapNodes(data[i], data[j]);\r\n        }\r\n      }\r\n      if (i !== j) {\r\n        data[j].resetColor();\r\n      } else {\r\n        data[j].highlight('#41d9ff');\r\n      }\r\n    }\r\n    if (i >= 0) {\r\n      data[i].resetColor();\r\n    }\r\n    pivot.resetColor();\r\n    if (i + 1 !== high) {\r\n      await arr.moveNode(data[i + 1], data[high]);\r\n    }\r\n    pivotNode.setTarget(data[i + 1].absoluteX, data[i + 1].absoluteY);\r\n    await new Promise(r => setTimeout(r, 600));\r\n    data[i + 1].addNode(pivotNode);\r\n    return i + 1;\r\n  }\r\n  /*\r\n    # Quick sort in Python\r\n\r\n    # function to find the partition position\r\n    def partition(array, low, high):\r\n\r\n      # choose the rightmost element as pivot\r\n      pivot = array[high]\r\n\r\n      # pointer for greater element\r\n      i = low - 1\r\n\r\n      # traverse through all elements\r\n      # compare each element with pivot\r\n      for j in range(low, high):\r\n        if array[j] <= pivot:\r\n          # if element smaller than pivot is found\r\n          # swap it with the greater element pointed by i\r\n          i = i + 1\r\n\r\n          # swapping element at i with element at j\r\n          (array[i], array[j]) = (array[j], array[i])\r\n\r\n      # swap the pivot element with the greater element specified by i\r\n      (array[i + 1], array[high]) = (array[high], array[i + 1])\r\n\r\n      # return the position from where partition is done\r\n      return i + 1\r\n\r\n    # function to perform quicksort\r\n    def quickSort(array, low, high):\r\n      if low < high:\r\n\r\n        # find pivot element such that\r\n        # element smaller than pivot are on the left\r\n        # element greater than pivot are on the right\r\n        pi = partition(array, low, high)\r\n\r\n        # recursive call on the left of pivot\r\n        quickSort(array, low, pi - 1)\r\n\r\n        # recursive call on the right of pivot\r\n        quickSort(array, pi + 1, high)\r\n\r\n\r\n   */\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {BubbleSort} from '../../../app/core/simulation/structures/array/bubble-sort';\r\nimport {InsertionSort} from '../../../app/core/simulation/structures/array/insertion-sort';\r\nimport {SelectionSort} from '../../../app/core/simulation/structures/array/selection-sort';\r\nimport {MergeSort} from '../../../app/core/simulation/structures/array/merge-sort';\r\nimport {QuickSort} from '../../../app/core/simulation/structures/array/quick-sort';\r\n\r\nexport class Quick implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  array: SimulationArray;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    this.array.sorting = new QuickSort();\r\n    await this.array.sort();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Quick sort</h1>\r\n  <p>Quicksort is a sorting algorithm based on the divide and conquer approach where</p>\r\n\r\n  <p>An array is divided into subarrays by selecting a pivot element (element selected from the array).</p>\r\n\r\n  <p>While dividing the array, the pivot element should be positioned in such a way that elements less than pivot are kept on the left side and elements greater than pivot are on the right side of the pivot.\r\n  The left and right subarrays are also divided using the same approach. This process continues until each subarray contains a single element.</p>\r\n\r\n  <p>At this point, elements are already sorted. Finally, elements are combined to form a sorted array.</p>\r\n  <p>\r\n    Press play to sort the elements\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Although the worst case time complexity of QuickSort is O(n<sup>2</sup>) which is more\r\n    than many other sorting algorithms like Merge Sort and Heap Sort, QuickSort is faster\r\n    in practice, because its inner loop can be efficiently implemented on\r\n    most architectures, and in most real-world data. QuickSort can be implemented\r\n    in different ways by changing the choice of pivot, so that the worst case rarely\r\n    occurs for a given type of data. However, merge sort is generally considered better\r\n    when data is huge and stored in external storage.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import * as d3 from 'd3';\r\nimport {Selection} from 'd3-selection';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\nexport class Camera {\r\n  transitionDuration = 2000;\r\n  zoom?: d3.ZoomBehavior<any, any>;\r\n  widthHeight: BehaviorSubject<[number, number]> = new BehaviorSubject([0, 0]);\r\n\r\n  svg: Selection<any, any, any, any>;\r\n  canvas: Selection<any, any, any, any>;\r\n\r\n  constructor(svg: Selection<any, any, any, any>,\r\n              canvas: Selection<any, any, any, any>,\r\n              widthHeight: [number, number]) {\r\n    this.svg = svg;\r\n    this.canvas = canvas;\r\n    this.widthHeight.next(widthHeight);\r\n  }\r\n\r\n  setZoom(): void {\r\n    if (!this.zoom) {\r\n      this.zoom = d3\r\n        .zoom()\r\n        .translateExtent([[-10000, -10000], [10000, 10000]])\r\n        .scaleExtent([0.3, 3])\r\n        .on('zoom', () => {\r\n\r\n          const e = d3.event as d3.D3ZoomEvent<any, any>;\r\n          if (!e) {\r\n            return;\r\n          }\r\n          // @ts-ignore\r\n          this.canvas.attr('transform', e.transform);\r\n        });\r\n    }\r\n\r\n    this.svg.call(this.zoom);\r\n  }\r\n\r\n  focusSvg(): void {\r\n    const [width, height] = this.widthHeight.getValue();\r\n    this.svg\r\n      .transition()\r\n      .duration(this.transitionDuration)\r\n      .call(\r\n        this.zoom.transform,\r\n        d3.zoomIdentity.translate(width / 2, height / 2).scale(.4)\r\n      );\r\n  }\r\n\r\n  focus(element: d3.Selection<any, any, any, any>): void {\r\n    const bbox = element.node().getBBox();\r\n    const [width, height] = this.widthHeight.getValue();\r\n    const midX = (2 * bbox.x + bbox.width) / 2;\r\n    const midY = (2 * bbox.y + bbox.height) / 2;\r\n    const scale = 0.9 / Math.max(bbox.width / width, bbox.height / height);\r\n    const center = [width / 2 - scale * midX, height / 2 - scale * midY];\r\n    console.log(bbox);\r\n    console.log(scale);\r\n    console.log(center);\r\n    if (scale > 3) {\r\n      console.log('DAVIDJU');\r\n      console.log(center);\r\n      console.log(scale);\r\n      console.log(element);\r\n      return;\r\n    }\r\n    this.svg\r\n      .transition()\r\n      .duration(this.transitionDuration)\r\n      .call(\r\n        this.zoom.transform,\r\n        d3.zoomIdentity.translate(center[0], center[1]).scale(scale)\r\n      );\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\n\r\nexport class LinkedListScene implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    const list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(list);\r\n\r\n    for (const node of nodes) {\r\n      await list.append(node, false);\r\n    }\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list</h1>\r\n  <p>\r\n    Liked list represents a sequence of connected elements in form of nodes.\r\n  </p>\r\n  <p>\r\n    Each node contains:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      Data (a value which it holds);\r\n    </li>\r\n    <li>\r\n      Link towards the next node in the sequence;\r\n    </li>\r\n    <li>\r\n      Link towards the previous node in the sequence\r\n      <small>If it's a doubly linked list</small>.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    There is one reference to the first node in the list, and it is called <em>head</em>,\r\n    as well as one reference to the last node in the list, and it is called <em>tail</em>.\r\n  </p>\r\n  <p>\r\n    Every node is referencing its only successor, and the last node\r\n    does not have a link to any node.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport contextMenu, {ContextMenuFn, MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\nimport {BinarySearchTree} from '../../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {InsertionSort} from '../../structures/array/insertion-sort';\r\nimport {SelectionSort} from '../../structures/array/selection-sort';\r\nimport {BubbleSort} from '../../structures/array/bubble-sort';\r\nimport {MergeSort} from '../../structures/array/merge-sort';\r\nimport {QuickSort} from '../../structures/array/quick-sort';\r\nimport {SimulationStack} from '../../structures/array/simulation-stack';\r\nimport {stackMenu} from './stack-menu';\r\nimport {SimulationQueue} from '../../structures/array/simulation-queue';\r\nimport {queueMenu} from './queue-menu';\r\nimport {arrayMenu} from './array-menu';\r\n\r\nexport class ArrayMouse implements MouseHelper<SimulationArray> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  contextMenu(d: SimulationArray, i: number, arrays: d3Element[] | ArrayLike<d3Element>): void {\r\n    let menu: MenuItem[];\r\n    if (d instanceof SimulationStack) {\r\n      menu = stackMenu(this.simulation);\r\n    } else if (d instanceof SimulationQueue) {\r\n      menu = queueMenu(this.simulation);\r\n    } else {\r\n      menu = arrayMenu(this.simulation);\r\n    }\r\n    contextMenu(menu)(d, i);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      // .on('mouseover', (d: SimulationArray, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, arrays))\r\n      // .on('mouseout', (d: SimulationArray, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, arrays))\r\n      .on('contextmenu', (d: SimulationArray, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.contextMenu(d, i, arrays));\r\n    return element;\r\n  }\r\n}\r\n","import {AfterViewChecked, AfterViewInit, Component, ElementRef, HostListener, Input, OnInit, ViewChild} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {BehaviorSubject} from 'rxjs';\nimport * as d3 from 'd3';\nimport {Selection} from 'd3-selection';\nimport {SimulationNode} from '../../core/simulation/basics/simulation-node';\nimport {SimulationLink} from '../../core/simulation/basics/simulation-link';\nimport {ScenarioService} from '../../core/services/scenario.service';\nimport {ArrowheadHelper} from '../../core/simulation/helpers/arrowhead-helper';\nimport {SceneService} from '../../core/services/scene.service';\nimport {Scene} from '../../core/simulation/scene';\nimport {MessageService} from 'primeng/api';\nimport {Skeleton} from 'primeng/skeleton';\nimport {debounceTime, take} from 'rxjs/operators';\nimport {PlaygroundService} from '../../core/services/playground.service';\nimport {PromptComponent} from '../prompt/prompt.component';\nimport {DialogService} from 'primeng/dynamicdialog';\n@Component({\n  selector: 'app-playground',\n  templateUrl: './playground.component.html',\n  styleUrls: ['./playground.component.css']\n})\nexport class PlaygroundComponent implements AfterViewInit {\n\n  private _speed = 1;\n  isVisualizationLoading = true;\n  widthHeight: [number, number] = [0, 0];\n\n\n  svg: Selection<any, any, null, undefined>;\n\n  @ViewChild('canvas')\n  canvasElement: ElementRef<HTMLDivElement>;\n\n  @ViewChild('skeleton')\n  skeletonElement: ElementRef<HTMLDivElement>;\n\n  constructor(private router: Router,\n              private scenarioService: ScenarioService,\n              private sceneService: SceneService,\n              private messageService: MessageService,\n              private dialogService: DialogService) { }\n\n  ngAfterViewInit(): void {\n\n    setTimeout(() => this.init(), 600);\n  }\n\n  init(): void {\n    this.widthHeight = [window.innerWidth, window.innerHeight - 70];\n\n    this.setupSvg();\n    const g = this.svg\n      .append('g')\n      .attr('class', 'canvas');\n\n\n    this.scenarioService.initSimulation(g, this.widthHeight, this.promptString(this.dialogService));\n    this.scenarioService.startSimulation(this.svg);\n    this.scenarioService.simulation.camera.focusSvg();\n    this.sceneService.scene.subscribe(async sc => {\n      this.isVisualizationLoading = true;\n      if (!!sc) {\n        await sc.setup(this.scenarioService.simulation);\n      }\n      this.isVisualizationLoading = false;\n    });\n  }\n\n  setupSvg(): void {\n    this.svg = d3.select(this.canvasElement.nativeElement).append('svg')\n      .attr('id', 'svgCanvas')\n      .attr('height', this.widthHeight[1])\n      .attr('width', this.widthHeight[0])\n      .style('background', '#282828');\n\n    ArrowheadHelper.addArrowhead(this.svg);\n\n    this.svg.append('filter')\n      .attr('id', 'blur')\n      .append('feGaussianBlur')\n      .attr('stdDeviation', 5);\n\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(): void {\n    this.widthHeight = [window.innerWidth, window.innerHeight - 70];\n    d3.select('#svgCanvas')\n      .attr('height', this.widthHeight[1])\n      .attr('width', this.widthHeight[0]);\n\n    this.scenarioService.updateWidthHeight(this.widthHeight);\n  }\n\n\n  promptString(dialogService: DialogService): (header: string) => Promise<string> {\n    return (header: string) => {\n      const ref = dialogService.open(PromptComponent, {\n        header,\n        baseZIndex: 1000,\n      });\n      return ref.onClose.pipe(take(1)).toPromise();\n    };\n  }\n\n\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(val: number) {\n    this._speed = val;\n  }\n\n}\n","<div>\n  <div class=\"visualization-content\" [style]=\"{width: '100%', height: isVisualizationLoading ? 0 : '100%'}\"\n       #canvas></div>\n  <div [style]=\"{width: '100%', height: '100%'}\" *ngIf=\"isVisualizationLoading\" #skeleton>\n    <p-skeleton width=\"100%\" height=\"100%\"></p-skeleton>\n  </div>\n  <div class=\"visualization-footer\">\n    <div class=\"p-d-flex p-flex-row\">\n      <button class=\"p-button p-button-info p-button-icon p-button-rounded p-mb-2\"\n              icon=\"pi pi-clock\"\n              label=\"Speed\"\n              (click)=\"op.toggle($event)\"\n              pRipple\n              pButton\n      ></button>\n    </div>\n    <p-overlayPanel [showCloseIcon]=\"true\" appendTo=\"body\" #op>\n      <ng-template pTemplate>\n        <p-inputNumber [min]=\".5\" [max]=\"3\" mode=\"decimal\" [minFractionDigits]=\"1\" [maxFractionDigits]=\"1\"\n                       [(ngModel)]=\"speed\"></p-inputNumber>\n        <p-slider [min]=\".5\" [max]=\"3\" [step]=\".1\" [(ngModel)]=\"speed\"></p-slider>\n      </ng-template>\n    </p-overlayPanel>\n  </div>\n</div>\n","import {Scene} from './scene';\nexport class Scenario {\n  name: string;\n  description: string;\n  scenes: (typeof Scene)[];\n  cover: string;\n  path: string;\n\n  constructor(name: string, path: string, description: string) {\n    this.name = name;\n    this.path = path;\n    this.description = description;\n    this.cover = `../../scenarios/${name}/cover.png`;\n  }\n}\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {BstScene} from './scenes/bst-scene';\r\nimport {Search} from './scenes/search';\r\nimport {Imbalance} from './scenes/imbalance';\r\nimport {Insertion} from './scenes/insertion';\r\nimport {DeletionNoChildren} from './scenes/deletion-no-children';\r\nimport {DeletionOneChild} from './scenes/deletion-one-child';\r\nimport {DeletionTwoChildren} from './scenes/deletion-two-children';\r\n\r\nconst bstScenario = new Scenario('Binary search tree', 'binary-search-tree',\r\n  'Insertion, deletion and searching in a binary search tree');\r\nbstScenario.cover = 'scenarios/binary-search-tree/cover.png';\r\nbstScenario.scenes = [\r\n  BstScene,\r\n  Search,\r\n  Imbalance,\r\n  Insertion,\r\n  DeletionNoChildren,\r\n  DeletionOneChild,\r\n  DeletionTwoChildren\r\n];\r\n\r\nexport default bstScenario;\r\n","import * as d3 from 'd3';\nimport {SimulationNode} from '../basics/simulation-node';\n\nexport class ColorProvider {\n  colorScheme = d3.scaleLinear<string, d3.RGBColor>().domain([0, 0]).range(['#5d89a8', '#63ad82', '#a3699b']);\n\n  setColorScheme(values: number[]): void {\n    const currentMin = Math.min(...values);\n    const currentMax = Math.max(...values);\n    let [minimum, maximum] = this.colorScheme.domain();\n\n    if (currentMin < minimum) {\n      minimum = currentMin;\n    }\n    if (currentMax > maximum) {\n      maximum = currentMax;\n    }\n    this.colorScheme = d3.scaleLinear<string, d3.RGBColor>().domain([minimum, maximum]).range(['#5d89a8', '#63ad82', '#a3699b']);\n  }\n\n  getNodeColor(node: SimulationNode): string {\n    if (node.isPlaceholder) {\n      return '#E2E8CE';\n    }\n    else if (!node.isValueVisible) {\n      return 'grey';\n    }\n    else {\n      return d3.color(this.colorScheme(node.value)).formatHex();\n    }\n\n  }\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {BstCell} from '../../../app/core/simulation/structures/tree/bst-cell';\r\n\r\nexport class DeletionTwoChildren implements Scene {\r\n  id = 5;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toRemove = -1;\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(8);\r\n    nodes.sort((a, b) => a.value > b.value ? 1 : a.value === b.value ? 0 : -1);\r\n\r\n    const medianIndex = Math.floor(nodes.length / 2);\r\n    const medianNode = nodes[medianIndex];\r\n    nodes.splice(medianIndex, 1);\r\n    simulation.nodeHandler.add(medianNode);\r\n\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    await this.bst.insert(medianNode, false);\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    this.toRemove = medianNode.value;\r\n\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toRemove);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - Two children</h1>\r\n  <p>\r\n    It's quite complicated to delete an element from a binary search tree. There are\r\n    three cases:\r\n  </p>\r\n  <ol>\r\n    <li>\r\n      <small>The node we're deleting</small> doesn't have any children (its children are empty leaves);\r\n    </li>\r\n    <li>\r\n      <small>The node we're deleting</small> has only one child (the other one is an empty leaf);\r\n    </li>\r\n    <li>\r\n      <b><small>The node we're deleting</small> has two children.</b>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    Now, let's see the third case and remove the node with value ${this.toRemove}, which is a root node.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    This case was the most complicated. Firstly, we had to find the right-most descendant in the left subtree\r\n    of this node, that descendant is the closest node with a lower value than the node we intend to delete.\r\n  </p>\r\n  <p>\r\n    Now, we swap the acquired descendant and <em>target</em> node. Since descendant was the rightmost node in a subtree,\r\n    it is obvious that it had one child at most, so we employ the tactics used for either the first or the second case.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {StartScene} from './scenes/start';\r\nimport {Bubble} from './scenes/bubble';\r\nimport {Insertion} from './scenes/insertion';\r\nimport {Selection} from './scenes/selection';\r\nimport {Merge} from './scenes/merge';\r\nimport {Quick} from './scenes/quick';\r\n\r\nconst sortScenario = new Scenario('Sort', 'sort', 'Bubble, insertion, selection, merge and quick sort.');\r\nsortScenario.cover = 'scenarios/sort/cover.png';\r\nsortScenario.scenes = [\r\n  StartScene,\r\n  Bubble,\r\n  Insertion,\r\n  Selection,\r\n  Merge,\r\n  Quick\r\n];\r\n\r\nexport default sortScenario;\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class DeletionThirdCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toDelete = 35;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [30, 10, 40, 5, 15, 35, 45, 17]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    const [deleted] = await this.bst.delete(40, false);\r\n    simulation.nodeHandler.remove(deleted);\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toDelete);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - third case</h1>\r\n\r\n  <p>\r\n    In the third case, sibling is rotated along with the deleted node's parent,\r\n    so that sibling now becomes the parent to its previous parent. After that point,\r\n    recoloring is performed so that old parent becomes red and sibling (new parent) becomes\r\n    black.\r\n  </p>\r\n  <p>\r\n\r\n  </p>\r\n  <p>\r\n    This case is demonstrated on the right-hand side by deletion of ${this.toDelete}\r\n    from the tree.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing tri-node-restructuring.\r\n  </p>\r\n  <small>\r\n    In this case, since 30 was root and thus black, checking wasn't propagated up the tree.\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {SimulationNode} from '../basics/simulation-node';\nimport {defaultRadius} from '../../consts';\nimport {Selection} from 'd3-selection';\nimport * as d3 from 'd3';\nimport {SimulationArray} from '../structures/array/simulation-array';\nimport {ArrayCell} from '../structures/array/array-cell';\nimport {PositionHelper} from '../helpers/position-helper';\nimport {ColorProvider} from '../providers/color-provider';\nimport {DrawableHandler} from './drawable-handler';\nimport {SimulationLoop} from './simulation-loop';\nimport contextMenu from 'd3-context-menu';\nimport {DrawingHelper} from '../helpers/drawing/drawing-helper';\nimport {DragHelper} from '../helpers/drag/drag-helper';\nimport {MouseHelper} from '../helpers/mouse/mouse-helper';\nimport {Simulation} from '../simulation';\nimport {Drawable} from '../drawable';\n\nexport class NodeHandler implements DrawableHandler<SimulationNode> {\n\n  drawingHelper: DrawingHelper<SimulationNode>;\n  dragHelper: DragHelper<SimulationNode>;\n  mouseHelper: MouseHelper<SimulationNode>;\n\n  simulation: Simulation;\n\n  colorProvider: ColorProvider;\n\n  maxId = 0;\n  data: SimulationNode[] = [];\n\n  canvas: Selection<any, any, any, any>;\n\n\n  constructor(drawingHelper: DrawingHelper<SimulationNode>,\n              dragHelper: DragHelper<SimulationNode>,\n              mouseHelper: MouseHelper<SimulationNode>,\n              canvas: Selection<any, any, any, any>,\n              simulation: Simulation,\n              colorProvider: ColorProvider) {\n    this.drawingHelper = drawingHelper;\n    this.dragHelper = dragHelper;\n    this.mouseHelper = mouseHelper;\n    this.canvas = canvas;\n    this.simulation = simulation;\n    this.colorProvider = colorProvider;\n  }\n\n  add(obj: undefined | Drawable | Drawable[]): SimulationNode | SimulationNode[] {\n\n    let addingObj: undefined | SimulationNode | SimulationNode[];\n    if (obj instanceof SimulationNode) {\n      addingObj = obj as SimulationNode;\n    } else if (Array.isArray(obj)) {\n      addingObj = obj.map(el => el as SimulationNode);\n    } else {\n      addingObj = undefined;\n    }\n    let values: number[];\n    if (Array.isArray(addingObj)) {\n      values = addingObj.map(sn => sn.value);\n      addingObj.forEach(d => {\n        d.id = this.maxId++;\n        this.data.push(d);\n        // this.simulation.loop.nodes.push(d);\n      });\n    } else {\n      if (!addingObj) {\n        addingObj = new SimulationNode(this.generateRandomValue(), -1, 0, 0);\n      }\n      values = [addingObj.value];\n      addingObj.id = this.maxId++;\n      this.data.push(addingObj);\n      // this.simulation.loop.nodes.push(obj);\n    }\n\n    this.colorProvider.setColorScheme(values);\n    return addingObj;\n  }\n\n  generateRandomValue(n = 100, fractionDigits = 1): number {\n    return parseFloat((Math.random() * n - n / 2).toFixed(fractionDigits));\n  }\n\n  draw(): void {\n    this.data.sort((a, b) => b.nodeOrder - a.nodeOrder);\n    this.canvas\n      .selectAll('.node')\n      .data(this.data, (d: SimulationNode) => d.id)\n      .join(\n        (enterElement) => this.enter(enterElement),\n        (updateElement) => this.update(updateElement),\n        (exitElement) => this.exit(exitElement)\n      );\n  }\n\n  enter(enterElement: d3.Selection<d3.EnterElement, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\n    const nodeElement = this.drawingHelper.enter(enterElement);\n    this.mouseHelper.addMouseInteraction(nodeElement.select('.node-circle'));\n    this.dragHelper.addDragInteraction(nodeElement);\n\n    return nodeElement;\n  }\n\n  update(updateElement: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\n    this.drawingHelper.update(updateElement);\n    return updateElement;\n  }\n\n  exit(exitElement: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\n    this.drawingHelper.exit(exitElement);\n    return exitElement;\n  }\n\n  remove(obj: SimulationNode | SimulationNode[]): void {\n    if (Array.isArray(obj)) {\n      obj.forEach(d => this.removeNode(d));\n    } else {\n      this.removeNode(obj);\n    }\n    this.draw();\n  }\n\n  private removeNode(n): void {\n    const dataIndex = this.data.indexOf(n);\n    // const forceIndex = this.simulation.loop.nodes.indexOf(n);\n    if (dataIndex !== -1) {\n      this.data.splice(dataIndex, 1);\n    }\n    // if (forceIndex !== -1) {\n    //   // this.simulation.loop.nodes.splice(forceIndex, 1);\n    // }\n  }\n\n  generateNodes(n: number, randomValue = 10, xPos = 0, yPos = 0): SimulationNode[] {\n    const nodes: SimulationNode[] = [];\n    for (let i = 0; i < n; ++i) {\n      let rand = this.generateRandomValue(randomValue);\n      while (nodes.some(d => d.value === rand)) {\n        rand = this.generateRandomValue(randomValue * randomValue);\n      }\n      // const pos = this.positionHelper.createRandomPointOnCircumference([0, 0], 1);\n      const node = new SimulationNode(rand, -1, xPos, yPos);\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  reset(): void {\n    this.maxId = 0;\n    this.data = [];\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {SceneService} from '../../core/services/scene.service';\nimport {Scene} from '../../core/simulation/scene';\nimport {BehaviorSubject} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-content-view',\n  templateUrl: './content-view.component.html',\n  styleUrls: ['./content-view.component.css']\n})\nexport class ContentViewComponent implements OnInit {\n\n  content: SafeHtml | string = '';\n  successContent: SafeHtml | string = '';\n  private _isContentLoading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  showLoadingSkeleton = true;\n\n  constructor(private sceneService: SceneService,\n              private router: Router,\n              private sanitizer: DomSanitizer) { }\n\n  ngOnInit(): void {\n    this.sceneService.set.pipe(debounceTime(100)).subscribe(val => {\n      this.showLoadingSkeleton = true;\n      this.getContent();\n      this.showLoadingSkeleton = false;\n    });\n    this.sceneService.played.pipe(debounceTime(100)).subscribe(val => {\n      if (val === 'played') {\n        this.showLoadingSkeleton = true;\n        this.getSuccessContent();\n        this.showLoadingSkeleton = false;\n      }\n    });\n  }\n\n  getRoute(event: MouseEvent): void {\n    // @ts-ignore\n    const routerLink = event.target.getAttribute('href');\n    if (!routerLink) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n\n    const url = this.router.serializeUrl(\n      this.router.createUrlTree([routerLink])\n    );\n\n    window.open(url, '_blank');\n\n  }\n\n  getContent(): void {\n    if (!this.scene) {\n       this.content = '';\n       return;\n    }\n    this.content = this.sanitizer.bypassSecurityTrustHtml(this.scene.content());\n  }\n\n  getSuccessContent(): void {\n    if (!this.scene) {\n      this.successContent = '';\n      return;\n    }\n    this.successContent = this.sanitizer.bypassSecurityTrustHtml(this.scene.successContent());\n  }\n\n\n  get scene(): Scene | undefined {\n    return this.sceneService.scene.getValue();\n  }\n\n  get isContentLoading(): boolean {\n    return this._isContentLoading.getValue();\n  }\n\n  @Input()\n  set isContentLoading(val: boolean) {\n    this._isContentLoading.next(val);\n  }\n}\n","<div *ngIf=\"!showLoadingSkeleton; else contentLoadingSkeleton\">\n  <p-scrollPanel [style]=\"{width: '100%', height: '84vh'}\">\n    <div class=\"content\"\n         [innerHTML]=\"content\"\n         (click)=\"getRoute($event)\"\n    ></div>\n    <div class=\"success-content\" *ngIf=\"scene.played === 'played'\">\n      Explanation <i class=\"p-ml-2 pi pi-info-circle\"></i>\n      <div [innerHTML]=\"successContent\"></div>\n    </div>\n  </p-scrollPanel>\n</div>\n<ng-template #contentLoadingSkeleton>\n  <div class=\"content\">\n    <p-skeleton width=\"70%\" height=\"2.5rem\" styleClass=\"p-mt-4 p-mb-4\"></p-skeleton>\n    <p-skeleton width=\"85%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"90%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"82%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"91%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"14%\" height=\"1rem\" styleClass=\"p-mb-4\"></p-skeleton>\n    <p-skeleton width=\"81%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"24%\" height=\"1rem\" styleClass=\"p-mb-4\"></p-skeleton>\n    <p-skeleton width=\"81%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"94%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"87%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"91%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"19%\" height=\"1rem\" styleClass=\"p-mb-4\"></p-skeleton>\n    <p-skeleton width=\"82%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"89%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"17%\" height=\"1rem\" styleClass=\"p-mb-4\"></p-skeleton>\n    <p-skeleton width=\"86%\" height=\"1rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    <p-skeleton width=\"43%\" height=\"1rem\" styleClass=\"p-mb-4\"></p-skeleton>\n  </div>\n</ng-template>\n","import {SimulationLinkDatum} from 'd3-force';\nimport {BstCell} from '../structures/tree/bst-cell';\n\nexport class SimulationLink implements SimulationLinkDatum<BstCell> {\n  strokeWidth = 10;\n  z = -1;\n\n  id: number | undefined;\n  source: BstCell;\n  target: BstCell;\n\n  yDisplacement: number;\n\n  constructor(source: BstCell, target: BstCell, yDisplacement = 0) {\n    this.source = source;\n    this.target = target;\n    this.yDisplacement = yDisplacement;\n  }\n\n}\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {SimulationStack} from '../../../app/core/simulation/structures/array/simulation-stack';\r\n\r\nexport class Pop implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  stack: SimulationStack;\r\n  index = -1;\r\n  elements = '';\r\n  stackSize = -1;\r\n  highlightedElement: ArrayCell;\r\n  poppedValue = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.stack = simulation.objectFactory.create('stack', 0, 0, 10) as SimulationStack;\r\n    simulation.arrayHandler.add(this.stack);\r\n\r\n    for (const node of nodes) {\r\n      await this.stack.push(node, false);\r\n    }\r\n    this.stack.descriptor = 'stack';\r\n    this.poppedValue = this.stack.top.node.value;\r\n    this.stackSize = !!this.stack ? this.stack.size : 10;\r\n    this.elements = this.stack.data.slice(0, this.stackSize).map(c => c.node.value).join(', ');\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.stack.pop();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Stack - Pop operation</h1>\r\n  <p>\r\n    Take a look at that array on the right-hand side. That's our stack with elements ${this.elements}.\r\n  </p>\r\n  <p>\r\n    There are ${this.stackSize} elements in the stack.\r\n    The highlighted element ${this.poppedValue} is the <em>top element</em> of the stack.\r\n  </p>\r\n  <p>\r\n    The operation that will be performed now is the second crucial operation for stacks.\r\n    It is called <b>pop</b>.\r\n  </p>\r\n  <p>\r\n    Pop simply means the last element ${this.poppedValue} from the top\r\n    will be deleted from the array, and an element left to it will become the new <em>top</em>.\r\n  </p>\r\n  <p>\r\n    Let's see how elements are popped from this stack..\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After successfully popping from the stack, we have received back the value ${this.poppedValue} from\r\n    the stack.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class InsertionBeginning implements Scene {\r\n  id = 4;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.arrElement = 23.11;\r\n    this.index = 0;\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.arrElement, -1, this.array.x, this.array.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.array.insertAt(node, this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion at the beginning</h1>\r\n  <p>\r\n    Still that same array :D It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    Now, let's insert ${this.arrElement} at the the beginning (i.e. index [0]).\r\n  </p>\r\n  <p>\r\n    Doesn't this already look similar to the previous scenario when we were moving elements to the right?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Just like earlier, we head to move all the elements to the right of our new element's index.\r\n  </p>\r\n  <p>\r\n    Since we wanted to insert ${this.arrElement} at the beginning, and that means at the index [0],\r\n    we had to shift all existing elements to the right, starting from the index at which we wanted\r\n    to insert ${this.arrElement}.\r\n  </p>\r\n  <p>\r\n    Only after shifting all the elements to the right, were we sure\r\n    that the array didn't have any elements at index [0],\r\n    and we could simply insert ${this.arrElement} there.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {BubbleSort} from '../../../app/core/simulation/structures/array/bubble-sort';\r\nimport {InsertionSort} from '../../../app/core/simulation/structures/array/insertion-sort';\r\nimport {SelectionSort} from '../../../app/core/simulation/structures/array/selection-sort';\r\n\r\nexport class Selection implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  array: SimulationArray;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    this.array.sorting = new SelectionSort();\r\n    await this.array.sort();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Selection sort</h1>\r\n  <p>\r\n    Selection sort is a simple sorting algorithm that maintains a sorted subarray,\r\n    which is represented at the left side of the array. Iterating through the unsorted right subarray,\r\n    the algorithm finds the maximum value there and simply puts it at the end of the\r\n    left subarray.\r\n  </p>\r\n  <p>\r\n    In this example, elements will be sorted in ascending order.\r\n  </p>\r\n\r\n  <p>\r\n    Press play to sort the elements\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n\r\n  <p>\r\n    Among quadratic sorting algorithms (sorting algorithms with a simple average-case\r\n    of <em>Θ(n<sup>2</sup>))</em>, selection sort almost always outperforms bubble sort.\r\n    However, insertion sort is very similar.\r\n  </p>\r\n  <p>\r\n    Finally, selection sort is greatly outperformed on larger arrays by divide-and-conquer\r\n    algorithms such as mergesort or quicksort. However, insertion sort or selection sort\r\n    are both typically faster for small arrays (i.e. fewer than 10–20 elements).\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import * as d3 from 'd3';\r\nimport {Selection} from 'd3-selection';\r\n\r\nexport class ArrowheadHelper {\r\n  static addArrowhead(svg: Selection<any, any, any, any>): void {\r\n    const path = d3.path();\r\n    path.moveTo(0, 0);\r\n    path.lineTo(10, 5);\r\n    path.lineTo(0, 10);\r\n    path.closePath();\r\n\r\n    svg\r\n      .append('defs')\r\n      .append('marker')\r\n      .attr('id', 'arrowhead')\r\n      .attr('viewBox', '0 0 10 10')\r\n      .attr('refX', 0)\r\n      .attr('refY', 5)\r\n      .attr('orient', 'auto')\r\n      .append('path')\r\n      .attr('d', path.toString())\r\n      .style('fill', 'white')\r\n      .style('stroke', 'none');\r\n  }\r\n}\r\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {RedBlack} from './scenes/red-black';\r\nimport {InsertionFirstCase} from './scenes/insertion-first-case';\r\nimport {InsertionSecondCase} from './scenes/insertion-second-case';\r\nimport {InsertionThirdCase} from './scenes/insertion-third-case';\r\nimport {DeletionFirstCase} from './scenes/deletion-first-case';\r\nimport {DeletionSecondCase} from './scenes/deletion-second-case';\r\nimport {DeletionThirdCase} from './scenes/deletion-third-case';\r\n\r\nconst rbScenario = new Scenario('Red-black tree', 'rb-avl',\r\n  'Insertion, deletion and searching in a Red-black tree ');\r\nrbScenario.cover = 'scenarios/rb-tree/cover.png';\r\nrbScenario.scenes = [\r\n  RedBlack,\r\n  InsertionFirstCase,\r\n  InsertionSecondCase,\r\n  InsertionThirdCase,\r\n  DeletionFirstCase,\r\n  DeletionSecondCase,\r\n  DeletionThirdCase\r\n];\r\n\r\nexport default rbScenario;\r\n","<div class=\"p-grid scenario-grid p-justify-center\">\n  <div class=\"p-col-12 p-sm-6 p-md-4 p-xl-3\" *ngFor=\"let scenario of scenarios\">\n    <div class=\"clickable-card\"\n         (click)=\"visualize($event, scenario)\"\n         pRipple>\n      <p-card [header]=\"scenario.name\">\n        <ng-template pTemplate=\"header\">\n          <img [alt]=\"scenario.name + ' cover'\" [src]=\"scenario.cover\">\n        </ng-template>\n        <p>{{scenario.description}}</p>\n        <ng-template pTemplate=\"footer\">\n          <div class=\"p-text-right\">\n            <button class=\"p-button p-button-rounded\"\n                    label=\"Visualize\"\n                    icon=\"pi pi-eye\"\n                    (click)=\"visualize($event, scenario)\"\n                    pButton\n            ></button>\n          </div>\n        </ng-template>\n      </p-card>\n    </div>\n  </div>\n  <div class=\"p-col-12 p-sm-6 p-md-4 p-xl-3\">\n    <p-card class=\"soon-card\" header=\"Soon...\">\n      <ng-template pTemplate=\"header\">\n        <img alt=\"Soon cover\" src=\"scenarios/soon-cover.png\">\n      </ng-template>\n      <p>More coming coon</p>\n      <ng-template pTemplate=\"footer\">\n        <div class=\"p-text-right\">\n          <button class=\"p-button p-button-rounded\" label=\"Visualize\" icon=\"pi pi-eye\" disabled pButton></button>\n        </div>\n      </ng-template>\n    </p-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {ScenarioService} from '../../core/services/scenario.service';\nimport {Scenario} from '../../core/simulation/scenario';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-scenario-grid',\n  templateUrl: './scenario-grid.component.html',\n  styleUrls: ['./scenario-grid.component.css']\n})\nexport class ScenarioGridComponent implements OnInit {\n\n  constructor(private scenarioService: ScenarioService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  visualize(event: MouseEvent, scenario: Scenario): void {\n    event.stopPropagation();\n    this.scenarioService.currentScenario.next(scenario);\n    this.router.navigate(['visualize', scenario.path, 0]);\n  }\n\n  playground(): void {\n    event.stopPropagation();\n    this.router.navigate(['playground']);\n  }\n\n  get scenarios(): Scenario[] {\n    return this.scenarioService.scenarios;\n  }\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class DeletionBeginning implements Scene {\r\n  id = 7;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.index = 0;\r\n    this.arrElement = this.array.data[this.index].node.value;\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.deleteAt(this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion from a given index of an array</h1>\r\n  <p>\r\n    Glance at the array on the right-hand side. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    What would happen if we wanted to delete an element from the beginning, i.e. index [${this.index}] of this array.\r\n  </p>\r\n  <p>\r\n    You might think that every remaining element in the will be shifted to the left.\r\n  </p>\r\n  <small>\r\n    HINT: That's correct.\r\n  </small>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After removing ${this.arrElement} from the array, that empty space from the beginning, index [${this.index}]\r\n    had to be gone.\r\n  </p>\r\n  <p>\r\n    That was managed by moving all the remaining elements to the left.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class InsertionMiddle implements Scene {\r\n  id = 4;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.arrElement = 23.11;\r\n    this.index = Math.floor(this.array.size / 2);\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.arrElement, -1, this.array.x, this.array.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.array.insertAt(node, this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion at a given index</h1>\r\n  <p>\r\n    There's still that same array from before. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    Now, let's insert ${this.arrElement} at the index [${this.index}].\r\n  </p>\r\n  <p>\r\n    Are there any special steps in this new scenario that we need to perform prior to\r\n    inserting this element at the index [${this.index}]?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    As you see, this was quite a complicated and timely process.\r\n  </p>\r\n  <p>\r\n    Firstly, all of the elements starting from index [${this.index}]\r\n    had to be moved one step to the right. And that was performed by\r\n    moving those elements with the higher index first.\r\n  </p>\r\n  <p>\r\n    Only after shifting all the elements to the right, were we sure\r\n    that the array didn't have any elements at index [${this.index}],\r\n    and we could simply insert ${this.arrElement} there.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class DeletionEnd implements Scene {\r\n  id = 5;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.index = this.array.size - 1;\r\n    this.arrElement = this.array.data[this.array.size - 1].node.value;\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.deleteAt(this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion from the end of an array</h1>\r\n  <p>\r\n    Notice an array on the right-hand-side. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    What would happen if we wanted to delete an element from the end, i.e. index [${this.index}] of this array.\r\n  </p>\r\n  <p>\r\n    Are there any special steps that we need to perform prior to its deletion?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Obviously, there weren't any necessary steps prior to this deletion.\r\n    We simply just removed ${this.arrElement} from the index [${this.index}],\r\n    so there are no more elements at that position.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {DrawableHandler} from './drawable-handler';\r\nimport {SimulationNode} from '../basics/simulation-node';\r\nimport {BinarySearchTree} from '../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport * as d3 from 'd3';\r\nimport {DragHelper} from '../helpers/drag/drag-helper';\r\nimport {DrawingHelper} from '../helpers/drawing/drawing-helper';\r\nimport {MouseHelper} from '../helpers/mouse/mouse-helper';\r\nimport {SimulationArray} from '../structures/array/simulation-array';\r\nimport {ArrayCell} from '../structures/array/array-cell';\r\nimport {BstCell} from '../structures/tree/bst-cell';\r\nimport {Simulation} from '../simulation';\r\nimport {BstCellDrag} from '../helpers/drag/bst-cell-drag';\r\nimport {BstCellMouse} from '../helpers/mouse/bst-cell-mouse';\r\nimport {LinkDrawingHelper} from '../helpers/drawing/link-drawing-helper';\r\nimport {SimulationLink} from '../basics/simulation-link';\r\n\r\nexport class BinarySearchTreeHandler implements DrawableHandler<BinarySearchTree> {\r\n\r\n  dragHelper: DragHelper<BinarySearchTree>;\r\n  drawingHelper: DrawingHelper<BinarySearchTree>;\r\n  mouseHelper: MouseHelper<BinarySearchTree>;\r\n  simulation: Simulation;\r\n\r\n  bstCellDrawingHelper: DrawingHelper<BstCell>;\r\n  bstCellDragHelper: DragHelper<BstCell>;\r\n  bstCellMouseHelper: MouseHelper<BstCell>;\r\n\r\n  linkDrawingHelper: DrawingHelper<SimulationLink>;\r\n  data: BinarySearchTree[] = [];\r\n  maxId = 0;\r\n  canvas: d3.Selection<any, any, any, any>;\r\n\r\n  constructor(simulation: Simulation,\r\n              dragHelper: DragHelper<BinarySearchTree>,\r\n              drawingHelper: DrawingHelper<BinarySearchTree>,\r\n              mouseHelper: MouseHelper<BinarySearchTree>,\r\n              bstCellDrawingHelper: DrawingHelper<BstCell>,\r\n              bstCellDragHelper: DragHelper<BstCell>,\r\n              bstCellMouseHelper: MouseHelper<BstCell>,\r\n              linkDrawingHelper: DrawingHelper<SimulationLink>,\r\n              canvas: d3.Selection<any, any, any, any>) {\r\n    this.simulation = simulation;\r\n    this.dragHelper = dragHelper;\r\n    this.drawingHelper = drawingHelper;\r\n    this.mouseHelper = mouseHelper;\r\n    this.bstCellDrawingHelper = bstCellDrawingHelper;\r\n    this.bstCellDragHelper = bstCellDragHelper;\r\n    this.bstCellMouseHelper = bstCellMouseHelper;\r\n    this.linkDrawingHelper = linkDrawingHelper;\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  add(tree: BinarySearchTree): void {\r\n    tree.id = this.maxId++;\r\n    tree.setRoot();\r\n    this.data.push(tree);\r\n  }\r\n\r\n  draw(): void {\r\n\r\n    const treeElements = this.canvas\r\n      .selectAll('.bst')\r\n      .data(this.data, (tree: BinarySearchTree) => tree.id)\r\n      .join(enterElement => this.enter(enterElement),\r\n        updateElement => this.update(updateElement),\r\n        exitElement => this.exit(exitElement));\r\n\r\n    treeElements.lower();\r\n  }\r\n\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    const treeElement = this.drawingHelper.enter(enterElement);\r\n    this.mouseHelper.addMouseInteraction(treeElement);\r\n    treeElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: BinarySearchTree) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n        const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n        this.bstCellDragHelper.addDragInteraction(cellElement);\r\n        this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n        return cellElement;\r\n      });\r\n\r\n    treeElement\r\n      .selectAll('.link')\r\n      .data((d: BinarySearchTree) => d.getLinks(), (link: SimulationLink) => `${link.source.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      });\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    this.drawingHelper.update(updateElement);\r\n    updateElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: BinarySearchTree) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n          const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n          this.bstCellDragHelper.addDragInteraction(cellElement);\r\n          this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n          return cellElement;\r\n        },\r\n        updateCell => this.bstCellDrawingHelper.update(updateCell),\r\n        exitCell => this.bstCellDrawingHelper.exit(exitCell));\r\n\r\n    updateElement\r\n      .selectAll('.link')\r\n      .data((d: BinarySearchTree) => d.getLinks(), (link: SimulationLink) => `${link.target.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      },\r\n        updateLink => this.linkDrawingHelper.update(updateLink).lower(),\r\n        exitLink => this.linkDrawingHelper.exit(exitLink));\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    return this.drawingHelper.exit(exitElement);\r\n  }\r\n\r\n  reset(): void {\r\n    this.maxId = 0;\r\n    this.data = [];\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {BubbleSort} from '../../../app/core/simulation/structures/array/bubble-sort';\r\nimport {InsertionSort} from '../../../app/core/simulation/structures/array/insertion-sort';\r\n\r\nexport class Insertion implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  array: SimulationArray;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    this.array.sorting = new InsertionSort();\r\n    await this.array.sort();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion sort</h1>\r\n  <p>\r\n    Insertion sort is a simple sorting algorithm that maintains a sorted sub-list,\r\n    which is represented at the left side of the array. Iterating through the right subarray,\r\n    each element is chosen and then but in the left sub-list, but only between one element\r\n    which has a lower and the other which has a higher value.\r\n  </p>\r\n  <p>\r\n   The array elements are compared with each other sequentially and then arranged simultaneously\r\n   in some particular order. The analogy can be understood from the style we arrange a deck\r\n   of cards. This sort works on the principle of inserting an element at a particular position,\r\n   hence the name Insertion Sort.\r\n   </p>\r\n  <p>\r\n    In this example, elements will be sorted in ascending order.\r\n  </p>\r\n\r\n  <p>\r\n    Press play to sort the elements\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    The best case input is an array that is already sorted. In this case insertion sort\r\n    has a linear running time (i.e., <em>O(n)</em>). During each iteration, the first remaining\r\n    element of the input is only compared with the right-most element of the sorted\r\n    subsection of the array.\r\n  </p>\r\n  <p>\r\n     The simplest worst case input is an array sorted in reverse order. The set of all\r\n     worst case inputs consists of all arrays where each element is the smallest or\r\n     second-smallest of the elements before it. In these cases every iteration of the\r\n     inner loop will scan and shift the entire sorted subsection of the array before\r\n     inserting the next element. This gives insertion sort a quadratic running time\r\n     (i.e., <em>O(n<sup>2</sup>)</em>).\r\n  </p>\r\n  <p>\r\n     The average case is also quadratic, which makes insertion sort impractical for sorting\r\n     large arrays. However, insertion sort is one of the fastest algorithms for sorting very\r\n     small arrays, even faster than quicksort; indeed, good quicksort implementations use\r\n     insertion sort for arrays smaller than a certain threshold, also when arising as\r\n     subproblems; the exact threshold must be determined experimentally and depends on the machine,\r\n     but is commonly around ten.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class PopFirst implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  toPop = -1;\r\n  newFirst = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n\r\n    this.toPop = nodes[0].value;\r\n    this.newFirst = nodes[1].value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.list.popFirst();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - pop first node</h1>\r\n  <p>\r\n    In order to remove the element which is placed at the beginning of a linked list,\r\n    it is necessary to simply reverse steps from insertion at the beginning, that is:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      Get the node referenced by ${this.toPop}, which is ${this.newFirst};\r\n    </li>\r\n    <li>\r\n      Set <em>head</em> to reference the node with value ${this.newFirst}.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    Now, let's visualize that.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.toPop} is now popped from the linked list and node with value\r\n    ${this.newFirst} is referenced by <em>head</em>.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport heapScenario from '../heap-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\n\r\nexport class Deletion implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  heap: Heap;\r\n  toDelete = -1;\r\n  newRoot = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.heap = simulation.objectFactory.create('heap', 0, 0) as Heap;\r\n    simulation.heapHandler.add(this.heap);\r\n\r\n    for (const node of nodes) {\r\n      await this.heap.insert(node, false);\r\n    }\r\n\r\n    if (nodes[3] !== this.heap.getRoot().node) {\r\n      this.toDelete = nodes[3].value;\r\n    } else {\r\n      this.toDelete = nodes[2].value;\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.heap.delete(this.toDelete);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Heap - deletion</h1>\r\n  <p>\r\n    In order to remove an element with a given value, firstly the heap\r\n    from the right-hand side has to be searched using breadth-first-search\r\n    for that value.\r\n  </p>\r\n  <p>\r\n    After finding the target node, it is swapped with the last leaf\r\n    of the heap, just like it was the case with extracting the minimum\r\n    value.\r\n  </p>\r\n  <p>\r\n    Then, the last node is removed from the heap, and the remaining\r\n    swapped node is propagated down the heap in order to restore\r\n    heap properties.\r\n  </p>\r\n  <p>\r\n    Let's see how all this works with the value ${this.toDelete}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.toDelete} is now removed from the heap, and\r\n    the its order is restored.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {SimulationNode} from '../../../../basics/simulation-node';\nimport * as d3 from 'd3';\nimport {SimulationLink} from '../../../../basics/simulation-link';\nimport {SimulationGraph} from '../../simulation-graph';\nimport {BstCell} from '../../bst-cell';\nimport {BstCellMouse} from '../../../../helpers/mouse/bst-cell-mouse';\nimport {BstCellDrag} from '../../../../helpers/drag/bst-cell-drag';\nimport {BstCellDrawing} from '../../../../helpers/drawing/bst-cell-drawing';\nimport {BinaryTree} from '../binary-tree';\n\nexport class BinarySearchTree extends BinaryTree {\n\n  children: { [id: number]: [BstCell | undefined, BstCell | undefined] } = {};\n  parents: { [id: number]: [BstCell, number] } = {};\n\n  constructor(id: number, x: number, y: number) {\n    super(id, x, y);\n  }\n\n  addCell(cell: BstCell, parent: BstCell | null, left: boolean = true): void {\n    this.data.push(cell);\n    // this.setLeftChild(parent, cell)\n    if (left) {\n      this.setLeftChild(parent, cell);\n    } else {\n      this.setRightChild(parent, cell);\n    }\n  }\n\n  /**\n   * Removes cell from the tree and detaches it from all other cells.\n   * @param cell\n   */\n  deleteCell(cell: BstCell): void {\n    this.linkHelper.detachCompletely(cell);\n    this.data = this.data.filter(c => c !== cell);\n    this.detachChildren(cell);\n    this.detachParent(cell);\n  }\n\n\n  addChildCells(cell: BstCell): void {\n    const leftChild = new BstCell(this, this.maxId++, cell.x, cell.y);\n    const rightChild = new BstCell(this, this.maxId++, cell.x, cell.y);\n\n    this.addCell(leftChild, cell, false);\n    this.addCell(rightChild, cell, true);\n\n    this.linkHelper.addLink(cell, leftChild);\n    this.linkHelper.addLink(cell, rightChild);\n  }\n\n  async add(d: SimulationNode, bstCell: BstCell, animate = true): Promise<void> {\n\n    bstCell.setNode(d);\n\n    this.addChildCells(bstCell);\n    this.alignForces();\n\n    const isValid = this.checkEntry(bstCell);\n\n    if (!isValid) {\n      this.isValid = false;\n      bstCell.isValid = false;\n    }\n\n  }\n\n  async find(value: number, animate = true): Promise<BstCell | null> {\n\n    if (this.data.length === 0) {\n      return null;\n    }\n\n    let checkingCell = this.getRoot();\n\n    while (checkingCell) {\n      if (!checkingCell.node) {\n        return null;\n      }\n      const node = checkingCell.node;\n      node.drawArrow = true;\n\n      if (animate) {\n        await new Promise(r => setTimeout(r, 600));\n      }\n\n      node.drawArrow = false;\n\n      if (node.value === value) {\n        node.highlighted = true;\n        if (animate) {\n          await new Promise(r => setTimeout(r, 600));\n        }\n        node.highlighted = false;\n        return checkingCell;\n      } else if (value < node.value) {\n        checkingCell = this.getLeftChild(checkingCell);\n      } else {\n        checkingCell = this.getRightChild(checkingCell);\n      }\n    }\n  }\n\n  /**\n   * Finds and deletes a node with the passed value.\n   * @param value - Value used to find a node and then delete it.\n   * @param animate\n   * @return nodeCellPromise - A promise of an array consisting of simulation node,\n   * a cell that was the first one affected by the occurred deletion, and a cell from\n   * which the node was deleted.\n   * The cell is null if the deleted node didn't have a parent, i.e. it was the root.\n   */\n  async delete(value: number, animate = true): Promise<[SimulationNode, BstCell | null, BstCell]> {\n    const found = await this.find(value, animate);\n    if (!found) {\n      return null;\n    }\n    const leftChild = this.getLeftChild(found);\n    const rightChild = this.getRightChild(found);\n\n    let ret: [SimulationNode, BstCell | null, BstCell];\n    if (!leftChild.node && !rightChild.node) {\n      ret = await this.deleteLeaf(found, leftChild, rightChild);\n    } else if (!leftChild.node || !rightChild.node) {\n      ret = await this.deleteOnlyChild(found, leftChild, rightChild);\n    } else {\n      ret = await this.deleteTwoChildren(found, leftChild);\n    }\n    ret[0].setTarget(this.x, this.y - 200);\n    return ret;\n  }\n\n  /**\n   * Deletes a node which doesn't have any children besides empty cells (which are mandatory).\n   * @param target - The cell being deleted.\n   * @param leftChild - Left child of the cell being deleted.\n   * @param rightChild - Right child of the cell being deleted.\n   * @param animate - Whether the process should be animated.\n   * @returns promise - A promise of the node which was deleted,\n   * and the exact cell from which the node was deleted (twice for uniformity).\n   */\n  async deleteLeaf(target: BstCell, leftChild: BstCell, rightChild: BstCell, animate = true):\n    Promise<[SimulationNode, BstCell | null, BstCell]> {\n    this.deleteCell(leftChild);\n    this.deleteCell(rightChild);\n\n    this.alignForces();\n\n\n\n    return [target.removeNode(), target, target];\n  }\n\n  /**\n   * Deletes a node which which has one child cell that contains a node and one that does not.\n   * @param target - The cell being deleted.\n   * @param leftChild - Left child of the cell being deleted.\n   * @param rightChild - Right child of the cell being deleted.\n   * @param animate - Whether the process should be animated.\n   * @returns promise - A promise of the node which was deleted and the cell which replaces 'target'\n   * (i.e. this cell was target's child and now is a child of the same cell the target was).\n   */\n  async deleteOnlyChild(target: BstCell, leftChild: BstCell, rightChild: BstCell, animate = true):\n    Promise<[SimulationNode, BstCell | null, BstCell]> {\n    const [parent, targetIndex] = this.getParent(target);\n    const takenCell = !!leftChild.node ? leftChild : rightChild;\n    const freeCell = !leftChild.node ? leftChild : rightChild;\n    this.deleteCell(freeCell);\n    this.deleteCell(target);\n\n    if (targetIndex === 0) {\n      this.setLeftChild(parent, takenCell);\n    } else {\n      this.setRightChild(parent, takenCell);\n    }\n\n    const node = target.removeNode();\n\n    if (animate) {\n      if (!!node) {\n        node.setTarget(this.x, this.y - 100);\n      }\n\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    if (parent) {\n      this.linkHelper.addLink(parent, takenCell);\n    } else {\n      this.setLeftChild(null, takenCell);\n      takenCell.setDefaultDescriptor(target.defaultDescriptor);\n      takenCell.isRoot = true;\n    }\n    this.alignForces();\n\n    return [node, takenCell, target];\n  }\n\n  /**\n   * Deletes the node whose both children contain nodes.\n   * @param target - The cell being deleted.\n   * @param leftChild - Left child of the cell being deleted.\n   * @param animate - Whether the process should be animated.\n   * @return nodeCellPromise - A promise of an array consisting of simulation node,\n   * the cell that was the first one affected by the occurred deletion, and the cell\n   * from which the node was deleted.\n   *\n   * The affected cell is null if the deleted node didn't have a parent, i.e. it was the root.\n   */\n  async deleteTwoChildren(target: BstCell, leftChild: BstCell, animate = true):\n    Promise<[SimulationNode, BstCell | null, BstCell]> {\n    const substituteCell = await this.findMax(leftChild);\n    const substituteNode = substituteCell.removeNode();\n\n    const node = target.removeNode();\n\n    if (animate) {\n      node.setTarget(this.x, this.y - 100);\n      substituteNode.setTarget(target.x, target.y);\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    target.setNode(substituteNode);\n\n    const substituteLeft = this.getLeftChild(substituteCell);\n    const substituteRight = this.getRightChild(substituteCell);\n\n    let deleted: [SimulationNode, BstCell | null, BstCell];\n    if (!substituteLeft.node && !substituteRight.node) {\n      deleted = (await this.deleteLeaf(substituteCell, substituteLeft, substituteRight, animate));\n    } else if (!substituteLeft.node || !substituteRight.node) {\n      deleted = (await this.deleteOnlyChild(substituteCell, substituteLeft, substituteRight, animate));\n    }\n\n    return [node, deleted[1], deleted[2]];\n  }\n\n  async findMax(sourceSubtreeRoot: BstCell, animate = true): Promise<BstCell> {\n    let rightCell = sourceSubtreeRoot;\n    if (animate) {\n      rightCell.highlight('#5cff00');\n      await new Promise(r => setTimeout(r, 600));\n      rightCell.resetColor();\n    }\n    let potentialRightCell = this.getRightChild(rightCell);\n    while (!!potentialRightCell.node) {\n      rightCell = potentialRightCell;\n      if (animate) {\n        rightCell.highlight('#5cff00');\n        await new Promise(r => setTimeout(r, 600));\n        rightCell.resetColor();\n      }\n      potentialRightCell = this.getRightChild(rightCell);\n    }\n\n    return rightCell;\n  }\n\n\n  async insert(node: SimulationNode, animate = true): Promise<void> {\n    let checkingCell = this.getRoot();\n\n    while (checkingCell) {\n      let side = 0;\n      if (!checkingCell.node) {\n        if (animate) {\n          node.setTarget(checkingCell.x + side, checkingCell.y - 100);\n          await new Promise(r => setTimeout(r, 600));\n        }\n        await this.add(node, checkingCell, animate);\n        return;\n      }\n\n      const checkingNode = checkingCell.node;\n\n      checkingNode.drawArrow = true;\n\n      if (checkingNode.value === node.value) {\n        checkingNode.drawArrow = false;\n        return;\n      } else if (checkingNode.value > node.value) {\n        side = -100;\n        checkingCell = this.getLeftChild(checkingCell);\n        if (animate) {\n          node.setTarget(checkingNode.x + side, checkingNode.y);\n          await new Promise(r => setTimeout(r, 600));\n        }\n      } else {\n        side = 100;\n        checkingCell = this.getRightChild(checkingCell);\n        if (animate) {\n          node.setTarget(checkingNode.x + side, checkingNode.y);\n          await new Promise(r => setTimeout(r, 600));\n        }\n      }\n      checkingNode.drawArrow = false;\n    }\n  }\n\n  protected checkEntry(cell: BstCell): boolean {\n\n    let [parent, childIndex] = this.getParent(cell);\n    while (!!parent) {\n\n      const isLeftChild = childIndex === 0;\n      if (isLeftChild) {\n        if (cell.node.value > parent.node.value) {\n          return false;\n        }\n      } else {\n        if (cell.node.value < parent.node.value) {\n          return false;\n        }\n      }\n      [parent, childIndex] = this.getParent(parent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param cell - Parent\n   * @returns - The left child of the provided *cell*.\n   * If *cell* isn't provided, returns undefined.\n   * @protected\n   */\n  getLeftChild(cell: BstCell): BstCell | undefined {\n    if (!cell) {\n      return undefined;\n    }\n    const children = this.children[cell.id];\n    if (!children) {\n      return undefined;\n    }\n    return children[0];\n  }\n\n  /**\n   * Sets the child cell as the left child of the parent cell.\n   * @param parent\n   * @param child\n   * @protected\n   */\n  protected setLeftChild(parent: BstCell, child: BstCell): void {\n    if (!child) {\n      return;\n    }\n    this.detachParent(child);\n\n    const parentId = !!parent ? parent.id : -1;\n    if (!this.children[parentId]) {\n      this.children[parentId] = [undefined, undefined];\n    }\n    this.children[parentId][0] = child;\n    this.parents[child.id] = [parent, 0];\n  }\n\n  /**\n   * @param cell - Parent\n   * @returns - The right child of the provided *cell*.\n   * If *cell* isn't provided, returns undefined.\n   * @protected\n   */\n  getRightChild(cell: BstCell): BstCell | undefined {\n    if (!cell) {\n      return undefined;\n    }\n    const children = this.children[cell.id];\n    if (!children) {\n      return undefined;\n    }\n    return children[1];\n  }\n\n  /**\n   * Sets the child cell as the right child of the parent cell.\n   * @param parent\n   * @param child\n   * @protected\n   */\n  protected setRightChild(parent: BstCell, child: BstCell): void {\n    if (!child) {\n      return;\n    }\n    this.detachParent(child);\n\n    const parentId = !!parent ? parent.id : -1;\n    if (!this.children[parentId]) {\n      this.children[parentId] = [undefined, undefined];\n    }\n    this.children[parentId][1] = child;\n    this.parents[child.id] = [parent, 1];\n  }\n\n  /**\n   *\n   * @param cell - Child cell.\n   * @returns - The list which contains the parent of the passed cell,\n   * and an index denoting whether the cell is left (0) or the right(1)\n   * child of the parent.\n   * If there's no cell, a list with undefined elements is returned.\n   * @protected\n   */\n  getParent(cell: BstCell): [BstCell, number] | [undefined, undefined] {\n    if (!cell) {\n      return [undefined, undefined];\n    }\n    console.log(cell.id);\n    console.log(this.parents);\n    return this.parents[cell.id];\n  }\n\n  /**\n   * Detaches cell from its children.\n   * @param cell - Parent which will be detached from its children.\n   * @protected\n   */\n  protected detachChildren(cell: BstCell): void {\n    if (!cell || !this.children[cell.id]) {\n      return;\n    }\n    for (const cellsChild of this.children[cell.id]) {\n      if (!cellsChild) {\n        continue;\n      }\n      if (this.parents[cellsChild.id][0] === cell) {\n        delete this.parents[cellsChild.id];\n      }\n    }\n    delete this.children[cell.id];\n  }\n\n  /**\n   * Detaches cell from its parent.\n   * @param cell - Child which will be detached from its parent.\n   * @protected\n   */\n  protected detachParent(cell: BstCell): void {\n    if (!cell) {\n      return;\n    }\n    if (!this.parents[cell.id]) {\n      return;\n    }\n    const [parent, childIndex] = this.parents[cell.id];\n    const parentId = !!parent ? parent.id : -1;\n    if (this.children[parentId][childIndex] === cell) {\n      this.children[parentId][childIndex] = undefined;\n    }\n    delete this.parents[cell.id];\n  }\n\n  /**\n   * @returns - The root of the tree.\n   */\n  getRoot(): BstCell {\n    return this.children[-1][0];\n  }\n}\n","import * as d3 from 'd3';\r\nimport {BstCell} from '../bst-cell';\r\nimport {SimulationLink} from '../../../basics/simulation-link';\r\nimport {SimulationGraph} from '../simulation-graph';\r\nimport {SimulationNode} from '../../../basics/simulation-node';\r\n\r\nexport abstract class BinaryTree extends SimulationGraph {\r\n  treeHierarchy?: d3.HierarchyNode<BstCell>;\r\n\r\n  protected constructor(id: number, x: number, y: number) {\r\n    super(id, x, y);\r\n  }\r\n\r\n  abstract add(d: SimulationNode, bstCell: BstCell): Promise<void>;\r\n\r\n  abstract delete(value: number): Promise<[SimulationNode, BstCell | null, BstCell]>;\r\n  abstract insert(node: SimulationNode): Promise<void>;\r\n  /**\r\n   * According to the provided side variable, adds a child to a parent.\r\n   * @param cell - Child cell.\r\n   * @param parent - Parent cell.\r\n   * @param left - Whether to add child as the parent's left (**true**) or right (**false**) child\r\n   */\r\n  abstract addCell(cell: BstCell, parent: BstCell | null, left: boolean): void;\r\n\r\n  /**\r\n   *\r\n   * @param cell - Child cell.\r\n   * @returns - The list which contains the parent of the passed cell,\r\n   * and an index denoting whether the cell is left (0) or the right(1)\r\n   * child of the parent.\r\n   * If there's no cell, a list with undefined elements is returned.\r\n   * @protected\r\n   */\r\n  protected abstract getParent(cell: BstCell): [BstCell, number] | [undefined, undefined];\r\n\r\n  /**\r\n   * @param cell - Parent\r\n   * @returns - The left child of the provided *cell*.\r\n   * If *cell* isn't provided, returns undefined.\r\n   * @protected\r\n   */\r\n  protected abstract getLeftChild(cell: BstCell): BstCell | undefined;\r\n\r\n  /**\r\n   * Sets the child cell as the left child of the parent cell.\r\n   * @param parent\r\n   * @param child\r\n   * @protected\r\n   */\r\n  protected abstract setLeftChild(parent: BstCell, child: BstCell): void;\r\n\r\n  /**\r\n   * @param cell - Parent\r\n   * @returns - The right child of the provided *cell*.\r\n   * If *cell* isn't provided, returns undefined.\r\n   * @protected\r\n   */\r\n  protected abstract getRightChild(cell: BstCell): BstCell | undefined;\r\n\r\n  /**\r\n   * Sets the child cell as the right child of the parent cell.\r\n   * @param parent\r\n   * @param child\r\n   * @protected\r\n   */\r\n  protected abstract setRightChild(parent: BstCell, child: BstCell): void;\r\n\r\n  /**\r\n   * Detaches cell from its children.\r\n   * @param cell - Parent which will be detached from its children.\r\n   * @protected\r\n   */\r\n  protected abstract detachChildren(cell: BstCell): void;\r\n\r\n  /**\r\n   * Detaches cell from its parent.\r\n   * @param cell - Child which will be detached from its parent.\r\n   * @protected\r\n   */\r\n  protected abstract detachParent(cell: BstCell): void;\r\n\r\n  /**\r\n   * @returns - The root of the tree.\r\n   * @protected\r\n   */\r\n  abstract getRoot(): BstCell;\r\n\r\n  /**\r\n   * Initializes the root.\r\n   */\r\n  setRoot(): void {\r\n    const root = new BstCell(this, this.maxId++, this.x, this.y);\r\n    root.isRoot = true;\r\n    root.setDefaultDescriptor(`tree_${this.id}`);\r\n    this.addCell(root, null, true);\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes cell from the tree and detaches it from all other cells.\r\n   * @param cell\r\n   */\r\n  abstract deleteCell(cell: BstCell): void;\r\n\r\n  /**\r\n   * Sets horizontal and vertical position of the tree.\r\n   * @param x - Horizontal position.\r\n   * @param y - Vertical position.\r\n   */\r\n  setPosition(x: number, y: number): void {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    this.alignForces();\r\n  }\r\n\r\n  /**\r\n   * Positions the tree according to the d3 library using\r\n   * d3.hierarchy and d3.tree(), which provide correct positioning\r\n   * for all the nodes in the tree.\r\n   */\r\n  alignForces(): void {\r\n    this.treeHierarchy = d3\r\n      .hierarchy(this.getRoot(), (d: BstCell) => {\r\n        const children: BstCell[] = [];\r\n        const leftChild = this.getLeftChild(d);\r\n        const rightChild = this.getRightChild(d);\r\n        if (!!leftChild) {\r\n          children.push(leftChild);\r\n        }\r\n        if (!!rightChild) {\r\n          children.push(rightChild);\r\n        }\r\n\r\n        return children;\r\n      });\r\n\r\n    const treeMap = d3.tree()\r\n      .nodeSize([180, 180]);\r\n\r\n    treeMap(this.treeHierarchy)\r\n      .descendants().forEach((d: d3.HierarchyPointNode<BstCell>) => {\r\n      d.x += this.x;\r\n      d.y += this.y;\r\n\r\n      d.data.graphMoved(d.x, d.y);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Moves the whole tree if the cell is root, otherwise\r\n   * returns the cell to its previous position\r\n   * @param cell - Moved cell.\r\n   * @param xPos - Horizontal position of the cell.\r\n   * @param yPos - Vertical position of the cell.\r\n   */\r\n  moveCell(cell: BstCell, xPos: number, yPos: number): void {\r\n    if (cell.isRoot) {\r\n      this.setPosition(xPos, yPos);\r\n      return;\r\n    }\r\n    else {\r\n      cell.setTarget(cell.graphX, cell.graphY);\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the invalid node from the tree and deletes its children.\r\n   */\r\n  async fix(): Promise<void> {\r\n    const invalidCell = this.data.find((c: BstCell) => !!c && !c.isValid);\r\n\r\n    invalidCell.removeNode();\r\n    const leftChild = this.getLeftChild(invalidCell);\r\n    const rightChild = this.getRightChild(invalidCell);\r\n\r\n    this.deleteCell(leftChild);\r\n    this.deleteCell(rightChild);\r\n\r\n    this.isValid = true;\r\n    invalidCell.isValid = true;\r\n\r\n    this.alignForces();\r\n    return;\r\n  }\r\n}\r\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {LinkedListScene} from './scenes/linked-list-scene';\r\nimport {Prepend} from './scenes/prepend';\r\nimport {Append} from './scenes/append';\r\nimport {Insertion} from './scenes/insertion';\r\nimport {PopFirst} from './scenes/pop-first';\r\nimport {PopLast} from './scenes/pop-last';\r\nimport {Deletion} from './scenes/deletion';\r\n\r\nconst linkedListScenario = new Scenario('Linked list', 'linked-list', 'Prepending, appending, insertion and removing the elements');\r\nlinkedListScenario.cover = 'scenarios/linked-list/cover.png';\r\nlinkedListScenario.scenes = [\r\n  LinkedListScene,\r\n  Prepend,\r\n  Append,\r\n  Insertion,\r\n  PopFirst,\r\n  PopLast,\r\n  Deletion\r\n];\r\n\r\nexport default linkedListScenario;\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport contextMenu, {ContextMenuFn, MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\nimport {BstCellMouse} from './bst-cell-mouse';\r\nimport {Heap} from '../../structures/tree/binary-tree/heap/heap';\r\n\r\nexport class HeapMouse implements MouseHelper<Heap> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  contextMenu(d: Heap, i: number, trees: d3Element[] | ArrayLike<d3Element>): void {\r\n    const menu = [\r\n      {\r\n        title: 'Change name',\r\n        action: async (elm: Heap) => {\r\n          elm.getRoot().setDefaultDescriptor(await this.simulation.prompt('New name'));\r\n        }\r\n      },\r\n      {\r\n        // divider\r\n        divider: true\r\n      },\r\n      {\r\n        title: 'Get minimum',\r\n        disabled: !d.isValid,\r\n        action: async (heap: Heap) => {\r\n          // await heap.findMin();\r\n        }\r\n      },\r\n      {\r\n        title: 'Insert',\r\n        disabled: !d.isValid,\r\n        action: async (heap: Heap) => {\r\n          const newValue = parseFloat(await this.simulation.prompt('Which value to insert'));\r\n          if (isNaN(newValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          const lastCell = heap.getEmptyCell();\r\n          const node = new SimulationNode(newValue, -1, lastCell.x, lastCell.y - 150);\r\n          this.simulation.nodeHandler.add(node);\r\n          await heap.insert(node);\r\n        }\r\n      },\r\n      {\r\n        title: 'Delete',\r\n        disabled: !d.isValid,\r\n        action: async (heap: Heap) => {\r\n          const deleteValue = parseFloat(await this.simulation.prompt('Which value to delete'));\r\n          if (isNaN(deleteValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n\r\n          await heap.delete(deleteValue);\r\n        }\r\n      },\r\n      {\r\n        title: 'Delete min',\r\n        disabled: !d.isValid,\r\n        action: async (heap: Heap) => {\r\n          await heap.deleteMin();\r\n        }\r\n      },\r\n      {\r\n        title: 'Info log',\r\n        action: async (elm: Heap) => {\r\n          console.log(elm);\r\n        }\r\n      }\r\n    ];\r\n\r\n    // if (!d.isValid) {\r\n    //   menu.push(\r\n    //     {\r\n    //       divider: true\r\n    //     },\r\n    //     {\r\n    //       title: 'Fix tree',\r\n    //       action: async (heap: Heap) => {\r\n    //         await heap.fix();\r\n    //       }\r\n    //     }\r\n    //   );\r\n    // }\r\n\r\n    contextMenu(menu)(d, i);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      // .on('mouseover', (d: Heap, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, arrays))\r\n      // .on('mouseout', (d: Heap, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, arrays))\r\n      .on('contextmenu', ((d: Heap, i: number, trees: d3Element[] | ArrayLike<d3Element>) => this.contextMenu(d, i, trees)));\r\n    return element;\r\n  }\r\n}\r\n","import {SimulationArray} from './simulation-array';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {ArrayCell} from './array-cell';\r\n\r\nexport class SimulationStack extends SimulationArray {\r\n\r\n  top: ArrayCell | null;\r\n\r\n  constructor(id: number, x: number, y: number, descriptor?: string) {\r\n    super(id, x, y, descriptor);\r\n  }\r\n\r\n  async push(node: SimulationNode, animate = true): Promise<void> {\r\n    if (this.capacity === this.size) {\r\n      throw new Error('Stack overflow');\r\n    }\r\n\r\n    await this.insertAt(node, this.size, animate);\r\n    await this.setTop(animate);\r\n  }\r\n\r\n  async pop(animate = true): Promise<void> {\r\n    if (this.size === 0) {\r\n      throw new Error('No elements in the stack');\r\n    }\r\n\r\n    await this.deleteAt(this.size - 1);\r\n    await this.setTop(animate);\r\n  }\r\n\r\n  async setTop(animate = true): Promise<void> {\r\n    if (!!this.top) {\r\n      this.top.resetColor();\r\n    }\r\n    if (this.size - 1 < 0) {\r\n      return;\r\n    }\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    this.top = this.data[this.size - 1];\r\n    this.top.highlight('#fdd828');\r\n  }\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class SortedSearch implements Scene {\r\n  id = 1;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  arrSize = -1;\r\n  movedElements = '';\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    nodes.sort((a, b) => a.value > b.value ? 1 : a.value === b.value ? 0 : -1);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    if (!this.array || !this.array.data[6].node) {\r\n      this.arrElement = -1;\r\n    } else {\r\n      this.arrElement = this.array.data[6].node.value;\r\n    }\r\n    this.array.sorted = true;\r\n\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.binarySearch(this.arrElement);\r\n  }\r\n\r\n\r\n  content(): string {\r\n\r\n    return `\r\n  <h1 class=\"scene-title\">Binary search</h1>\r\n  <p>\r\n    Notice an array on the right-hand-side. It has ${this.arrSize} sorted elements,\r\n    going from the lowest to the highest value.\r\n  </p>\r\n  <p>\r\n    What do you think would be the best method to find a node with value ${this.arrElement}?\r\n  </p>\r\n  <p>\r\n    Is there any advantage that sorted arrays have over unsorted ones?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    This is called binary search. Binary Search is a searching algorithm for finding an element's position in a sorted array.\r\n  </p>\r\n  <p>\r\n    Knowing where the middle of the array is, we are checking from that element.\r\n    If our desired element happens to be lower than the middle element, we know that we only\r\n    have to check the left portion of the array.\r\n  </p>\r\n  <p>\r\n    Binary search begins by comparing an element in the middle of the array with the target value.\r\n    If the target value matches the element, its position in the array is returned.\r\n    If the target value is less than the element, the search continues in the lower half of the array.\r\n    If the target value is greater than the element, the search continues in the upper half of the array.\r\n    By doing this, the algorithm eliminates the half in which the target value cannot lie in each iteration.\r\n  </p>\r\n  <small>\r\n    Remember: Binary search can be implemented only on a sorted list of items.\r\n    If the elements are not sorted already, we need to sort them first.\r\n  </small>\r\n`;\r\n  }\r\n}\r\n","import {Sort} from './sort';\r\nimport {SimulationArray} from './simulation-array';\r\n\r\nexport class SelectionSort implements Sort {\r\n  async sort(arr: SimulationArray): Promise<void> {\r\n\r\n\r\n    for (let i = 0; i < arr.size; ++i) {\r\n      let minIndex = i;\r\n      arr.data[minIndex].highlight('#08ff00');\r\n      await new Promise(r => setTimeout(r, 600));\r\n\r\n      for (let j = i + 1; j < arr.size; ++j) {\r\n        arr.data[j].highlight('#fdd828');\r\n        await new Promise(r => setTimeout(r, 600));\r\n        arr.data[j].resetColor();\r\n        if (arr.data[j].node.value < arr.data[minIndex].node.value) {\r\n          arr.data[minIndex].resetColor();\r\n          minIndex = j;\r\n          arr.data[minIndex].highlight('#08ff00');\r\n          await new Promise(r => setTimeout(r, 600));\r\n        }\r\n      }\r\n\r\n      arr.data[minIndex].resetColor();\r\n      if (i !== minIndex) {\r\n        await arr.swapNodes(arr.data[i], arr.data[minIndex]);\r\n      }\r\n\r\n      arr.data[i].highlight('#98dc73');\r\n    }\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class UnsuccessfulSearch implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.arrElement = 23.11;\r\n\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.linearSearch(this.arrElement);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linear search - unsuccessful</h1>\r\n  <p>\r\n    Notice an array on the right-hand-side. It has ${this.arrSize}\r\n    elements in an arbitrary order.\r\n  </p>\r\n  <p>\r\n    What is, in your opinion, the best way to deterine that ${this.arrElement} is not present in the array?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    As you see, the algorithm had to check every single element of the array, from\r\n    [0] all the way up to [${this.array.size - 1}], and only after finding out that\r\n    none of them was equal to ${this.arrElement}, could it be sure that ${this.arrElement}\r\n    was not in the array.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {SimulationNodeDatum} from 'd3-force';\nimport {defaultRadius} from '../../consts';\nimport {Selection} from 'd3-selection';\nimport {ArrayCell} from '../structures/array/array-cell';\nimport * as d3 from 'd3';\nimport {BstCell} from '../structures/tree/bst-cell';\nimport {Drawable} from '../drawable';\n\nexport class SimulationNode implements SimulationNodeDatum, Drawable {\n\n  radius = 40;\n  isValueVisible = true;\n  isInteractable = true;\n  drawArrow = false;\n  highlighted = false;\n  nodeOrder = 1;\n\n  noCollision = false;\n  pointerEvents = true;\n\n  lockedPlaceholder?: BstCell;\n  hoveringPlaceholder?: BstCell;\n  // parent?: SimulationNode;\n  children?: SimulationNode[];\n  isPlaceholder = false;\n\n  lockedGrid?: ArrayCell;\n  hoveringGrid?: ArrayCell;\n\n  dragStartX?: number;\n  dragStartY?: number;\n  onClick?: (nodeInfo: SimulationNode) => void;\n\n  id: number | undefined;\n  fx: number | null | undefined;\n  fy: number | null | undefined;\n  vx: number | undefined;\n  vy: number | undefined;\n  x: number | undefined;\n  y: number | undefined;\n  cx: number | undefined;\n  cy: number | undefined;\n  value: number;\n\n  constructor(value: number, id: number, x: number, y: number) {\n    this.value = value;\n    this.id = id;\n    this.cx = x;\n    this.cy = y;\n    this.x = x;\n    this.y = y;\n  }\n\n  setTarget(x: number, y: number): void {\n    this.cx = x;\n    this.cy = y;\n  }\n\n  move(x: number, y: number): void {\n    if (!this.noCollision) {\n      this.cx = x;\n      this.cy = y;\n    } else {\n      this.x = x;\n      this.y = y;\n    }\n  }\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class Insertion implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toAdd = 2.31;\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(8);\r\n\r\n    simulation.nodeHandler.add(nodes);\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.toAdd, -1, this.bst.x, this.bst.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.bst.insert(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion</h1>\r\n  <p>\r\n    Inserting a value in the correct position is similar to searching\r\n    because we try to maintain the rule that a node's left subtree is lower\r\n    than the node and the right subtree is higher than the node.\r\n  </p>\r\n  <p>\r\n    Using that rule, after reaching a leaf, we place our new node on that position.\r\n  </p>\r\n  <p>\r\n    So, let's add ${this.toAdd} to the tree.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    A node with value ${this.toAdd} was successfully placed on a leaf's position, and\r\n    all the properties of the binary search tree still apply.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport heapScenario from '../heap-scenario';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\n\r\nexport class TreeScene implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    const heap = simulation.objectFactory.create('heap', 0, 0) as Heap;\r\n    simulation.heapHandler.add(heap);\r\n\r\n    for (const node of nodes) {\r\n      await heap.insert(node, false);\r\n    }\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Tree - Binary tree</h1>\r\n  <p>\r\n    A <em>tree</em> is a data structure consisting of nodes which are placed in a\r\n    hierarchical order.\r\n  </p>\r\n  <p>\r\n    In general, each node individually has a parent node and an arbitrary number of children nodes.\r\n    That means that every single node of a tree contains its own set of children nodes. Finding a\r\n    parent of some <b>target</b> node in the tree is only a matter of knowing which node contains\r\n    <b>target</b> node as an element in its children set.\r\n  </p>\r\n  <p>\r\n    The first node of a tree, the topmost one which doesn't have any parents is called the\r\n    <em>root</em> node.\r\n  </p>\r\n  <p>\r\n    Nodes which do not have any children are called <em>leaf</em> nodes, and they are\r\n    last nodes of every branch in a tree.\r\n  </p>\r\n  <p>\r\n    Looking at a particular <b>target</b> node in a tree and all of its descendants, that portion can\r\n    be considered as a <em>subtree</em>.\r\n  </p>\r\n  <p>\r\n    <em>Height</em> of a <b>target</b> node is the longest distance to a leaf in its subtree. That is, the highest number of nodes\r\n    which have to be passed on a path from the <b>target</b> node to any leaf which is a descendant of that <b>target</b> node.\r\n  </p>\r\n  <p>\r\n    Type of a tree covered here is called a <em>binary tree</em>. It's a tree where each node has two children nodes\r\n    at most\r\n  </p>\r\n\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {SimulationQueue} from '../../structures/array/simulation-queue';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {MenuItem} from 'd3-context-menu';\r\nimport {SimulationStack} from '../../structures/array/simulation-stack';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {InsertionSort} from '../../structures/array/insertion-sort';\r\nimport {SelectionSort} from '../../structures/array/selection-sort';\r\nimport {BubbleSort} from '../../structures/array/bubble-sort';\r\nimport {MergeSort} from '../../structures/array/merge-sort';\r\nimport {QuickSort} from '../../structures/array/quick-sort';\r\n\r\nexport const arrayMenu = (simulation: Simulation): MenuItem[] => [\r\n  {\r\n    title: 'Set size',\r\n    action: async (elm: SimulationArray) => {\r\n      const newValue = await simulation.prompt('New size');\r\n\r\n      let parsed = parseFloat(newValue);\r\n\r\n      if (isNaN(parsed)) {\r\n        parsed = 10;\r\n      }\r\n      elm.setCapacity(parsed);\r\n    }\r\n  },\r\n  {\r\n    title: 'Change name',\r\n    action: async (elm: SimulationArray) => {\r\n      elm.descriptor = await simulation.prompt('New name');\r\n    }\r\n  },\r\n  {\r\n    // divider\r\n    divider: true\r\n  },\r\n  {\r\n    title: 'Find',\r\n    action: async (arr: SimulationArray) => {\r\n      const newValue = await simulation.prompt('Which value to find');\r\n\r\n      const parsed = parseFloat(newValue);\r\n\r\n      if (isNaN(parsed)) {\r\n        alert('Value invalid');\r\n        return;\r\n      }\r\n      await arr.linearSearch(parsed);\r\n    }\r\n  },\r\n  {\r\n    title: 'Insert',\r\n    action: async (arr: SimulationArray) => {\r\n      const newValue = parseFloat(await simulation.prompt('Which value to insert'));\r\n      const index = parseFloat(await simulation.prompt('Dje bate?'));\r\n      if (isNaN(newValue) || isNaN(index)) {\r\n        alert('Value invalid');\r\n        return;\r\n      }\r\n      const node = new SimulationNode(newValue, -1, arr.x, arr.y - 200);\r\n      simulation.nodeHandler.add(node);\r\n      await arr.insertAt(node, index);\r\n    }\r\n  },\r\n  {\r\n    title: 'Delete',\r\n    action: async (arr: SimulationArray) => {\r\n      const index = parseFloat(await simulation.prompt('Which index would you like to remove?'));\r\n      if (isNaN(index)) {\r\n        alert('Value invalid');\r\n        return;\r\n      }\r\n      await arr.deleteAt(index);\r\n    }\r\n  },\r\n  {\r\n    divider: true\r\n  },\r\n  {\r\n    title: 'Sort',\r\n    children: [\r\n      {\r\n        title: 'Insertion',\r\n        action: async (arr: SimulationArray) => {\r\n          arr.sorting = new InsertionSort();\r\n          await arr.sort();\r\n        }\r\n      },\r\n      {\r\n        title: 'Selection',\r\n        action: async (arr: SimulationArray) => {\r\n          arr.sorting = new SelectionSort();\r\n          await arr.sort();\r\n        }\r\n      },\r\n      {\r\n        title: 'Bubble',\r\n        action: async (arr: SimulationArray) => {\r\n          arr.sorting = new BubbleSort();\r\n          await arr.sort();\r\n        }\r\n      },\r\n      {\r\n        title: 'Merge',\r\n        action: async (arr: SimulationArray) => {\r\n          arr.sorting = new MergeSort();\r\n          await arr.sort();\r\n        }\r\n      },\r\n      {\r\n        title: 'Quick',\r\n        action: async (arr: SimulationArray) => {\r\n          arr.sorting = new QuickSort();\r\n          await arr.sort();\r\n        }\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import {Sort} from './sort';\r\nimport {SimulationArray} from './simulation-array';\r\n\r\nexport class InsertionSort implements Sort {\r\n  async sort(arr: SimulationArray): Promise<void> {\r\n    arr.data[0].highlight('#98dc73');\r\n\r\n    for (let i = 1; i < arr.size; ++i) {\r\n      const node = arr.data[i].removeNode();\r\n      node.setTarget(arr.data[i].absoluteX, arr.data[i].absoluteY - 150);\r\n\r\n      await new Promise(r => setTimeout(r, 1200));\r\n\r\n      let j = i - 1;\r\n      while (j >= 0) {\r\n        arr.data[j].highlight('#fdd828');\r\n        await new Promise(r => setTimeout(r, 1200));\r\n        node.setTarget(arr.data[j].absoluteX, arr.data[j].absoluteY - 150);\r\n        arr.data[j].highlight('#98dc73');\r\n        if (node.value >= arr.data[j].node.value) {\r\n          break;\r\n        }\r\n        await arr.moveNode(arr.data[j], arr.data[j + 1]);\r\n        --j;\r\n      }\r\n      node.setTarget(arr.data[j + 1].absoluteX, arr.data[j + 1].absoluteY);\r\n      await new Promise(r => setTimeout(r, 1200));\r\n      arr.data[j + 1].addNode(node);\r\n      arr.data[i].highlight('#98dc73');\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\nimport { PrimeNGConfig } from 'primeng/api';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Alharismi';\n\n  constructor(private primeNgConfig: PrimeNGConfig) {\n  }\n\n  ngOnInit(): void {\n    this.primeNgConfig.ripple = true;\n  }\n\n}\n","<div>\n  <p-toast [baseZIndex]=\"10000\"></p-toast>\n  <router-outlet></router-outlet>\n</div>\n","import {SimulationQueue} from '../../structures/array/simulation-queue';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {MenuItem} from 'd3-context-menu';\r\nimport {SimulationStack} from '../../structures/array/simulation-stack';\r\n\r\nexport const stackMenu = (simulation: Simulation): MenuItem[] => [\r\n\r\n  {\r\n    title: 'Change name',\r\n    action: async (elm: SimulationStack) => {\r\n      elm.descriptor = await simulation.prompt('New name');\r\n    }\r\n  },\r\n  {\r\n    // divider\r\n    divider: true\r\n  },\r\n  {\r\n    title: 'Push',\r\n    action: async (stack: SimulationStack) => {\r\n      const newValue = parseFloat(await simulation.prompt('Which value to insert'));\r\n      if (isNaN(newValue)) {\r\n        alert('Value invalid');\r\n        return;\r\n      }\r\n      const node = new SimulationNode(newValue, -1, stack.x, stack.y - 200);\r\n      simulation.nodeHandler.add(node);\r\n      await stack.push(node);\r\n    }\r\n  },\r\n  {\r\n    title: 'Pop',\r\n    action: async (stack: SimulationStack) => {\r\n\r\n      await stack.pop();\r\n    }\r\n  }\r\n];\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class Prepend implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  newElement = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.newElement, -1, this.list.x, this.list.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n\r\n    await this.list.prepend(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - prepend</h1>\r\n  <p>\r\n    One main advantage of linked lists over arrays is that it is possible to add an\r\n    element to the beginning of a list without moving any other node.\r\n  </p>\r\n  <p>\r\n    Since nodes might be scattered everywhere in the memory, a new node is added and:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      <em>Head</em> now references the new node;\r\n    </li>\r\n    <li>\r\n      The new node references previous first node.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    Now, let's add ${this.newElement} to the beginning of the linked list.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.newElement} is now added to the linked list, it is referenced by <em>head</em> and it\r\n    references the same node <em>head</em> was referencing prior to this insertion.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class InsertionFirstCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toAdd = 2.31;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [20, 10, 30]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = simulation.objectFactory.create('node', this.bst.x, this.bst.y - 200, this.toAdd) as SimulationNode;\r\n    simulation.nodeHandler.add(node);\r\n    await this.bst.insert(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion - first case</h1>\r\n  <p>\r\n    Since Red-black tree is a type of Binary search tree, insertion is quite similar.\r\n  </p>\r\n  <p>\r\n    Essential difference lies in operations after the actual insertion. At that point,\r\n    the tree might become unbalanced, i.e. some of the previously mentioned properties of a\r\n    red-black tree might become compromised.\r\n  </p>\r\n  <p>\r\n    Firstly, the newly inserted node is colored red, and properties of the tree are checked afterwards.\r\n    If the parent of our newly inserted node is black, then we don't need to restructure the tree.\r\n    However, if its parent is colored red, then there are three cases we need to check for.\r\n  </p>\r\n  <p>\r\n    The first case occurs if new node's uncle (parent's sibling) is <span style=\"color: #bb4848;\">red</span>.\r\n    Then, both of those nodes should be colored in black and their parent (new node's grandparent) should be\r\n    colored red.\r\n  </p>\r\n  <p>\r\n    This recoloring procedure then propagates up the tree to our new node's grandparent, where everything is checked\r\n    for again.\r\n  </p>\r\n  <small>If our new node's grandparent was root, then we will recolor it back to black no matter what.</small>\r\n  <p>\r\n    Let's now see this case on the tree on the right-hand side by inserting ${this.toAdd}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing recoloring.\r\n  </p>\r\n  <small>Since our new node's grandparent was root, it was recolored to black.</small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {SimulationArray} from './simulation-array';\r\nimport {ArrayCell} from './array-cell';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\n\r\nexport class SimulationQueue extends SimulationArray {\r\n  left: ArrayCell | undefined;\r\n  right: ArrayCell | undefined;\r\n\r\n  async enqueue(node: SimulationNode, animate = true): Promise<void> {\r\n    if (this.capacity === this.size) {\r\n      throw new Error('Queue is full');\r\n    }\r\n    let insertPosition: number;\r\n    if (this.right) {\r\n      insertPosition = (this.right.id + 1) % this.capacity;\r\n    } else {\r\n      insertPosition = 0;\r\n    }\r\n\r\n    await this.insertAt(node, insertPosition, animate);\r\n    await this.setRight(insertPosition, animate);\r\n    if (!this.left) {\r\n      await this.setLeft(insertPosition, animate);\r\n    }\r\n  }\r\n\r\n  async setRight(position: number, animate = true): Promise<void> {\r\n    if (!!this.right && this.right !== this.left) {\r\n      this.right.resetColor();\r\n    } else if (!!this.right) {\r\n      this.right.highlight('#a0ff6f');\r\n    }\r\n    if (this.size - 1 < 0) {\r\n      return;\r\n    }\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    this.right = this.data[position];\r\n    this.right.highlight('#ff9494');\r\n  }\r\n\r\n  async dequeue(animate = true): Promise<void> {\r\n    if (this.size === 0) {\r\n      throw new Error('Queue is empty');\r\n    }\r\n\r\n    const node = this.left.removeNode();\r\n    --this.size;\r\n    node.setTarget(this.x, this.y - 200);\r\n    const newPosition = (this.left.id + 1) % this.capacity;\r\n\r\n    await this.setLeft(newPosition, animate);\r\n  }\r\n\r\n  async setLeft(position: number, animate = true): Promise<void> {\r\n    if (!!this.left) {\r\n      this.left.resetColor();\r\n    }\r\n    if (this.size - 1 < 0) {\r\n      return;\r\n    }\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    this.left = this.data[position];\r\n    this.left.highlight('#a0ff6f');\r\n  }\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class RedBlack implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  rootValue = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    const bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(bst);\r\n\r\n    for (const node of nodes) {\r\n      await bst.insert(node, false);\r\n    }\r\n\r\n    this.rootValue = bst.getRoot().node.value;\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Red-black tree</h1>\r\n  <p>\r\n    In the previous section, there was one disadvantageous property of a Binary search tree. That is,\r\n    if nodes were added in a specific order, tree might become unbalanced and many of its nodes\r\n    would lean to one side, thus reducing effectiveness of the tree and making it perform more\r\n    like a linked list.\r\n  </p>\r\n  <p>\r\n    Therefore, Red-black trees are implemented in order to eliminate that imbalance which is present in\r\n    an ordinary Binary search tree. After every insertion or deletion, some form of rebalancing is performed\r\n    in order to make tree more effective.\r\n  </p>\r\n  <p>\r\n    Red-black trees have all the properties an ordinary binary search trees have, and additionaly:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      The <span style=\"color: #868686;\">root</span> is black;\r\n    </li>\r\n    <li>\r\n      All children of a <span style=\"color: #bb4848;\">red node</span> are <span style=\"color: #868686;\">black</span>;\r\n    </li>\r\n    <li>\r\n      For each node, any simple path from this node to any of its descendant leaf has the same number of black nodes;\r\n    </li>\r\n    <li>\r\n        All leaves are <span style=\"color: #868686;\">black</span>.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    As searching works the same as in an ordinary binary search tree, only insertion and deletion will be presented.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport heapScenario from '../heap-scenario';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\n\r\nexport class FindMin implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  heap: Heap;\r\n  minValue = -1;\r\n  newRootValue = -1;\r\n  newProperRootValue = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.heap = simulation.objectFactory.create('heap', 0, 0) as Heap;\r\n    simulation.heapHandler.add(this.heap);\r\n\r\n    for (const node of nodes) {\r\n      await this.heap.insert(node, false);\r\n    }\r\n    this.minValue = this.heap.getRoot().node.value;\r\n    this.newRootValue = this.heap._data[this.heap.size - 2].node.value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.heap.deleteNodeFromCell(this.heap.getRoot());\r\n    this.newProperRootValue = this.heap.getRoot().node.value;\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Extract minimum</h1>\r\n  <p>\r\n    As the tree on the right-hand side is a min-heap, a node with the minimum value can\r\n    be found in the heap's root.\r\n  </p>\r\n  <p>\r\n    Extraction isn't that complicated:\r\n  </p>\r\n  <ol>\r\n    <li>\r\n      Swap the root node with the last leaf, which contains value ${this.newRootValue};\r\n    </li>\r\n    <li>\r\n      Extract value from the last leaf, which is now minimum ${this.minValue};\r\n    </li>\r\n    <li>\r\n      Propagate new root value down the heap, in order to restore heap order.\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    Press play to see how that works in practice!\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Order of the heap is successfully restored and ${this.newRootValue} was\r\n    propagated down the tree, so ${this.newProperRootValue} became the new root value by\r\n    swapping nodes all the way down the heap.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {SimulationNode} from '../../../../basics/simulation-node';\nimport {BstCell} from '../../bst-cell';\nimport {BinarySearchTree} from '../binary-search-tree/binary-search-tree';\nimport {BstCellDrag} from '../../../../helpers/drag/bst-cell-drag';\nimport {SimulationLink} from '../../../../basics/simulation-link';\nimport {root} from 'rxjs/internal-compatibility';\nimport {BstCellDrawing} from '../../../../helpers/drawing/bst-cell-drawing';\n\nenum Color {\n  RED = '#FF5A5A94',\n  BLACK = '#636363FF'\n}\n\nexport class RedBlackTree extends BinarySearchTree {\n\n  colors: { [cellId: number]: Color; } = {};\n\n  constructor(id: number, x: number, y: number) {\n    super(id, x, y);\n  }\n\n  addCell(cell: BstCell, parent: BstCell | null, left = true): void {\n    super.addCell(cell, parent, left);\n    cell.descriptorColor = '#d2cdc8';\n    this.setColor(cell, Color.BLACK);\n  }\n\n  async add(d: SimulationNode, bstCell: BstCell, animate = true): Promise<void> {\n    await super.add(d, bstCell);\n    if (this.isValid) {\n      this.setColor(bstCell, Color.RED);\n      await this.insertionCheckBalance(bstCell, animate);\n    }\n  }\n\n  async delete(value: number, animate = true): Promise<[SimulationNode, BstCell | null, BstCell]> {\n    const [node, affectedCell, deletedCell] = await super.delete(value, animate);\n\n    await this.deletionCheckBalance(affectedCell, deletedCell, animate);\n    return [node, affectedCell, deletedCell];\n  }\n\n\n  /**\n   * Used to check balance of the tree after insertion.\n   * Checks the colors of the starting cell and its ancestors if necessary, thus checking if all the nodes are balanced.\n   * If an unbalanced node shows up, performs operations of balancing.\n   * @param cell - The starting cell.\n   * @private\n   */\n  private async insertionCheckBalance(cell: BstCell, animate = true): Promise<void> {\n    let [parent, childIndex] = this.getParent(cell);\n    while (this.getColor(parent) === Color.RED) {\n      let [grandParent, parentIndex] = this.getParent(parent);\n      if (cell.isRoot) {\n        break;\n      }\n      if (parentIndex === 0) { // if parent is the left child\n        const uncle = this.getRightChild(grandParent);\n        if (this.getColor(uncle) === Color.RED) {\n          // uncle is red\n          this.setColor(parent, Color.BLACK);\n          this.setColor(uncle, Color.BLACK);\n          this.setColor(grandParent, Color.RED);\n          cell = grandParent;\n          [parent, childIndex] = this.getParent(cell);\n        } else {\n          // uncle is black\n          if (childIndex === 1) {\n            // currentCell is the right child\n            cell = parent;\n            [parent, childIndex] = [grandParent, parentIndex];\n            [grandParent, parentIndex] = this.getParent(parent);\n            await this.leftRotation(cell, animate);\n            [parent, childIndex] = this.getParent(cell);\n            [grandParent, parentIndex] = this.getParent(parent);\n          }\n          this.setColor(parent, Color.BLACK);\n          this.setColor(grandParent, Color.RED);\n          await this.rightRotation(grandParent, animate);\n          [parent, childIndex] = this.getParent(cell);\n          [grandParent, parentIndex] = this.getParent(parent);\n        }\n      } else { // if the parent is the right child\n        const uncle = this.getLeftChild(grandParent);\n        if (this.getColor(uncle) === Color.RED) {\n          // uncle is red\n          this.setColor(parent, Color.BLACK);\n          this.setColor(uncle, Color.BLACK);\n          this.setColor(grandParent, Color.RED);\n          cell = grandParent;\n          [parent, childIndex] = this.getParent(cell);\n        } else {\n          // uncle is black\n          if (childIndex === 0) {\n            // currentCell is the left child\n            cell = parent;\n            [parent, childIndex] = [grandParent, parentIndex];\n            [grandParent, parentIndex] = this.getParent(parent);\n            await this.rightRotation(cell, animate);\n            [parent, childIndex] = this.getParent(cell);\n            [grandParent, parentIndex] = this.getParent(parent);\n          }\n          [parent, childIndex] = this.getParent(cell);\n          [grandParent, parentIndex] = this.getParent(parent);\n          this.setColor(parent, Color.BLACK);\n          this.setColor(grandParent, Color.RED);\n          await this.leftRotation(grandParent, animate);\n          [parent, childIndex] = this.getParent(cell);\n          [grandParent, parentIndex] = this.getParent(parent);\n        }\n      }\n    }\n    const treeRoot = this.getRoot();\n    this.setColor(treeRoot, Color.BLACK);\n  }\n\n  /**\n   * Used to check balance of the tree after deletion.\n   */\n  async deletionCheckBalance(affectedCell: BstCell, deletedCell: BstCell, animate = true): Promise<void> {\n    let [parent, childIndex] = this.getParent(affectedCell);\n    let cell = deletedCell;\n    while (!cell.isRoot && this.getColor(cell) === Color.BLACK) {\n      if (childIndex === 0) {\n        // if currentCell is a left node to its parent\n        let sibling = this.getRightChild(parent);\n        let siblingsColor = this.getColor(sibling);\n        if (siblingsColor && siblingsColor === Color.RED) {\n          this.setColor(sibling, Color.BLACK);\n          this.setColor(parent, Color.RED);\n          await this.leftRotation(parent, animate);\n          sibling = this.getRightChild(parent);\n          siblingsColor = this.getColor(sibling);\n        }\n        let leftNephew = this.getLeftChild(sibling);\n        let rightNephew = this.getRightChild(sibling);\n        let leftNephewColor = this.getColor(leftNephew);\n        let rightNephewColor = this.getColor(rightNephew);\n        if (leftNephewColor && leftNephewColor === Color.BLACK\n          && rightNephewColor && rightNephewColor === Color.BLACK) {\n          this.setColor(sibling, Color.RED);\n          cell = parent;\n          [parent, childIndex] = this.getParent(cell);\n          sibling = this.getRightChild(parent);\n          siblingsColor = this.getColor(sibling);\n          leftNephew = this.getLeftChild(sibling);\n          rightNephew = this.getRightChild(sibling);\n          leftNephewColor = this.getColor(leftNephew);\n          rightNephewColor = this.getColor(rightNephew);\n        } else {\n          if (rightNephewColor === Color.BLACK) {\n            this.setColor(leftNephew, Color.BLACK);\n            this.setColor(sibling, Color.RED);\n            await this.rightRotation(sibling, animate);\n            [parent, childIndex] = this.getParent(cell);\n            sibling = this.getRightChild(parent);\n            siblingsColor = this.getColor(sibling);\n            rightNephew = this.getRightChild(sibling);\n          }\n          const parentColor = this.getColor(parent);\n          this.setColor(sibling, parentColor);\n          this.setColor(parent, Color.BLACK);\n          this.setColor(rightNephew, Color.BLACK);\n          await this.leftRotation(parent, animate);\n          cell = this.getRoot();\n        }\n      } else {\n        // if currentCell is a right node to its parent\n        let sibling = this.getLeftChild(parent);\n        let siblingsColor = this.getColor(sibling);\n        if (siblingsColor && siblingsColor === Color.RED) {\n          this.setColor(sibling, Color.BLACK);\n          this.setColor(parent, Color.RED);\n          await this.rightRotation(parent, animate);\n          sibling = this.getLeftChild(parent);\n          siblingsColor = this.getColor(sibling);\n        }\n        let rightNephew = this.getRightChild(sibling);\n        let leftNephew = this.getLeftChild(sibling);\n        let rightNephewColor = this.getColor(rightNephew);\n        let leftNephewColor = this.getColor(leftNephew);\n        if (rightNephewColor && rightNephewColor === Color.BLACK\n          && leftNephewColor && leftNephewColor === Color.BLACK) {\n          this.setColor(sibling, Color.RED);\n          cell = parent;\n          [parent, childIndex] = this.getParent(cell);\n          sibling = this.getLeftChild(parent);\n          siblingsColor = this.getColor(sibling);\n          rightNephew = this.getRightChild(sibling);\n          leftNephew = this.getLeftChild(sibling);\n          rightNephewColor = this.getColor(rightNephew);\n          leftNephewColor = this.getColor(leftNephew);\n        } else {\n          if (leftNephewColor === Color.BLACK) {\n            this.setColor(rightNephew, Color.BLACK);\n            this.setColor(sibling, Color.RED);\n            await this.leftRotation(sibling, animate);\n            sibling = this.getLeftChild(parent);\n            siblingsColor = this.getColor(sibling);\n            leftNephew = this.getLeftChild(sibling);\n          }\n          const parentColor = this.getColor(parent);\n          this.setColor(sibling, parentColor);\n          this.setColor(parent, Color.BLACK);\n          this.setColor(leftNephew, Color.BLACK);\n          await this.rightRotation(parent, animate);\n          cell = this.getRoot();\n        }\n      }\n    }\n    this.setColor(cell, Color.BLACK);\n  }\n\n  private async leftRotation(rotationRoot: BstCell, animate = true): Promise<void> {\n    const newRoot = this.getRightChild(rotationRoot);\n    const t = this.getLeftChild(newRoot);\n    // Perform rotation\n\n    this.linkHelper.removeLink(newRoot, t);\n    this.setRightChild(rotationRoot, t);\n    this.linkHelper.addLink(rotationRoot, t);\n\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    const [rootParent, childIndex] = this.getParent(rotationRoot);\n    this.detachParent(rotationRoot);\n    this.linkHelper.removeLink(rootParent, rotationRoot);\n    if (!rootParent) {\n      newRoot.isRoot = true;\n      newRoot.setDefaultDescriptor(rotationRoot.defaultDescriptor);\n      rotationRoot.setDefaultDescriptor(undefined);\n      rotationRoot.isRoot = false;\n    }\n    if (childIndex === 0) {\n      this.setLeftChild(rootParent, newRoot);\n    } else {\n      this.setRightChild(rootParent, newRoot);\n    }\n    if (!!rootParent) {\n      this.linkHelper.addLink(rootParent, newRoot);\n    }\n    // this.alignForces();\n    // if (animate) {\n    //   await new Promise(r => setTimeout(r, 600));\n    // }\n    this.linkHelper.removeLink(rotationRoot, newRoot);\n    this.setLeftChild(newRoot, rotationRoot);\n    this.linkHelper.addLink(newRoot, rotationRoot);\n\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n  }\n\n  private async rightRotation(rotationRoot: BstCell, animate = true): Promise<void> {\n    const newRoot = this.getLeftChild(rotationRoot);\n    const t = this.getRightChild(newRoot);\n    // Perform rotation\n\n    this.linkHelper.removeLink(newRoot, t);\n    this.setLeftChild(rotationRoot, t);\n    this.linkHelper.addLink(rotationRoot, t);\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    const [rootParent, childIndex] = this.getParent(rotationRoot);\n    this.detachParent(rotationRoot);\n    this.linkHelper.removeLink(rootParent, rotationRoot);\n    if (!rootParent) {\n      newRoot.isRoot = true;\n      newRoot.setDefaultDescriptor(rotationRoot.defaultDescriptor);\n      rotationRoot.setDefaultDescriptor(undefined);\n      rotationRoot.isRoot = false;\n    }\n    if (childIndex === 0) {\n      this.setLeftChild(rootParent, newRoot);\n    } else {\n      this.setRightChild(rootParent, newRoot);\n    }\n    if (!!rootParent) {\n      this.linkHelper.addLink(rootParent, newRoot);\n    }\n    this.linkHelper.removeLink(rotationRoot, newRoot);\n    this.setRightChild(newRoot, rotationRoot);\n    this.linkHelper.addLink(newRoot, rotationRoot);\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n  }\n\n  getColor(cell: BstCell): Color | undefined {\n    if (!cell) {\n      return undefined;\n    }\n    if (!this.colors[cell.id]) {\n      return Color.BLACK;\n    }\n    return this.colors[cell.id];\n  }\n\n  setColor(cell: BstCell, color: Color): void {\n    if (!cell) {\n      return;\n    }\n    this.colors[cell.id] = color;\n    cell.setDefaultColor(color);\n  }\n\n  deleteCell(cell: BstCell): void {\n    super.deleteCell(cell);\n    this.setColor(cell, Color.BLACK);\n  }\n}\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class PopLast implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  toPop = -1;\r\n  newLast = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n\r\n    this.toPop = nodes[nodes.length - 1].value;\r\n    this.newLast = nodes[nodes.length - 2].value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.list.popLast();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - pop the last node</h1>\r\n  <p>\r\n    In order to remove the element which is placed at the end of a linked list,\r\n    the process is quite complicated.\r\n  </p>\r\n  <p>\r\n    Since it is impossible to directly get the predecessor of ${this.toPop},\r\n    the entire linked list has to be traversed in order to find a node which\r\n    references ${this.toPop}. That node is its predecessor\r\n  </p>\r\n  <p>\r\n    The steps required in order to delete an element from the end of the linked list are:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      Get the node referenced by <em>tail</em>, which is ${this.toPop};\r\n    </li>\r\n    <li>\r\n      Iterate and find its predecessor, that is ${this.newLast};\r\n    </li>\r\n    <li>\r\n      Delete predecessor's reference and set <em>tail</em> to reference predecessor.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    Press play in order to see how all of that works in practice.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.toPop} is now popped from the linked list and node with value\r\n    ${this.newLast} is referenced by <em>tail</em>, but it doesn't reference any node at all.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\n\r\nexport class Queue implements Scene {\r\n  id = 3;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  setup(simulation: Simulation): void {\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Queue</h1>\r\n  <p>\r\n    Let's talk about <b>queues</b>.\r\n  </p>\r\n  <p>\r\n    A queue is a data structure that follows the principle of First-In-First-Out (FIFO).\r\n    This means the first element inserted inside the queue is removed first.\r\n  </p>\r\n  <p>\r\n    A queue can be imagined as a train going through a tunnel. The first car that\r\n    entered the tunnel is going to be the first one to exit it.\r\n  </p>\r\n  <p>\r\n    In order to see a train car from the middle of the train exit the tunnel, it is necessary\r\n    to observe all the cars that entered the tunnel prior to the target car.\r\n  </p>\r\n  <p>\r\n    In this section, we'll see how queues can be implemented using arrays.\r\n  </p>\r\n  <p>\r\n    Let's get started :)\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport {MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\nimport {ColorProvider} from '../../providers/color-provider';\r\n\r\nexport class BstCellMouse implements MouseHelper<BstCell> {\r\n\r\n  colorProvider: ColorProvider;\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation,\r\n              colorProvider: ColorProvider) {\r\n    this.simulation = simulation;\r\n    this.colorProvider = colorProvider;\r\n  }\r\n\r\n  mouseOver(d: BstCell, i: number, nodes: d3Element[] | ArrayLike<d3Element>): void {\r\n    d.isMouseOver = true;\r\n\r\n    const draggedNode = this.simulation.loop.draggedNode;\r\n    const innerNode = d.node;\r\n    const treeValid = d.graph.isValid;\r\n\r\n    let color: string;\r\n\r\n    if (!treeValid) {\r\n      color = '#8d1a1a';\r\n    } else if (!!innerNode) {\r\n      color = this.colorProvider.getNodeColor(innerNode);\r\n    } else if (!!draggedNode) {\r\n      color = this.colorProvider.getNodeColor(draggedNode);\r\n    } else {\r\n      color = '#ACBFA4';\r\n    }\r\n\r\n    d3.select(nodes[i])\r\n      .select('.bst-cell-circle')\r\n      .style('stroke', color)\r\n      .transition()\r\n      .duration(600)\r\n      .ease(d3.easeElastic)\r\n      .style('stroke-width', 7);\r\n\r\n    if (!draggedNode || !!innerNode || !treeValid) {\r\n      return;\r\n    }\r\n\r\n    this.simulation.loop.draggedNode.hoveringPlaceholder = d;\r\n\r\n    d.hoveringNode = this.simulation.loop.draggedNode;\r\n  }\r\n\r\n  mouseOut(d: BstCell, i: number, nodes: d3Element[] | ArrayLike<d3Element>): void {\r\n\r\n    d.isMouseOver = false;\r\n\r\n    d3.select(nodes[i])\r\n      .select('.bst-cell-circle')\r\n      .transition()\r\n      .duration(600)\r\n      .ease(d3.easeElastic)\r\n      .style('stroke-width', 0);\r\n\r\n    const draggedNode = this.simulation.loop.draggedNode;\r\n    const innerNode = d.node;\r\n    const treeValid = d.graph.isValid;\r\n\r\n    if (!draggedNode || !!innerNode || !treeValid) {\r\n      return;\r\n    }\r\n    if (d.hoveringNode !== d.node) {\r\n      d.hoveringNode = d.node;\r\n    }\r\n    else {\r\n      d.hoveringNode = undefined;\r\n    }\r\n\r\n    this.simulation.loop.draggedNode.hoveringPlaceholder = null;\r\n\r\n\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, BstCell, any, any>): d3.Selection<d3.BaseType, BstCell, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      .on('mouseover', (d: BstCell, i: number, nodes: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, nodes))\r\n      .on('mouseout', (d: BstCell, i: number, nodes: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, nodes));\r\n\r\n    return element;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class Deletion implements Scene {\r\n  id = 3;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  toDelete = -1;\r\n  deletionIndex = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n    this.deletionIndex = Math.floor(nodes.length / 2);\r\n    this.toDelete = nodes[this.deletionIndex].value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.list.delete(this.deletionIndex);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - deletion at a given index</h1>\r\n  <p>\r\n    Deleting an element from the linked list is performed similarly to deleting\r\n    from the beginning, with the exception that the element at the given index\r\n    must be found prior to that.\r\n  </p>\r\n  <p>\r\n    Finding an element at a given index has to be performed by\r\n    traversing successors and counting how many nodes were passed at every\r\n    given iteration.\r\n  </p>\r\n  <p>\r\n    After finding an element at a given index, deletion consists of one step where\r\n    predecessor of the <em>target</em> node now references <em>target</em> node's\r\n    successor.\r\n  </p>\r\n  <p>\r\n    Now, let's delete element at the index ${this.deletionIndex}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.toDelete} is now deleted from the index ${this.deletionIndex} of the linked list.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class InsertionEnd implements Scene {\r\n  id = 3;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.arrElement = 23.11;\r\n    this.index = this.array.size;\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.arrElement, -1, this.array.x, this.array.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.array.insertAt(node, this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion at the end of an array</h1>\r\n  <p>\r\n    Notice an array on the right-hand-side. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    Now, let's append ${this.arrElement} to the array.\r\n  </p>\r\n  <p>\r\n    Are there any special steps that we need to perform prior to inserting this element at the index [${this.index}]?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Obviously, there weren't any necessary steps prior to this insertion.\r\n    The algorithm has simply determined that there were no elements at the index\r\n    [${this.index}], and thus only placed ${this.arrElement} there.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Scenario} from '../simulation/scenario';\nimport {HttpClient} from '@angular/common/http';\nimport {scenariosPath} from '../consts';\nimport {Selection} from 'd3-selection';\nimport {Simulation} from '../simulation/simulation';\nimport {scenarios} from '../../../scenarios/scenarios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioService {\n\n  simulation?: Simulation;\n\n  currentScenario: BehaviorSubject<Scenario | undefined> = new BehaviorSubject<Scenario | undefined>(undefined);\n  scenarios = scenarios;\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  initSimulation(canvas: Selection<any, any, any, any>,\n                 widthHeight: [number, number],\n                 prompt: (header: string) => Promise<string>): void {\n    this.simulation = new Simulation(canvas, prompt);\n    this.simulation.widthHeight.next(widthHeight);\n  }\n\n  startSimulation(svg: Selection<any, any, any, any>): void {\n    this.simulation?.startSimulation(svg);\n  }\n\n  updateWidthHeight(widthHeight: [number, number]): void {\n    this.simulation.widthHeight.next(widthHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { MainFrameComponent } from './view/main-frame/main-frame.component';\nimport {MenubarModule} from 'primeng/menubar';\nimport { NavbarComponent } from './view/navbar/navbar.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AppRoutingModule} from './app-routing.module';\nimport {ButtonModule} from 'primeng/button';\nimport {MessageService, SharedModule} from 'primeng/api';\nimport { ScenarioGridComponent } from './view/scenario-grid/scenario-grid.component';\nimport {CardModule} from 'primeng/card';\nimport { SceneViewComponent } from './view/scene-view/scene-view.component';\nimport {RippleModule} from 'primeng/ripple';\nimport {OverlayPanelModule} from 'primeng/overlaypanel';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {SliderModule} from 'primeng/slider';\nimport {InputNumberModule} from 'primeng/inputnumber';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ContentViewComponent} from './view/content-view/content-view.component';\nimport {SkeletonModule} from 'primeng/skeleton';\nimport { VisualizationViewComponent } from './view/visualization-view/visualization-view.component';\nimport {ToastModule} from 'primeng/toast';\nimport {ScrollPanelModule} from 'primeng/scrollpanel';\nimport {PlaygroundComponent} from './view/playground/playground.component';\nimport { PromptComponent } from './view/prompt/prompt.component';\nimport {DialogService, DynamicDialogModule} from 'primeng/dynamicdialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainFrameComponent,\n    NavbarComponent,\n    ScenarioGridComponent,\n    SceneViewComponent,\n    ContentViewComponent,\n    VisualizationViewComponent,\n    PlaygroundComponent,\n    PromptComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MenubarModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    ButtonModule,\n    SharedModule,\n    CardModule,\n    RippleModule,\n    OverlayPanelModule,\n    InputTextModule,\n    SliderModule,\n    InputNumberModule,\n    SkeletonModule,\n    ToastModule,\n    ScrollPanelModule,\n    DynamicDialogModule\n  ],\n  providers: [\n    MessageService,\n    DialogService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\n\r\nexport class Stack implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  setup(simulation: Simulation): void {\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Stack</h1>\r\n  <p>\r\n    Let's talk about <b>stacks</b>.\r\n  </p>\r\n  <p>\r\n    A stack is a data structure that follows the principle of Last-In-First-Out (LIFO).\r\n    This means the last element inserted inside the stack is removed first.\r\n  </p>\r\n  <p>\r\n    A stack can be imagined as a pile of CDs. A new CD may be put on top of the pile, and\r\n    thus it is the first one to be picked up later.\r\n  </p>\r\n  <p>\r\n    In order to access a CD from the middle of the CD stack, it is necessary\r\n    to pick all other discs that are placed over our target CD.\r\n  </p>\r\n  <p>\r\n    In this section, we'll see how stacks can be implemented using arrays.\r\n  </p>\r\n  <p>\r\n    Let's get started :)\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {DrawingHelper} from './drawing-helper';\r\nimport * as d3 from 'd3';\r\nimport {Heap} from '../../structures/tree/binary-tree/heap/heap';\r\n\r\nexport class HeapDrawing implements DrawingHelper<Heap> {\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    const treeElement = enterElement.append('g')\r\n      .attr('class', 'heap');\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n}\r\n","import {BinaryTree} from '../binary-tree';\r\nimport {BstCell} from '../../bst-cell';\r\nimport {SimulationNode} from '../../../../basics/simulation-node';\r\nimport {SimulationLink} from '../../../../basics/simulation-link';\r\nimport {last} from 'rxjs/operators';\r\n\r\nexport class Heap extends BinaryTree {\r\n\r\n  _data: (BstCell | undefined)[] = [];\r\n  size = 0;\r\n\r\n  constructor(id: number, x: number, y: number) {\r\n    super(id, x, y);\r\n  }\r\n\r\n  addCell(cell: BstCell, parent?: BstCell | null, left?: boolean): void {\r\n    this.setCell(cell, ++this.size);\r\n  }\r\n\r\n  async add(d: SimulationNode, bstCell: BstCell, animate = true): Promise<void> {\r\n    bstCell.setNode(d);\r\n    d.lockedPlaceholder = bstCell;\r\n\r\n    this.addNextCell(bstCell);\r\n    this.alignForces();\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n\r\n    await this.upHeap(bstCell, this.size - 2, animate);\r\n\r\n  }\r\n\r\n  addNextCell(cell: BstCell): void {\r\n    const nextCell = new BstCell(this, this.maxId++, cell.x, cell.y);\r\n\r\n    this.addCell(nextCell);\r\n    const [parent] = this.getParent(nextCell, this.size);\r\n    if (!!parent) {\r\n      this.linkHelper.addLink(parent, nextCell);\r\n    }\r\n  }\r\n\r\n  async upHeap(cell: BstCell, index: number, animate = true): Promise<void> {\r\n    let [parent] = this.getParent(cell, index);\r\n    const root = this.getRoot();\r\n    while (cell !== root) {\r\n      if (cell.node.value < parent.node.value) {\r\n        await this.swapNodes(cell, parent, animate);\r\n      }\r\n      cell = parent;\r\n      index = Math.floor(index / 2);\r\n      [parent] = this.getParent(cell, index);\r\n    }\r\n  }\r\n\r\n  async deleteMin(): Promise<[SimulationNode, (BstCell | null), BstCell]> {\r\n    const min = this.getRoot();\r\n    if (!min.node) {\r\n      return [null, null, null];\r\n    }\r\n    const node = min.node;\r\n    const deletedCell = await this.deleteNodeFromCell(min);\r\n    return [node, min, deletedCell];\r\n  }\r\n\r\n  async delete(value: number, animate = true): Promise<[SimulationNode, (BstCell | null), BstCell]> {\r\n    for (const cell of this._data) {\r\n      if (!cell.node) {\r\n        continue;\r\n      }\r\n      const checkingNode = cell.node;\r\n      if (animate) {\r\n        checkingNode.drawArrow = true;\r\n        await new Promise(r => setTimeout(r, 600));\r\n        checkingNode.drawArrow = false;\r\n      }\r\n      if (checkingNode.value === value) {\r\n        const deleted = await this.deleteNodeFromCell(cell);\r\n        return [checkingNode, cell, deleted];\r\n      }\r\n    }\r\n    return [null, null, null];\r\n  }\r\n\r\n  async deleteNodeFromCell(cell: BstCell, animate = true): Promise<BstCell | null> {\r\n    if (!cell.node) {\r\n      return null;\r\n    }\r\n    const lastTakenCell = this.getLastTakenCell();\r\n    if (lastTakenCell === cell) {\r\n      const lastCell = this.getEmptyCell();\r\n      const node = lastTakenCell.removeNode();\r\n      node.setTarget(this.x, this.y - 200);\r\n      this.deleteCell(lastCell);\r\n      return lastCell;\r\n    }\r\n    await this.swapNodes(cell, lastTakenCell);\r\n    const removed = lastTakenCell.removeNode();\r\n    if (animate) {\r\n      removed.setTarget(this.x, this.y - 200);\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n\r\n    const emptyCell = this.getEmptyCell();\r\n    this.deleteCell(emptyCell);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n\r\n    await this.downHeap(cell);\r\n  }\r\n\r\n  async downHeap(cell: BstCell, animate = true): Promise<void> {\r\n    while (!!cell && !!cell.node) {\r\n      const minChild = this.getMinChild(cell);\r\n      if (!minChild) {\r\n        break;\r\n      }\r\n      const currentNode = cell.node;\r\n      const minNode = minChild.node;\r\n      if (!currentNode || !minNode\r\n        || minNode.value >= currentNode.value) {\r\n        break;\r\n      }\r\n      await this.swapNodes(minChild, cell, animate);\r\n      cell = minChild;\r\n    }\r\n  }\r\n\r\n  async swapNodes(first: BstCell, second: BstCell, animate = true): Promise<void> {\r\n    const lowerNode = first.removeNode();\r\n    const higherNode = second.removeNode();\r\n    const oldCellColor = first.color;\r\n    const oldParentColor = second.color;\r\n    if (animate) {\r\n      first.color = '#98dc73';\r\n      second.color = '#98dc73';\r\n      lowerNode.setTarget(second.x - 100, second.y);\r\n      higherNode.setTarget(first.x + 100, first.y);\r\n      await new Promise(r => setTimeout(r, 600));\r\n      lowerNode.setTarget(second.x, second.y);\r\n      higherNode.setTarget(first.x, first.y);\r\n      await new Promise(r => setTimeout(r, 300));\r\n    }\r\n    second.setNode(lowerNode);\r\n    first.setNode(higherNode);\r\n    first.color = oldCellColor;\r\n    second.color = oldParentColor;\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n  }\r\n\r\n  getMinChild(cell: BstCell): BstCell | null{\r\n    const leftChild = this.getLeftChild(cell);\r\n    const rightChild = this.getRightChild(cell);\r\n\r\n    if ((!leftChild || !leftChild.node)\r\n      && (!rightChild || !rightChild.node)) {\r\n      return null;\r\n    } else if ((!leftChild || !leftChild.node) && !!rightChild.node) {\r\n      return rightChild; // technically impossible\r\n    } else if ((!rightChild || !rightChild.node) && !!leftChild.node) {\r\n      return leftChild;\r\n    } else if (!!leftChild.node && !!rightChild) {\r\n      if (leftChild.node.value < rightChild.node.value) {\r\n        return leftChild;\r\n      } else {\r\n        return rightChild;\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteCell(cell: BstCell): void {\r\n    const lastCell = this.getEmptyCell();\r\n    if (cell !== lastCell) {\r\n      return;\r\n    }\r\n    this.linkHelper.detachCompletely(cell);\r\n    this.removeCell(this.size--);\r\n  }\r\n\r\n  async insert(node: SimulationNode, animate = true): Promise<void> {\r\n    const lastCell = this.getEmptyCell();\r\n\r\n    if (animate) {\r\n      node.setTarget(lastCell.x, lastCell.y);\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    await this.add(node, lastCell, animate);\r\n  }\r\n\r\n  protected getParent(cell: BstCell, childIndex?: number): [BstCell, number] | [undefined, undefined] {\r\n    if (!cell) {\r\n      return [undefined, undefined];\r\n    }\r\n    if (childIndex) {\r\n      childIndex = this.getTreeIndex(cell);\r\n    }\r\n    const parentIndex = Math.floor(childIndex / 2);\r\n    const side = childIndex % 2;\r\n    const parent = this.getCell(parentIndex);\r\n    return [parent, side];\r\n  }\r\n\r\n  protected getLeftChild(cell: BstCell, index?: number): BstCell | undefined {\r\n    if (!cell) {\r\n      return undefined;\r\n    }\r\n    if (!index) {\r\n      index = this.getTreeIndex(cell);\r\n    }\r\n    return this.getCell(2 * index);\r\n  }\r\n\r\n  protected getRightChild(cell: BstCell, index?: number): BstCell | undefined {\r\n    if (!cell) {\r\n      return undefined;\r\n    }\r\n    if (!index) {\r\n      index = this.getTreeIndex(cell);\r\n    }\r\n    return this.getCell(2 * index + 1);\r\n  }\r\n\r\n  getRoot(): BstCell {\r\n    return this._data[0];\r\n  }\r\n\r\n  protected setLeftChild(parent: BstCell, child: BstCell, parentIndex?: number): void {\r\n    if (!parent) {\r\n      return undefined;\r\n    }\r\n    if (!parentIndex) {\r\n      parentIndex = this.getTreeIndex(parent);\r\n    }\r\n    this.setCell(child, 2 * parentIndex);\r\n  }\r\n\r\n  protected setRightChild(parent: BstCell, child: BstCell, parentIndex?: number): void {\r\n    if (!parent) {\r\n      return undefined;\r\n    }\r\n    if (!parentIndex) {\r\n      parentIndex = this.getTreeIndex(parent);\r\n    }\r\n    this.setCell(child, 2 * parentIndex + 1);\r\n  }\r\n\r\n  getTreeIndex(cell: BstCell): number {\r\n    if (!cell) {\r\n      return -1;\r\n    }\r\n    return this._data.findIndex(c => c.id === cell.id) + 1;\r\n  }\r\n\r\n  private setCell(cell: BstCell, treeIndex: number): void {\r\n    this._data[treeIndex - 1] = cell;\r\n  }\r\n\r\n  private getCell(treeIndex: number): BstCell {\r\n    return this._data[treeIndex - 1];\r\n  }\r\n\r\n  private removeCell(treeIndex: number): void {\r\n    delete this._data[treeIndex - 1];\r\n  }\r\n\r\n  getData(): BstCell[] {\r\n    return this._data.filter(bcu => !!bcu);\r\n  }\r\n\r\n  getEmptyCell(): BstCell {\r\n    return this.getCell(this.size);\r\n  }\r\n\r\n  getLastTakenCell(): BstCell {\r\n    return this.getCell(this.size - 1);\r\n  }\r\n\r\n  protected detachChildren(cell: BstCell): void {\r\n  }\r\n\r\n  protected detachParent(cell: BstCell): void {\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\n\r\nexport class Search implements Scene {\r\n  id = 1;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  searchValue = -1;\r\n  rootValue = -1;\r\n  rightOrLeft = 'left';\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(12);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    if (nodes[6] !== this.bst.getRoot().node) {\r\n      this.searchValue = nodes[6].value;\r\n    } else {\r\n      this.searchValue = nodes[7].value;\r\n    }\r\n    this.rootValue = this.bst.getRoot().node.value;\r\n    if (this.searchValue < this.rootValue) {\r\n      this.rightOrLeft = 'left';\r\n    } else {\r\n      this.rightOrLeft = 'right';\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.find(this.searchValue);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Searching</h1>\r\n  <p>\r\n    Searching in a binary search tree is quite a simple procedure.\r\n  </p>\r\n  <p>\r\n    The algorithm depends on the property of BST that each left\r\n    subtree has values lower than an observed node and each right subtree has values higher than the node.\r\n  </p>\r\n  <p>\r\n    If the value we are looking for is lower than the current node, we can say for sure that the value is not in the right subtree; we\r\n    need to only search in the left subtree and if the value is above the node, we can say for sure that the value is not in the left\r\n    subtree; we need to only search in the right subtree.\r\n  </p>\r\n  <p>\r\n    Let's try to find ${this.searchValue} in the tree.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    When we are searching for the node with value ${this.searchValue} in the binary tree from the right-hand side,\r\n    we will first check the root. The value placed in the root is ${this.rootValue}, so we checked its\r\n    ${this.rightOrLeft} subtree.\r\n  </p>\r\n  <small>\r\n    There is a chance we won't find our desired value, and we will know that it isn't present in the tree\r\n    when we come across a leaf.\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","<div class=\"p-grid p-mx-0\">\n  <div class=\"p-col-12 p-sm-6 p-md-4 p-px-0 p-pb-0\">\n    <div class=\"text-part\">\n      <app-content-view [isContentLoading]=\"isContentLoading\"></app-content-view>\n      <div class=\"text-footer p-ai-center p-text-right\">\n        <button class=\"p-button p-button-text p-button-icon p-button-rounded p-mr-4\"\n                icon=\"pi pi-angle-left\"\n                label=\"Back\"\n                [disabled]=\"scene?.isFirst\"\n                (click)=\"showPrevious()\"\n                pRipple\n                pButton\n        ></button>\n        <button class=\"p-button p-button-icon p-button-rounded p-mr-4\"\n                icon=\"pi pi-angle-double-right\"\n                label=\"Next\"\n                (click)=\"showNext()\"\n                *ngIf=\"!scene?.isLast; else finishButton\"\n                pRipple\n                pButton\n        ></button>\n        <ng-template #finishButton>\n          <button class=\"p-button p-button-icon p-button-rounded p-mr-4\"\n                  icon=\"pi pi-check\"\n                  label=\"Finish\"\n                  (click)=\"finish()\"\n                  pRipple\n                  pButton\n          ></button>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-col-12 p-sm-6 p-md-8 p-px-0 p-pb-0\">\n    <div class=\"visualization-part\">\n      <app-visualization-view></app-visualization-view>\n    </div>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ScenarioService} from '../../core/services/scenario.service';\nimport {SceneService} from '../../core/services/scene.service';\nimport {mergeMap} from 'rxjs/operators';\nimport {of} from 'rxjs';\nimport {Scenario} from '../../core/simulation/scenario';\nimport {Scene} from '../../core/simulation/scene';\n\n@Component({\n  selector: 'app-scene-view',\n  templateUrl: './scene-view.component.html',\n  styleUrls: ['./scene-view.component.css']\n})\nexport class SceneViewComponent implements OnInit {\n\n  isContentLoading = true;\n\n  scenarioPath: string;\n  sceneIndex: number;\n\n  constructor(private scenarioService: ScenarioService,\n              private sceneService: SceneService,\n              private activatedRoute: ActivatedRoute,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(val => {\n      this.isContentLoading = true;\n      if (!val.path || !val.sceneIndex) {\n        this.router.navigate(['']);\n      }\n      this.scenarioPath = val.path;\n      this.sceneIndex = parseInt(val.sceneIndex, 10);\n      this.prepareScene();\n    });\n  }\n\n  prepareScene(): void {\n\n    const scenario = this.scenarioService.scenarios.find(sc => sc.path === this.scenarioPath);\n    if (!!scenario && scenario.scenes.length < 1) {\n      this.router.navigate(['']);\n    }\n    this.scenarioService.currentScenario.next(scenario);\n    const sceneClass = this.scenes[this.sceneIndex];\n    const scene = new sceneClass();\n    scene.isFirst = this.sceneIndex === 0;\n    scene.isLast = this.sceneIndex === this.scenes.length - 1;\n    this.sceneService.scene.next(scene);\n    this.sceneService.played.next(scene.played);\n    this.sceneService.set.next(false);\n    this.isContentLoading = false;\n  }\n\n  showNext(): void {\n    if (this.sceneIndex < this.scenes.length - 1) {\n      this.router.navigate([`../${(this.sceneIndex + 1).toString()}`], {relativeTo: this.activatedRoute});\n    }\n  }\n\n  showPrevious(): void {\n    if (this.sceneIndex > 0) {\n      this.router.navigate([`../${(this.sceneIndex - 1).toString()}`], {relativeTo: this.activatedRoute});\n    }\n  }\n\n  finish(): void {\n    this.router.navigate(['']);\n  }\n\n  get scenes(): (typeof Scene)[] {\n    return this.scenarioService.currentScenario.getValue().scenes;\n  }\n\n  get scene(): Scene | undefined {\n    return this.sceneService.scene.getValue();\n  }\n\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class InsertionSecondCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toAdd = 45;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [20, 10, 30, 40]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = simulation.objectFactory.create('node', this.bst.x, this.bst.y - 200, this.toAdd) as SimulationNode;\r\n    simulation.nodeHandler.add(node);\r\n    await this.bst.insert(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion - second case</h1>\r\n\r\n  <p>\r\n    The second case occurs when new node's uncle is either black or doesn't even exist\r\n    (opposite to the first case), and:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      New node is the right child of its parent;\r\n    </li>\r\n    <li>\r\n      New node's parent is the right child of its own parent (new node's grandparent).\r\n    </li>\r\n  </ul>\r\n  <p>or symmetrically both are left children of their respective parents.</p>\r\n  <p>\r\n    Now let's see the situation where where all three of nodes will be aligned\r\n    as right children.\r\n  </p>\r\n  <p>\r\n    The new node's parent and grandparent will get left-rotated (or right-rotated if the position were symmetrical)\r\n    and grandparent will become the left child of the new node's parent.\r\n  </p>\r\n  <small>Checking propagates up the tree where new node's parent is checked next</small>\r\n  <p>\r\n    By adding a node with the value ${this.toAdd} to the right-hand side tree,\r\n    it will become unbalanced and that imbalance will be regareded as the second case.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing tri-node-restructuring.\r\n  </p>\r\n  <p>\r\n    Adding ${this.toAdd} has caused imbalance, so nodes with values 30 and 40 got left-rotated, and\r\n    30 become 40's left child, whereas ${this.toAdd} is 40's right child.\r\n  </p>\r\n  <p>\r\n    During the same process, 30 was colored <span style=\"color: #bb4848;\">red</span> and 40\r\n    was colored <span style=\"color: #868686;\">black</span>.\r\n  </p>\r\n  <p>\r\n    Checking was propagated up the tree and since 20 was already colored <span style=\"color: #868686;\">black</span>,\r\n    alhorithm new that balance was restored.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import * as d3 from 'd3';\n\nexport const scenariosPath = 'scenarios';\nexport const defaultRadius = 40;\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {StartScene} from './scenes/start';\r\nimport {SearchScene} from './scenes/search';\r\nimport {UnsuccessfulSearch} from './scenes/unsuccessful-search';\r\nimport {InsertionEnd} from './scenes/insertion-end';\r\nimport {InsertionMiddle} from './scenes/insertion-middle';\r\nimport {InsertionBeginning} from './scenes/insertion-beginning';\r\nimport {DeletionEnd} from './scenes/deletion-end';\r\nimport {DeletionMiddle} from './scenes/deletion-middle';\r\nimport {DeletionBeginning} from './scenes/deletion-beginning';\r\nimport {SortedSearch} from './scenes/sorted-search';\r\n\r\nconst arrayScenario = new Scenario('Array', 'array', 'Search, insertion, and deletion of elements of an array.');\r\narrayScenario.cover = 'scenarios/arrays/cover.png';\r\narrayScenario.scenes = [\r\n  StartScene,\r\n  SearchScene,\r\n  UnsuccessfulSearch,\r\n  InsertionEnd,\r\n  InsertionMiddle,\r\n  InsertionBeginning,\r\n  DeletionEnd,\r\n  DeletionMiddle,\r\n  DeletionBeginning,\r\n  SortedSearch\r\n];\r\n\r\nexport default arrayScenario;\r\n","import {SimulationLink} from '../../basics/simulation-link';\nimport {BstCell} from './bst-cell';\nimport {SimulationNode} from '../../basics/simulation-node';\nimport {SimulationNodeDatum} from 'd3-force';\nimport {LinkHelper} from '../../helpers/link-helper';\nimport {Drawable} from '../../drawable';\n\nexport class SimulationGraph implements SimulationNodeDatum, Drawable {\n  id: number;\n\n  x: number;\n  y: number;\n\n  z = -1;\n  isValid = true;\n  linkHelper = new LinkHelper();\n  protected data: BstCell[] = [];\n  maxId = 0;\n\n  constructor(id: number, x: number, y: number) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n  }\n\n  moveCell(cell: BstCell, xPos: number, yPos: number): void {\n    cell.setTarget(cell.graphX, cell.graphY);\n    return;\n  }\n\n  async add(d: SimulationNode, bstCell: BstCell): Promise<void> {\n    bstCell.setNode(d);\n    d.lockedPlaceholder = bstCell;\n  }\n\n  getData(): BstCell[] {\n    return this.data;\n  }\n\n  getLinks(): SimulationLink[] {\n    return this.linkHelper.links;\n  }\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\n\r\nexport class BstScene implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  rootValue = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    const bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(bst);\r\n\r\n    for (const node of nodes) {\r\n      await bst.insert(node, false);\r\n    }\r\n\r\n    this.rootValue = bst.getRoot().node.value;\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Binary search tree</h1>\r\n  <p>\r\n    Binary search tree is a <a href=\"/visualize/heap\">binary tree</a> which has the following properties:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n       Every descendant of a node starting from its <em>left</em> child, i.e. every node in the left subtree\r\n       has a lower value than that of the given node;\r\n    </li>\r\n    <li>\r\n       Every descendant of a node starting from its <em>right</em> child, i.e. every node in the right subtree\r\n       has a higher value than that of the given node;\r\n    </li>\r\n    <li>\r\n        Aforementioned properties apply for every single node of a binary search tree.\r\n    </li>\r\n  </ul>\r\n  <p>\r\n    Looking at the right-hand side, root of the tree has a value of ${this.rootValue}, and\r\n    every node starting from its left child has a lower value, whereas every node\r\n    from the right subtree has a higher value.\r\n  </p>\r\n  <p>\r\n    Let's see how binary search tree makes searching more efficient!\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class DeletionFirstCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toDelete = 40;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [30, 10, 40, 20]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toDelete);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - first case</h1>\r\n\r\n  <p>\r\n    Deletion of a node from a red-black tree is quite similar to that of an ordinary\r\n    binary search tree, with the exception that, if a black node is deleted, black depth\r\n    property is violated and balance has to be restored.\r\n  </p>\r\n  <p>\r\n    If the deleted node was colored black, then its sibling's subtree is checked, and thus\r\n    three different cases are formed.\r\n  </p>\r\n  <p>\r\n    The first case occurs when the deleted node's sibling is black and has a red child. In that\r\n    situation, tri-node-restructuring is performed.\r\n  </p>\r\n  <p>\r\n    After removing ${this.toDelete} from the tree on the right-hand side, the first case will occur.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing tri-node-restructuring.\r\n  </p>\r\n  <small>\r\n    Checking wasn't propagated up the tree.\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class InsertionThirdCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toAdd = 35;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [20, 10, 30, 40]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = simulation.objectFactory.create('node', this.bst.x, this.bst.y - 200, this.toAdd) as SimulationNode;\r\n    simulation.nodeHandler.add(node);\r\n    await this.bst.insert(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Insertion - third case</h1>\r\n\r\n  <p>\r\n    The thid case occurs when new node's uncle is either black or doesn't even exist\r\n    (opposite to the first case), and:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      New node is the left child of its parent;\r\n    </li>\r\n    <li>\r\n      New node's parent is the right child of its own parent (new node's grandparent).\r\n    </li>\r\n  </ul>\r\n  <p>or symmetrically new node is the right child and its parent is the left child of their respective parents.</p>\r\n  <p>\r\n    Now let's see the situation where new node is right, and its parent is the left child.\r\n  </p>\r\n  <p>\r\n    Firstly, there will be right-rotation (or left-rotation if the position were symmetrical)\r\n    of the new node and its parent. Therefore, the position from the second case is formed,\r\n    and those same operations that occurred in the second case can be performed.\r\n  </p>\r\n  <p>\r\n    The new node's parent and grandparent will get left-rotated (or right-rotated if the position were symmetrical)\r\n    and grandparent will become the left child of the new node's parent.\r\n  </p>\r\n  <small>Checking propagates up the tree where new node's parent is checked next</small>\r\n  <p>\r\n    By adding a node with the value ${this.toAdd} to the right-hand side tree,\r\n    it will become unbalanced and that imbalance will be regareded as the third case.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing tri-node-restructuring.\r\n  </p>\r\n  <p>\r\n    Adding ${this.toAdd} has caused imbalance, so that new node with value ${this.toAdd} and the node with value 40 got rotated,\r\n    after which the node ${this.toAdd} and 30 rotated left.\r\n  </p>\r\n  <p>\r\n    During the same process, 30 was colored <span style=\"color: #bb4848;\">red</span> and ${this.toAdd}\r\n    was colored <span style=\"color: #868686;\">black</span>.\r\n  </p>\r\n  <p>\r\n    Checking was propagated up the tree and since 20 was already colored <span style=\"color: #868686;\">black</span>,\r\n    alhorithm new that balance was restored.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport heapScenario from '../heap-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\n\r\nexport class Insertion implements Scene {\r\n  id = 3;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  heap: Heap;\r\n  newElement = -9.31;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.heap = simulation.objectFactory.create('heap', 0, 0) as Heap;\r\n    simulation.heapHandler.add(this.heap);\r\n\r\n    for (const node of nodes) {\r\n      await this.heap.insert(node, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.newElement, -1, this.heap.x, this.heap.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n\r\n    await this.heap.insert(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Heap insertion</h1>\r\n  <p>\r\n    Inserting an element to a heap is done by simply inserting a\r\n    node as its last leaf and then propagating it up the heap\r\n    in order to find its correct position.\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      Insert new node ${this.newElement} to the heap's last leaf;\r\n    </li>\r\n    <li>\r\n      Swap the node contatining ${this.newElement} and its parent as long as\r\n      the node's value is lower than its parent's value.\r\n    </li>\r\n  </ul>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.newElement} is now inserted and the heap order is restored.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport {DialogService} from 'primeng/dynamicdialog';\nimport {PromptComponent} from '../prompt/prompt.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  toHomePage(): void {\n    this.router.navigate(['']);\n  }\n}\n","<div class=\"navbar p-d-flex\">\n  <div class=\"title\" (click)=\"toHomePage()\">\n    <h3 class=\"p-text-bold p-ml-5\">alharismi</h3>\n  </div>\n  <div class=\"buttons p-ml-auto p-mr-4\">\n    <button class=\"p-button-text\" label=\"About\" pButton></button>\n  </div>\n</div>\n","import {DrawingHelper} from './drawing-helper';\r\nimport * as d3 from 'd3';\r\nimport {BinarySearchTree} from '../../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\n\r\nexport class BstDrawing implements DrawingHelper<BinarySearchTree> {\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    const treeElement = enterElement.append('g')\r\n      .attr('class', 'bst');\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, BinarySearchTree, any, any>): d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {SimulationQueue} from '../../../app/core/simulation/structures/array/simulation-queue';\r\n\r\nexport class Enqueue implements Scene {\r\n  id = 4;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  queue: SimulationQueue;\r\n  elements = '';\r\n  queueSize = -1;\r\n  firstValue = -1;\r\n  lastValue = -1;\r\n  toEnqueue = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.queue = simulation.objectFactory.create('queue', 0, 0, 10) as SimulationQueue;\r\n    simulation.arrayHandler.add(this.queue);\r\n\r\n    for (const node of nodes) {\r\n      await this.queue.enqueue(node, false);\r\n    }\r\n    this.firstValue = this.queue.left.node.value;\r\n    this.lastValue = this.queue.right.node.value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.toEnqueue, -1, this.queue.x, this.queue.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.queue.enqueue(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Queue - Enqueue operation</h1>\r\n  <p>\r\n    Take a look at that array on the right-hand side. That's the queue implementation.\r\n  </p>\r\n  <p>\r\n    The first element of the queue is <span style=\"color: #a0ff6f; font-weight: bold\">${this.firstValue}</span>,\r\n    and the last element is <span style=\"color: #ff9494; font-weight: bold\">${this.lastValue}</span>.\r\n  </p>\r\n  <p>\r\n    The operation that will be performed now is the <em>enqueue</em> operation.\r\n  </p>\r\n  <p>\r\n    In this configuration, enqueue is done as simple insertion at the end of the implementation array.\r\n  </p>\r\n  <p>\r\n    Let's see how ${this.toEnqueue} is enqueued to this queue.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After successfully enqueueing the value ${this.toEnqueue}, it has became the new last element.\r\n  </p>\r\n  <small>More details about enqueue operation will be covered in the section following dequeue.</small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class Insertion implements Scene {\r\n  id = 3;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  insertionIndex = -1;\r\n  newElement = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n    this.insertionIndex = Math.floor(nodes.length / 2);\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.newElement, -1, this.list.x, this.list.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n\r\n    await this.list.insert(node, this.insertionIndex);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - insertion after a given index</h1>\r\n  <p>\r\n    Inserting an element to a linked list wouldn't be too complicated if\r\n    there were an easy way to find out where that index is.\r\n  </p>\r\n  <p>\r\n    That being said, finding an element at a given index has to be performed by\r\n    traversing successors and counting how many nodes were passed at every\r\n    given iteration.\r\n  </p>\r\n  <p>\r\n    After finding an element at a given index, insertion consists of a few steps which involve the\r\n    predecessor and the successor of the new node:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n      New predecessor now references the new node.\r\n    </li>\r\n    <li>\r\n      The new node now references the new successor.\r\n    </li>\r\n  </ul>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.newElement} is now inserted after the index ${this.insertionIndex} of the linked list.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport contextMenu, {ContextMenuFn, MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\nimport {BstCellMouse} from './bst-cell-mouse';\r\nimport {LinkedList} from '../../structures/tree/linked-list/linked-list';\r\n\r\nexport class LinkedListMouse implements MouseHelper<LinkedList> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  contextMenu(d: LinkedList, i: number, trees: d3Element[] | ArrayLike<d3Element>): void {\r\n    const menu = [\r\n      {\r\n        title: 'Prepend',\r\n        disabled: !d.isValid,\r\n        action: async (linkedList: LinkedList) => {\r\n          const newValue = parseFloat(await this.simulation.prompt('Which value to prepend'));\r\n          if (isNaN(newValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          const node = new SimulationNode(newValue, -1, linkedList.x, linkedList.y - 150);\r\n          this.simulation.nodeHandler.add(node);\r\n          await linkedList.prepend(node);\r\n        }\r\n      },\r\n      {\r\n        title: 'Append',\r\n        disabled: !d.isValid,\r\n        action: async (linkedList: LinkedList) => {\r\n          const newValue = parseFloat(await this.simulation.prompt('Which value to append'));\r\n          if (isNaN(newValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          const node = new SimulationNode(newValue, -1, linkedList.x, linkedList.y - 150);\r\n          this.simulation.nodeHandler.add(node);\r\n          await linkedList.append(node);\r\n        }\r\n      },\r\n      {\r\n        title: 'Insert',\r\n        disabled: !d.isValid,\r\n        action: async (linkedList: LinkedList) => {\r\n          const newValue = parseFloat(await this.simulation.prompt('Which value to insert'));\r\n          const index = parseFloat(await this.simulation.prompt('At which index to insert?'));\r\n\r\n          if (isNaN(newValue) || isNaN(index)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          const node = new SimulationNode(newValue, -1, linkedList.x, linkedList.y - 150);\r\n          this.simulation.nodeHandler.add(node);\r\n          await linkedList.insert(node, index);\r\n        }\r\n      },\r\n      {\r\n        divider: true\r\n      },\r\n      {\r\n        title: 'Pop first',\r\n        disabled: d.getData().length <= 2,\r\n        action: async (linkedList: LinkedList) => {\r\n          await linkedList.popFirst();\r\n        }\r\n      },\r\n      {\r\n        title: 'Pop last',\r\n        disabled: d.getData().length <= 2,\r\n        action: async (linkedList: LinkedList) => {\r\n          await linkedList.popLast();\r\n        }\r\n      },\r\n      {\r\n        title: 'Delete',\r\n        disabled: d.getData().length <= 2,\r\n        action: async (linkedList: LinkedList) => {\r\n          const index = parseFloat(await this.simulation.prompt('From which index to delete'));\r\n          if (isNaN(index)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          await linkedList.delete(index);\r\n        }\r\n      },\r\n      {\r\n        title: 'Info log',\r\n        action: async (elm: LinkedList) => {\r\n          console.log(elm);\r\n        }\r\n      }\r\n    ];\r\n\r\n    contextMenu(menu)(d, i);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      // .on('mouseover', (d: LinkedList, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, arrays))\r\n      // .on('mouseout', (d: LinkedList, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, arrays))\r\n      .on('contextmenu', ((d: LinkedList, i: number, trees: d3Element[] | ArrayLike<d3Element>) => this.contextMenu(d, i, trees)));\r\n    return element;\r\n  }\r\n}\r\n","import {AfterViewInit, Component, ElementRef, HostListener, ViewChild} from '@angular/core';\nimport {Router} from '@angular/router';\nimport * as d3 from 'd3';\nimport {Selection} from 'd3-selection';\nimport {ScenarioService} from '../../core/services/scenario.service';\nimport {ArrowheadHelper} from '../../core/simulation/helpers/arrowhead-helper';\nimport {SceneService} from '../../core/services/scene.service';\nimport {Scene} from '../../core/simulation/scene';\nimport {MessageService} from 'primeng/api';\nimport {debounceTime} from 'rxjs/operators';\nimport {PlaygroundService} from '../../core/services/playground.service';\nimport {DialogService} from 'primeng/dynamicdialog';\nimport {PromptComponent} from '../prompt/prompt.component';\n\n@Component({\n  selector: 'app-visualization-view',\n  templateUrl: './visualization-view.component.html',\n  styleUrls: ['./visualization-view.component.css']\n})\nexport class VisualizationViewComponent implements AfterViewInit {\n\n  private _speed = 1;\n  isVisualizationLoading = true;\n  widthHeight: [number, number] = [0, 0];\n\n\n  svg: Selection<any, any, null, undefined>;\n\n  @ViewChild('canvas')\n  canvasElement: ElementRef<HTMLDivElement>;\n\n  @ViewChild('skeleton')\n  skeletonElement: ElementRef<HTMLDivElement>;\n\n  constructor(private router: Router,\n              private scenarioService: ScenarioService,\n              private sceneService: SceneService,\n              private playgroundService: PlaygroundService,\n              private messageService: MessageService,\n              private dialogService: DialogService) { }\n\n  ngAfterViewInit(): void {\n\n    setTimeout(() => this.init(), 600);\n  }\n  init(): void {\n    this.widthHeight = [this.skeletonElement.nativeElement.offsetWidth, this.skeletonElement.nativeElement.offsetHeight - 10];\n\n    this.setupSvg();\n    const g = this.svg\n      .append('g')\n      .attr('class', 'canvas');\n\n    this.scenarioService.initSimulation(g, this.widthHeight, this.promptString(this.dialogService));\n    this.scenarioService.startSimulation(this.svg);\n    this.scenarioService.simulation.camera.focusSvg();\n    this.scenarioService.simulation.interactable = false;\n    this.readScene();\n  }\n\n  openInPlayground(): void {\n    this.router.navigate(['playground']);\n  }\n\n  setupSvg(): void {\n    this.svg = d3.select(this.canvasElement.nativeElement).append('svg')\n      .attr('id', 'svgCanvas')\n      .attr('height', this.widthHeight[1])\n      .attr('width', this.widthHeight[0])\n      .style('background', '#282828');\n\n    ArrowheadHelper.addArrowhead(this.svg);\n\n    this.svg.append('filter')\n      .attr('id', 'blur')\n      .append('feGaussianBlur')\n      .attr('stdDeviation', 5);\n\n  }\n\n  async play(): Promise<void> {\n    this.scene.played = 'playing';\n    try {\n      await this.scene.play(this.scenarioService.simulation);\n    } catch (e: any) {\n      this.messageService.add({severity: 'error', summary: 'Error', detail: e});\n      console.log(e);\n    }\n    this.scene.played = 'played';\n    this.sceneService.played.next('played');\n  }\n\n  readScene(): void {\n    this.sceneService.scene.pipe(debounceTime(50)).subscribe(async sc => {\n      this.isVisualizationLoading = true;\n      await this.setScene(sc);\n      this.isVisualizationLoading = false;\n    });\n  }\n\n  async setScene(sc: Scene): Promise<void> {\n    this.scenarioService.simulation.reset();\n    await sc.setup(this.scenarioService.simulation);\n    this.sceneService.set.next(true);\n  }\n\n  async resetScene(): Promise<void> {\n    await this.setScene(this.scene);\n    this.scene.played = 'not_played';\n    this.sceneService.played.next('not_played');\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(): void {\n    if (!this.isVisualizationLoading) {\n      this.widthHeight = [this.canvasElement.nativeElement.offsetWidth, this.canvasElement.nativeElement.offsetHeight - 10];\n    } else {\n      this.widthHeight = [this.skeletonElement.nativeElement.offsetWidth, this.skeletonElement.nativeElement.offsetHeight - 10];\n    }\n    d3.select('#svgCanvas')\n      .attr('height', this.widthHeight[1])\n      .attr('width', this.widthHeight[0]);\n\n    this.scenarioService.updateWidthHeight(this.widthHeight);\n  }\n\n  promptString(dialogService: DialogService): (header: string) => Promise<string> {\n    return async (header: string) => {\n      const ref = dialogService.open(PromptComponent, {\n        header,\n        baseZIndex: 1000,\n        width: '50%'\n      });\n      return await ref.onClose.toPromise();\n    };\n  }\n\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(val: number) {\n    this._speed = val;\n  }\n\n  get scene(): Scene {\n    return this.sceneService.scene.getValue();\n  }\n\n}\n","<div class=\"visualization-content\" [style]=\"{width: '100%', height: isVisualizationLoading ? 0 : '100%'}\" #canvas></div>\n<div [style]=\"{width: '100%', height: '100%'}\" *ngIf=\"isVisualizationLoading\" #skeleton>\n  <p-skeleton width=\"100%\" height=\"100%\"></p-skeleton>\n</div>\n<div class=\"visualization-footer\">\n  <div class=\"p-d-flex p-flex-row\">\n          <span class=\"p-buttonset\">\n            <button class=\"p-button p-button-info p-button-icon p-button-rounded\"\n                    icon=\"pi pi-play\"\n                    [disabled]=\"scene.played !== 'not_played'\"\n                    (click)=\"play()\"\n                    label=\"Play\"\n                    pRipple\n                    pButton\n            ></button>\n            <button class=\"p-button p-button-info p-button-icon p-button-rounded\"\n                    icon=\"pi pi-clock\"\n                    label=\"Speed\"\n                    (click)=\"op.toggle($event)\"\n                    pRipple\n                    pButton\n            ></button>\n            <button class=\"p-button p-button-info p-button-icon p-button-rounded\"\n                    icon=\"pi pi-refresh\"\n                    label=\"Reset\"\n                    (click)=\"resetScene()\"\n                    [disabled]=\"scene.played !== 'played'\"\n                    pRipple\n                    pButton\n            ></button>\n          </span>\n  </div>\n  <p-overlayPanel [showCloseIcon]=\"true\" appendTo=\"body\" #op>\n    <ng-template pTemplate>\n      <p-inputNumber [min]=\".5\" [max]=\"3\" mode=\"decimal\" [minFractionDigits]=\"1\" [maxFractionDigits]=\"1\" [(ngModel)]=\"speed\"></p-inputNumber>\n      <p-slider [min]=\".5\" [max]=\"3\" [step]=\".1\" [(ngModel)]=\"speed\"></p-slider>\n    </ng-template>\n  </p-overlayPanel>\n  <button class=\"p-button p-button-sm p-button-text p-button-secondary visualize-button\"\n          label=\"OPEN IN PLAYGROUND\"\n          icon=\"pi pi-external-link\"\n          (click)=\"openInPlayground()\"\n          pRipple\n          pButton\n  ></button>\n</div>\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {BubbleSort} from '../../../app/core/simulation/structures/array/bubble-sort';\r\nimport {InsertionSort} from '../../../app/core/simulation/structures/array/insertion-sort';\r\nimport {SelectionSort} from '../../../app/core/simulation/structures/array/selection-sort';\r\nimport {MergeSort} from '../../../app/core/simulation/structures/array/merge-sort';\r\n\r\nexport class Merge implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  array: SimulationArray;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    this.array.sorting = new MergeSort();\r\n    await this.array.sort();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Merge sort</h1>\r\n  <p>\r\n    Merge Sort is one of the most popular sorting algorithms that is based on the\r\n    principle of Divide and Conquer Algorithm.\r\n  </p>\r\n  <p>\r\n    Here, a problem is divided into multiple sub-problems. Each sub-problem is solved\r\n    individually. Finally, sub-problems are combined to form the final solution.\r\n  </p>\r\n  <p>\r\n    Using the Divide and Conquer technique, we divide a problem into subproblems.\r\n    When the solution to each subproblem is ready, we 'combine' the results from the\r\n    subproblems to solve the main problem.\r\n  </p>\r\n\r\n  <p>\r\n    Suppose we had to sort an array <em>A</em>. A subproblem would be to sort a sub-section of\r\n    this array starting at index <em>p</em> and ending at index <em>r</em>, denoted as <em>A[p..r]</em>.\r\n  </p>\r\n\r\n  <p>\r\n    If <em>q</em> is the half-way point between <em>p</em> and <em>r</em>, then we can split the subarray <em>A[p..r]</em> into two\r\n    arrays <em>A[p..q]</em> and <em>A[q+1, r]</em>.\r\n  </p>\r\n  <p>\r\n    In the conquer step, we try to sort both the subarrays <em>A[p..q]</em> and <em>A[q+1, r]</em>. If we haven't yet reached the base case,\r\n    we again divide both these subarrays and try to sort them.\r\n  </p>\r\n  <p>\r\n    When the conquer step reaches the base step and we get two sorted subarrays <em>A[p..q]</em>\r\n    and <em>A[q+1, r]</em> for array <em>A[p..r]</em>, we combine the results by creating\r\n    a sorted array <em>A[p..r]</em> from two sorted subarrays <em>A[p..q]</em> and <em>A[q+1, r]</em>.\r\n  </p>\r\n  <p>\r\n    Press play to sort the elements\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    In sorting n objects, merge sort has an average and worst-case performance of <em>O(n log n)</em>.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {SimulationNode} from '../../basics/simulation-node';\nimport {SimulationArray} from './simulation-array';\n\nexport class ArrayCell {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  id: number;\n  node?: SimulationNode;\n  hoveringNode?: SimulationNode;\n  parent: SimulationArray;\n  isMouseOver = false;\n  defaultColor = '#E2E8CE';\n  color = '#E2E8CE';\n  rx = 25;\n  ry = 25;\n\n  constructor(parent: SimulationArray, x: number, y: number, width: number, height: number, id: number) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.id = id;\n  }\n\n  addNode(node: SimulationNode): void {\n    this.node = node;\n    this.hoveringNode = node;\n    node.lockedGrid = this;\n    node.hoveringGrid = this;\n    node.fx = this.parent.x + this.x + this.width / 2;\n    node.fy = this.height / 2 + this.parent.y;\n    node.pointerEvents = true;\n    node.noCollision = true;\n    node.nodeOrder = 2;\n    node.x = this.parent.x + this.x + this.width / 2;\n    node.y = this.height / 2 + this.parent.y;\n    this.parent.sorted = false;\n    this.parent.size++;\n  }\n\n  removeNode(): SimulationNode | null {\n    if (!this.node) {\n      return null;\n    }\n    const node = this.node;\n    node.lockedGrid = undefined;\n    node.hoveringGrid = undefined;\n    this.node = undefined;\n    this.hoveringNode = undefined;\n    node.fx = undefined;\n    node.fy = undefined;\n    node.nodeOrder = 1;\n    node.noCollision = false;\n    this.parent.sorted = false;\n    this.parent.size--;\n    return node;\n  }\n\n  toString(): string {\n    return `[${this.id}]`;\n  }\n\n  setDefaultColor(color: string): void {\n    this.defaultColor = color;\n  }\n\n  highlight(color: string): void {\n    this.color = color;\n  }\n\n  resetColor(): string {\n    this.color = this.defaultColor;\n    return this.color;\n  }\n\n  get absoluteX(): number {\n    return this.parent.x + this.x + this.width / 2;\n  }\n\n  get absoluteY(): number {\n    return this.parent.y + this.y + this.height / 2;\n  }\n}\n","import {Scenario} from '../app/core/simulation/scenario';\r\nimport arrayScenario from './arrays/array-scenario';\r\nimport stackQueueScenario from './stack-queue/stack-queue-scenario';\r\nimport linkedListScenario from './linked-list/linked-list-scenario';\r\nimport heapScenario from './heap/heap-scenario';\r\nimport bstScenario from './binary-search-tree/bst-scenario';\r\nimport rbScenario from './rb-tree/rb-scenario';\r\nimport sortScenario from './sort/sort-scenario';\r\n\r\nexport const scenarios: Scenario[] = [\r\n  arrayScenario,\r\n  linkedListScenario,\r\n  stackQueueScenario,\r\n  sortScenario,\r\n  heapScenario,\r\n  bstScenario,\r\n  rbScenario\r\n];\r\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport contextMenu, {ContextMenuFn, MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\nimport {BinarySearchTree} from '../../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {BstCellMouse} from './bst-cell-mouse';\r\n\r\nexport class BstMouse implements MouseHelper<BinarySearchTree> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  contextMenu(d: BinarySearchTree, i: number, trees: d3Element[] | ArrayLike<d3Element>): void {\r\n    const menu = [\r\n      {\r\n        title: 'Change name',\r\n        action: async (elm: BinarySearchTree) => {\r\n          elm.getRoot().setDefaultDescriptor(await this.simulation.prompt('New name'));\r\n        }\r\n      },\r\n      {\r\n        // divider\r\n        divider: true\r\n      },\r\n      {\r\n        title: 'Find',\r\n        disabled: !d.isValid,\r\n        action: async (bst: BinarySearchTree) => {\r\n          const newValue = await this.simulation.prompt('Which value to find');\r\n\r\n          const parsed = parseFloat(newValue);\r\n\r\n          if (isNaN(parsed)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          await bst.find(parsed);\r\n        }\r\n      },\r\n      {\r\n        title: 'Insert',\r\n        disabled: !d.isValid,\r\n        action: async (bst: BinarySearchTree) => {\r\n          const newValue = parseFloat(await this.simulation.prompt('Which value to insert'));\r\n          if (isNaN(newValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n          const node = new SimulationNode(newValue, -1, bst.x, bst.y - 150);\r\n          this.simulation.nodeHandler.add(node);\r\n          await bst.insert(node);\r\n        }\r\n      },\r\n      {\r\n        title: 'Delete',\r\n        disabled: !d.isValid,\r\n        action: async (bst: BinarySearchTree) => {\r\n          const deleteValue = parseFloat(await this.simulation.prompt('Which value to delete'));\r\n          if (isNaN(deleteValue)) {\r\n            alert('Value invalid');\r\n            return;\r\n          }\r\n\r\n          await bst.delete(deleteValue);\r\n        }\r\n      },\r\n      {\r\n        title: 'Info log',\r\n        action: async (elm: BinarySearchTree) => {\r\n          console.log(elm);\r\n        }\r\n      }\r\n    ];\r\n\r\n    if (!d.isValid) {\r\n      menu.push(\r\n        {\r\n          divider: true\r\n        },\r\n        {\r\n          title: 'Fix tree',\r\n          action: async (bst: BinarySearchTree) => {\r\n            await bst.fix();\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    contextMenu(menu)(d, i);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, BinarySearchTree, any, any>):\r\n    d3.Selection<d3.BaseType, BinarySearchTree, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      // .on('mouseover', (d: BinarySearchTree, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, arrays))\r\n      // .on('mouseout', (d: BinarySearchTree, i: number, arrays: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, arrays))\r\n      .on('contextmenu', ((d: BinarySearchTree, i: number, trees: d3Element[] | ArrayLike<d3Element>) => this.contextMenu(d, i, trees)));\r\n    return element;\r\n  }\r\n}\r\n","import {Sort} from './sort';\r\nimport {SimulationArray} from './simulation-array';\r\nimport {ArrayCell} from './array-cell';\r\n\r\nexport class MergeSort implements Sort {\r\n  async sort(arr: SimulationArray): Promise<void> {\r\n    await this.mergeSort(arr, arr.data.slice(0, arr.size));\r\n  }\r\n\r\n  async mergeSort(arr: SimulationArray, data: ArrayCell[]): Promise<void> {\r\n    if (data.length > 1) {\r\n      const mid = Math.floor(data.length / 2);\r\n\r\n      data.forEach(c => c.highlight('#fd8b28'));\r\n      await new Promise(r => setTimeout(r, 1200));\r\n      data.forEach(c => c.resetColor());\r\n      await new Promise(r => setTimeout(r, 600));\r\n\r\n      const left = data.slice(0, mid);\r\n      const right = data.slice(mid);\r\n\r\n      await this.mergeSort(arr, left);\r\n      await this.mergeSort(arr, right);\r\n\r\n      let i = 0;\r\n      let j = 0;\r\n      let k = 0;\r\n\r\n      left.forEach(c => c.highlight('#fde828'));\r\n      // left.forEach(c => c.resetColor());\r\n\r\n      right.forEach(c => c.highlight('#ff5858'));\r\n      // await new Promise(r => setTimeout(r, 1200));\r\n      // right.forEach(c => c.resetColor());\r\n\r\n      const leftNodes = left.map(lCell => {\r\n        const node = lCell.removeNode();\r\n        node.setTarget(lCell.absoluteX - 50, lCell.absoluteY + 100);\r\n        return node;\r\n      });\r\n\r\n      const rightNodes = right.map(rCell => {\r\n        const node = rCell.removeNode();\r\n        node.setTarget(rCell.absoluteX + 50, rCell.absoluteY + 100);\r\n        return node;\r\n      });\r\n      await new Promise(r => setTimeout(r, 1200));\r\n\r\n      while (i < leftNodes.length && j < rightNodes.length) {\r\n        if (leftNodes[i].value < rightNodes[j].value) {\r\n          leftNodes[i].setTarget(data[k].absoluteX, data[k].absoluteY);\r\n          data[k].highlight('#98dc73');\r\n          await new Promise(r => setTimeout(r, 1200));\r\n          data[k].addNode(leftNodes[i]);\r\n          ++i;\r\n        } else {\r\n          rightNodes[j].setTarget(data[k].absoluteX, data[k].absoluteY);\r\n          data[k].highlight('#98dc73');\r\n          await new Promise(r => setTimeout(r, 1200));\r\n          data[k].addNode(rightNodes[j]);\r\n          ++j;\r\n        }\r\n        ++k;\r\n      }\r\n\r\n      while (i < left.length) {\r\n        leftNodes[i].setTarget(data[k].absoluteX, data[k].absoluteY);\r\n        data[k].highlight('#98dc73');\r\n        await new Promise(r => setTimeout(r, 1200));\r\n        data[k].addNode(leftNodes[i]);\r\n        ++i;\r\n        ++k;\r\n      }\r\n\r\n      while (j < right.length) {\r\n        rightNodes[j].setTarget(data[k].absoluteX, data[k].absoluteY);\r\n        data[k].highlight('#98dc73');\r\n        await new Promise(r => setTimeout(r, 1200));\r\n        data[k].addNode(rightNodes[j]);\r\n        ++j;\r\n        ++k;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import {SimulationGraph} from '../simulation-graph';\r\nimport {BstCell} from '../bst-cell';\r\nimport {SimulationNode} from '../../../basics/simulation-node';\r\nimport {SimulationLink} from '../../../basics/simulation-link';\r\n\r\nexport interface Reference {\r\n  prev: number | undefined;\r\n  next: number | undefined;\r\n}\r\n\r\nexport class LinkedList extends SimulationGraph {\r\n\r\n  linkDistance = 150;\r\n  double: boolean;\r\n  pointers: { [id: number]: Reference} = {};\r\n  constructor(id: number, x: number, y: number, double = false) {\r\n    super(id, x, y);\r\n    this.double = double;\r\n  }\r\n\r\n  init(): void {\r\n    const head = new BstCell(this, -1, this.x, this.y, 'Head');\r\n    head.isRoot = true;\r\n    this.addCell(head, null);\r\n    const tail = new BstCell(this, -2, this.x, this.y, 'Tail');\r\n    this.addCell(tail, head);\r\n  }\r\n\r\n  addCell(cell: BstCell, predecessor: BstCell | null): void {\r\n    this.data.push(cell);\r\n    this.pointers[cell.id] = {next: undefined, prev: undefined};\r\n    if (predecessor) {\r\n      const successor = this.getSuccessor(predecessor);\r\n\r\n      this.pointers[predecessor.id].next = cell.id;\r\n      if (successor) {\r\n        this.pointers[cell.id].next = successor.id;\r\n        this.linkHelper.removeLink(predecessor, successor);\r\n        this.linkHelper.addLink(cell, successor, this.double ? -20 : 0);\r\n      }\r\n      this.linkHelper.addLink(predecessor, cell, this.double ? -20 : 0);\r\n      if (this.double) {\r\n        this.pointers[cell.id].prev = predecessor.id;\r\n        if (successor) {\r\n          this.pointers[successor.id].prev = cell.id;\r\n          this.linkHelper.removeLink(successor, predecessor);\r\n          this.linkHelper.addLink(successor, cell, 20);\r\n        }\r\n        this.linkHelper.addLink(cell, predecessor, 20);\r\n      } else if (successor && successor.id === -2) {\r\n        this.pointers[successor.id].prev = cell.id;\r\n      } else if (cell.id === -2) {\r\n        this.pointers[cell.id].prev = predecessor.id;\r\n      }\r\n    }\r\n    this.alignForces();\r\n  }\r\n\r\n  async popFirst(animate = true): Promise<void> {\r\n    const head = this.getHead();\r\n    const toDelete = this.getSuccessor(head);\r\n    if (toDelete.id === -2) {\r\n      return;\r\n    }\r\n    const node = toDelete.removeNode();\r\n    node.setTarget(this.x, this.y - 200);\r\n    await this.deleteCell(toDelete, head);\r\n    this.alignForces();\r\n  }\r\n\r\n  async popLast(animate = true): Promise<void> {\r\n    const tail = this.getTail();\r\n    const toDelete = this.getPredecessor(tail);\r\n    if (toDelete.id === -2) {\r\n      return;\r\n    }\r\n    const node = toDelete.removeNode();\r\n    node.setTarget(this.x, this.y - 200);\r\n    const predecessor = await this.findPredecessor(toDelete, animate);\r\n    await this.deleteCell(toDelete, predecessor);\r\n    this.alignForces();\r\n  }\r\n\r\n  async delete(index: number, animate = true): Promise<void> {\r\n    if (index > this.data.length - 2 || index < 0) {\r\n      throw new Error('Invalid index');\r\n    }\r\n    let predecessor = this.getHead();\r\n    let cell = this.getSuccessor(predecessor);\r\n\r\n    for (let i = 0; i < index; ++i) {\r\n      if (this.double && predecessor) {\r\n        predecessor.highlight('#98dc73');\r\n      }\r\n      cell.highlight('#FF5A5A94');\r\n      if (animate) {\r\n        await new Promise(r => setTimeout(r, 600));\r\n      }\r\n      if (predecessor) {\r\n        predecessor.resetColor();\r\n      }\r\n      cell.resetColor();\r\n      predecessor = cell;\r\n      cell = this.getSuccessor(cell);\r\n    }\r\n\r\n    if (this.double) {\r\n      predecessor = this.getPredecessor(cell);\r\n      predecessor.highlight('#98dc73');\r\n    }\r\n    const node = cell.removeNode();\r\n    node.setTarget(this.x, this.y - 200);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    predecessor.resetColor();\r\n    await this.deleteCell(cell, predecessor);\r\n    this.alignForces();\r\n  }\r\n\r\n  async deleteCell(cell: BstCell, predecessor: BstCell): Promise<void> {\r\n    const deletionIndex = this.data.findIndex(c => c.id === cell.id);\r\n    this.data.splice(deletionIndex, 1);\r\n    const successor = this.getSuccessor(cell);\r\n    this.pointers[predecessor.id].next = successor.id;\r\n    this.linkHelper.removeLink(predecessor, cell);\r\n    this.linkHelper.removeLink(cell, successor);\r\n    this.linkHelper.addLink(predecessor, successor, this.double ? -20 : 0);\r\n    if (this.double) {\r\n      this.pointers[successor.id].prev = predecessor.id;\r\n      this.linkHelper.removeLink(cell, predecessor);\r\n      this.linkHelper.removeLink(successor, cell);\r\n      this.linkHelper.addLink(successor, predecessor, 20);\r\n    } else if (successor.id === -2) {\r\n      this.pointers[successor.id].prev = predecessor.id;\r\n    }\r\n  }\r\n\r\n  alignForces(): void {\r\n    const head = this.getHead();\r\n    let predecessor = head;\r\n    predecessor.graphMoved(this.x, this.y);\r\n    let successor = this.getSuccessor(head);\r\n    while (successor) {\r\n      successor.graphMoved(predecessor.graphX + this.linkDistance, predecessor.graphY);\r\n      predecessor = successor;\r\n      successor = this.getSuccessor(successor);\r\n    }\r\n  }\r\n\r\n  async prepend(d: SimulationNode, animate = true): Promise<void> {\r\n    const head = this.getHead();\r\n    d.setTarget(head.x, head.y);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    await this.addToHead(d, head, animate);\r\n  }\r\n\r\n  async append(d: SimulationNode, animate = true): Promise<void> {\r\n    const tail = this.getTail();\r\n    d.setTarget(tail.x, tail.y);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    await this.addToTail(d, tail, animate);\r\n  }\r\n\r\n  async insert(d: SimulationNode, index: number, animate = true): Promise<void> {\r\n    if (index > this.data.length - 2 || index < 0) {\r\n      throw new Error('Invalid index');\r\n    }\r\n    let startingCell = this.getHead();\r\n    for (let i = 0; i < index; ++i) {\r\n      startingCell.highlight('#98dc73');\r\n      d.setTarget(startingCell.x, startingCell.y - 200);\r\n      if (animate) {\r\n        await new Promise(r => setTimeout(r, 600));\r\n      }\r\n      startingCell.resetColor();\r\n      startingCell = this.getSuccessor(startingCell);\r\n      if (animate) {\r\n        await new Promise(r => setTimeout(r, 600));\r\n      }\r\n    }\r\n\r\n    startingCell.highlight('#98dc73');\r\n    d.setTarget(startingCell.x + this.linkDistance / 2, startingCell.y - 60);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    startingCell.resetColor();\r\n    const newCell = new BstCell(this, this.maxId++, startingCell.x, startingCell.y);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 300));\r\n    }\r\n    await this.addCell(newCell, startingCell);\r\n    newCell.setNode(d);\r\n  }\r\n\r\n  async add(d: SimulationNode, addingCell: BstCell): Promise<void> {\r\n    if (addingCell.id === -1) {\r\n      await this.addToHead(d, addingCell);\r\n    } else if (addingCell.id === -2) {\r\n      await this.addToTail(d, addingCell);\r\n    }\r\n  }\r\n\r\n  async addToHead(d: SimulationNode, headCell: BstCell, animate = true): Promise<void> {\r\n    headCell.setNode(d);\r\n    d.lockedPlaceholder = headCell;\r\n    let nextCell = new BstCell(this, this.maxId++, headCell.x, headCell.y);\r\n    this.addCell(nextCell, headCell);\r\n    this.alignForces();\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 300));\r\n    }\r\n    nextCell = this.getSuccessor(headCell);\r\n    await this.passNode(d, headCell, nextCell, animate);\r\n  }\r\n\r\n  async addToTail(d: SimulationNode, tailCell: BstCell, animate = true): Promise<void> {\r\n    tailCell.setNode(d);\r\n    d.lockedPlaceholder = tailCell;\r\n    const predecessor = this.getPredecessor(tailCell);\r\n    let previousCell = new BstCell(this, this.maxId++, tailCell.x, tailCell.y);\r\n    this.addCell(previousCell, predecessor);\r\n    this.alignForces();\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 300));\r\n    }\r\n    previousCell = this.getPredecessor(tailCell);\r\n    await this.passNode(d, tailCell, previousCell, animate);\r\n  }\r\n\r\n  async passNode(d: SimulationNode, source: BstCell, target: BstCell, animate = true): Promise<void> {\r\n    d = source.removeNode();\r\n    d.setTarget(source.x, source.y - 100);\r\n    d.setTarget(target.x, target.y);\r\n    if (animate) {\r\n      await new Promise(r => setTimeout(r, 600));\r\n    }\r\n    target.setNode(d);\r\n    d.lockedPlaceholder = target;\r\n  }\r\n\r\n  /**\r\n   * Sets horizontal and vertical position of the linked list.\r\n   * @param x - Horizontal position.\r\n   * @param y - Vertical position.\r\n   */\r\n  setPosition(x: number, y: number): void {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    this.alignForces();\r\n  }\r\n\r\n  /**\r\n   * Moves the whole tree if the cell is head, otherwise\r\n   * returns the cell to its previous position\r\n   * @param cell - Moved cell.\r\n   * @param xPos - Horizontal position of the cell.\r\n   * @param yPos - Vertical position of the cell.\r\n   */\r\n  moveCell(cell: BstCell, xPos: number, yPos: number): void {\r\n    if (cell.isRoot) {\r\n      this.setPosition(xPos, yPos);\r\n      return;\r\n    }\r\n    else {\r\n      cell.setTarget(cell.graphX, cell.graphY);\r\n      return;\r\n    }\r\n  }\r\n\r\n  protected getSuccessor(cell: BstCell): BstCell | undefined {\r\n    if (!cell) {\r\n      return undefined;\r\n    }\r\n    const successorId = this.pointers[cell.id].next;\r\n    if (successorId === undefined) {\r\n      return undefined;\r\n    }\r\n    return this.data.find((c: BstCell) => c.id === successorId);\r\n  }\r\n\r\n  async findPredecessor(cell: BstCell, animate = true): Promise<BstCell | undefined> {\r\n    if (cell.id === -1) {\r\n      return undefined;\r\n    } else if (this.double || cell.id === -2) {\r\n      const pred = this.getPredecessor(cell);\r\n      pred.highlight('#98dc73');\r\n      if (animate) {\r\n        await new Promise(r => setTimeout(r, 600));\r\n      }\r\n      pred.resetColor();\r\n      return pred;\r\n    }\r\n    let predecessor = this.getHead();\r\n    while (predecessor) {\r\n      const potentialCell = this.getSuccessor(predecessor);\r\n      predecessor.highlight('#98dc73');\r\n      if (animate) {\r\n        await new Promise(r => setTimeout(r, 600));\r\n      }\r\n      predecessor.resetColor();\r\n\r\n      if (potentialCell.id === cell.id) {\r\n        return predecessor;\r\n      }\r\n      predecessor = potentialCell;\r\n    }\r\n  }\r\n\r\n  protected getPredecessor(cell: BstCell): BstCell | undefined {\r\n    if (!cell) {\r\n      return undefined;\r\n    }\r\n    if (this.double || cell.id === -2) {\r\n      const predecessorId = this.pointers[cell.id].prev;\r\n      if (predecessorId === undefined) {\r\n        return undefined;\r\n      }\r\n      return this.data.find((c: BstCell) => c.id === predecessorId);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected getHead(): BstCell {\r\n    return this.getCellById(-1);\r\n  }\r\n\r\n  protected getTail(): BstCell {\r\n    return this.getCellById(-2);\r\n  }\r\n\r\n  protected getCellById(id: number): BstCell | undefined {\r\n    return this.data.find((c: BstCell) => c.id === id);\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport heapScenario from '../heap-scenario';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\n\r\nexport class HeapScene implements Scene {\r\n  id = 1;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    const heap = simulation.objectFactory.create('heap', 0, 0) as Heap;\r\n    simulation.heapHandler.add(heap);\r\n\r\n    for (const node of nodes) {\r\n      await heap.insert(node, false);\r\n    }\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Heap</h1>\r\n  <p>\r\n    Heap is a type of <em>complete binary tree</em>.\r\n  </p>\r\n  <p>\r\n    <em>Binary</em> means that each node has at most two children nodes, whereas\r\n    <em>complete</em> means that every node (except root and rightmost leaf) must have\r\n    a sibling.\r\n  </p>\r\n  <p>\r\n    The tree on the right-hand side is a such a complete binary tree. Besides being\r\n    complete and binary, heap has some other properties:\r\n  </p>\r\n  <ul>\r\n    <li>\r\n        In a max heap, children contain value which is lower than their parent's value.\r\n    </li>\r\n    <li>\r\n        In a <em>min heap</em>, children contain value which is higher than their parent's value.\r\n        That means the root is holding the minimum value in the heap.\r\n    </li>\r\n  </ul>\r\n  <small>Heap on the right side is a min-heap, right?</small>\r\n  <p>\r\n    Press next to see how that minimum value is extracted :D\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {SimulationLink} from '../basics/simulation-link';\r\nimport {BstCell} from '../structures/tree/bst-cell';\r\n\r\nexport class LinkHelper {\r\n  links: SimulationLink[] = [];\r\n\r\n  addLink(source: BstCell, target: BstCell, yDisplacement = 0): SimulationLink {\r\n    const link = new SimulationLink(source, target, yDisplacement);\r\n    this.links.push(link);\r\n    return link;\r\n  }\r\n\r\n  removeLink(source: BstCell, target: BstCell): void {\r\n    if (!source || !target) {\r\n      return;\r\n    }\r\n    const deletionIndex = this.links.findIndex((sl: SimulationLink) => sl.source.id === source.id && sl.target.id === target.id);\r\n    if (deletionIndex !== -1) {\r\n      this.links.splice(deletionIndex, 1);\r\n    }\r\n  }\r\n\r\n  detachCompletely(target: BstCell): void {\r\n    this.links = this.links.filter((sl: SimulationLink) => sl.source !== target && sl.target !== target);\r\n  }\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {SimulationQueue} from '../../../app/core/simulation/structures/array/simulation-queue';\r\n\r\nexport class Dequeue implements Scene {\r\n  id = 5;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  queue: SimulationQueue;\r\n  index = -1;\r\n  elements = '';\r\n  queueSize = -1;\r\n  firstValue = -1;\r\n  lastValue = -1;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.queue = simulation.objectFactory.create('queue', 0, 0, 10) as SimulationQueue;\r\n    simulation.arrayHandler.add(this.queue);\r\n\r\n    for (const node of nodes) {\r\n      await this.queue.enqueue(node, false);\r\n    }\r\n\r\n    this.firstValue = this.queue.left.node.value;\r\n    this.lastValue = this.queue.right.node.value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.queue.dequeue();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Queue - Dequeue operation</h1>\r\n  <p>\r\n    Take a look at that array on the right-hand side. That's the queue implementation.\r\n  </p>\r\n  <p>\r\n    The first element of the queue is <span style=\"color: #a0ff6f; font-weight: bold\">${this.firstValue}</span>,\r\n    and the last element is <span style=\"color: #ff9494; font-weight: bold\">${this.lastValue}</span>.\r\n  </p>\r\n  <p>\r\n    The operation that will be performed now is the <em>dequeue</em> operation,\r\n    which is another crucial operation used for queues.\r\n  </p>\r\n  <p>\r\n    In this configuration, dequeue is performed like a deletion of the first element from the array.\r\n    However, the difference between the default deletion for arrays and the dequeue operation\r\n    is that the empty space remains.\r\n  </p>\r\n  <p>\r\n    Let's see how an element is dequeued from this queue.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After successfully dequeueing the value ${this.firstValue}, the second element of the array\r\n    at the index [1] has became the first element of the queue.\r\n  </p>\r\n  <small>Notice that remaining elements were not moved to the left in order to fill the empty space.</small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Selection} from 'd3-selection';\nimport {SimulationNode} from '../../basics/simulation-node';\nimport {ArrayCell} from './array-cell';\nimport {SimulationNodeDatum} from 'd3-force';\nimport {Sort} from './sort';\nimport {Drawable} from '../../drawable';\n\nexport class SimulationArray implements SimulationNodeDatum, Drawable{\n\n  cellWidth = 100;\n  cellHeight = 100;\n\n  id: number;\n  capacity: number;\n  size = 0;\n  data: ArrayCell[];\n  x: number;\n  y: number;\n  z: number;\n  color: string;\n  descriptor: string;\n  sorting?: Sort;\n  sorted = false;\n  busy = false;\n\n  constructor(id: number, x: number, y: number, descriptor?: string) {\n    this.id = id;\n    this.cellWidth = 100;\n    this.cellWidth = 100;\n    this.data = [];\n    this.z = -2;\n    this.color = 'black';\n    this.x = x;\n    this.y = y;\n    this.descriptor = descriptor ?? `array${id}`;\n  }\n\n  add(nodes: SimulationNode[]): void {\n    nodes.forEach((n, i) => this.data[i].addNode(n));\n  }\n\n  nodeAt(i: number): SimulationNode {\n    if (i === this.data.length) {\n      return null;\n    }\n    if (this.data[i].node) {\n      return this.data[i].node;\n    }\n    else {\n      return this.nodeAt(i + 1);\n    }\n  }\n\n  setTransform(x: number, y: number): void {\n    this.x = x;\n    this.y = y;\n    this.data.filter(d => d.node).forEach((d) => {\n      d.node.move(this.x + d.x + d.width / 2, d.height / 2 + this.y);\n    });\n  }\n\n  private makeGrid(count: number): void {\n    let xpos = (this.cellWidth + this.cellWidth / 20) * this.data.length;\n\n    const newSize = this.data.length + count;\n\n    for (let column = this.data.length; column < newSize; column++) {\n      this.data.push(new ArrayCell(this, xpos, 0, this.cellWidth, this.cellHeight, column));\n      // increment the x position. I.e. move it over by 50 (width variable)\n      xpos += this.cellWidth + this.cellWidth / 20; // and a little bit of margin\n    }\n  }\n\n  setCapacity(size: number): void {\n    this.capacity = size;\n    if (size < this.data.length) {\n      for (let i = size ; i < this.data.length; i++)\n      {\n        if (!this.data[i].node) {\n          continue;\n        }\n        this.data[i].removeNode();\n      }\n      this.data = this.data.splice(0, size);\n    }\n    else {\n      this.makeGrid(size - this.data.length);\n    }\n  }\n\n  async linearSearch(value: number): Promise<void> {\n    for (let i = 0; i < this.capacity; ++i) {\n      const cell = this.data[i];\n      if (!cell.node) {\n        continue;\n      }\n\n      cell.highlight('#fdd828');\n      await new Promise(r => setTimeout(r, 600));\n      cell.resetColor();\n\n      if (cell.node.value === value) {\n        cell.highlight('#28fd5d');\n        cell.node.highlighted = true;\n        await new Promise(r => setTimeout(r, 1000));\n        cell.resetColor();\n        cell.node.highlighted = false;\n        return;\n      }\n    }\n\n    await new Promise(r => setTimeout(r, 300));\n    throw new Error('Element not found');\n  }\n\n  async binarySearch(value: number): Promise<void> {\n    if (!this.sorted) {\n      throw new Error('Array is not sorted');\n    }\n    let low = 0;\n    let high = this.size - 1;\n    while (low <= high) {\n      const mid = Math.floor((low + high) / 2);\n      const midCell = this.data[mid];\n      const lowCell = this.data[low];\n      const highCell = this.data[high];\n\n      midCell.highlight('#fdd828');\n      if (low !== high) {\n        lowCell.highlight('#48fd28');\n        highCell.highlight('#fd2828');\n      }\n      await new Promise(r => setTimeout(r, 1000));\n      midCell.resetColor();\n      lowCell.resetColor();\n      highCell.resetColor();\n\n      if (value === midCell.node.value) {\n        midCell.highlight('#fdd828');\n        midCell.node.highlighted = true;\n        await new Promise(r => setTimeout(r, 1000));\n        midCell.resetColor();\n        midCell.node.highlighted = false;\n        return;\n      } else if (value > midCell.node.value) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n    await new Promise(r => setTimeout(r, 300));\n    throw new Error('Element not found');\n  }\n\n  async deleteAt(index: number): Promise<SimulationNode> {\n    if (index >= this.data.length || !this.data[index].node) {\n      throw new Error('Incorrect index');\n    }\n\n    const node = this.data[index].removeNode();\n\n    node.setTarget(this.x - 100, this.y - 100);\n\n    await this.move(index, false);\n    return node;\n\n  }\n\n  async insertAt(node: SimulationNode, index: number, animate = true): Promise<void> {\n    if (index >= this.data.length) {\n      throw new Error('Incorrect index');\n    }\n\n    if (!!this.data[index].node) {\n      await this.move(index, true, animate);\n    }\n\n    node.cx = this.data[index].x + this.x + this.cellWidth / 2;\n    node.cy = this.data[index].y + this.y + this.cellHeight / 2;\n\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n    this.data[index].addNode(node);\n    if (animate) {\n      await new Promise(r => setTimeout(r, 300));\n    }\n  }\n\n  async move(index: number, forward: boolean, animate = true): Promise<void> {\n    let i = forward ? this.data.length - 1 : index + 1;\n    const step = forward ? 1 : -1;\n\n    while ((forward && i >= index) || (!forward && i < this.data.length)) {\n      if (!this.data[i].node) {\n        i -= step;\n        continue;\n      }\n\n      const node = this.data[i].removeNode();\n\n      if (i + step > this.data.length || i + step < 0) {\n        continue;\n      }\n\n      node.cx = this.data[i + step].x + this.x + this.cellWidth / 2;\n      node.cy = this.data[i + step].y + this.y + this.cellHeight / 2;\n      if (animate) {\n        await new Promise(r => setTimeout(r, 600));\n      }\n      this.data[i + step].addNode(node);\n      if (animate) {\n        await new Promise(r => setTimeout(r, 300));\n      }\n    }\n\n  }\n\n  async removeEmptySpaces(): Promise<void> {\n    for (let i = 0; i < this.size; ++i) {\n      if (!this.data[i].node) {\n        const currentCell = this.data[i];\n        const takenCell = await this.findFirstTaken(i + 1);\n        if (!takenCell) {\n          return;\n        }\n        const node = takenCell.removeNode();\n        node.setTarget(currentCell.absoluteX, currentCell.absoluteY - 100);\n        await new Promise(r => setTimeout(r, 600));\n        node.setTarget(currentCell.absoluteX, currentCell.absoluteY);\n        await new Promise(r => setTimeout(r, 600));\n        currentCell.addNode(node);\n      }\n    }\n  }\n\n  async findFirstTaken(index: number): Promise<ArrayCell | undefined> {\n    for (index; index < this.capacity; ++index) {\n      if (!!this.data[index].node) {\n        this.data[index].highlight('#08ff00');\n        await new Promise(r => setTimeout(r, 600));\n        this.data[index].resetColor();\n        return this.data[index];\n      }\n      this.data[index].highlight('#98dc73');\n      await new Promise(r => setTimeout(r, 600));\n      this.data[index].resetColor();\n    }\n\n    return undefined;\n  }\n\n  async sort(): Promise<void> {\n    if (!this.sorting) {\n      return;\n    }\n    await this.removeEmptySpaces();\n    await this.sorting.sort(this);\n    this.sorted = true;\n\n    await new Promise(r => setTimeout(r, 1800));\n\n    this.data.filter(d => !!d.node).forEach(d => d.resetColor());\n  }\n\n  async swapNodes(source: ArrayCell, destination: ArrayCell): Promise<void> {\n    if (!source.node || !destination.node) {\n      return;\n    }\n    const sourceNode = source.removeNode();\n    const dstNode = destination.removeNode();\n\n    const middleX = (destination.absoluteX + source.absoluteX) / 2;\n\n    sourceNode.setTarget(middleX, destination.absoluteY - 75);\n    dstNode.setTarget(middleX, source.absoluteY + 75);\n    await new Promise(r => setTimeout(r, 600));\n\n    sourceNode.setTarget(destination.absoluteX, destination.absoluteY);\n    dstNode.setTarget(source.absoluteX, source.absoluteY);\n    await new Promise(r => setTimeout(r, 600));\n\n    source.addNode(dstNode);\n    destination.addNode(sourceNode);\n  }\n\n  async moveNode(source: ArrayCell, destination: ArrayCell): Promise<void> {\n    if (!source.node || !!destination.node) {\n      return;\n    }\n\n    const middleX = (destination.absoluteX + source.absoluteX) / 2;\n\n    const sourceNode = source.removeNode();\n    sourceNode.setTarget(middleX, destination.absoluteY - 100);\n    await new Promise(r => setTimeout(r, 600));\n    sourceNode.setTarget(destination.absoluteX, destination.absoluteY);\n    await new Promise(r => setTimeout(r, 600));\n\n    destination.addNode(sourceNode);\n  }\n}\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {LinkedList} from '../../../app/core/simulation/structures/tree/linked-list/linked-list';\r\nimport linkedListScenario from '../linked-list-scenario';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\n\r\nexport class Append implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  list: LinkedList;\r\n  currentLast = -1;\r\n  newElement = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.list = simulation.objectFactory.create('singlyLinkedList', 0, 0) as LinkedList;\r\n    simulation.linkedListHandler.add(this.list);\r\n\r\n    for (const node of nodes) {\r\n      await this.list.append(node, false);\r\n    }\r\n    this.currentLast = nodes[nodes.length - 1].value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.newElement, -1, this.list.x, this.list.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n\r\n    await this.list.append(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Linked list - prepend</h1>\r\n  <p>\r\n    The data structure on the right-hand side is a singly linked list.\r\n  </p>\r\n  <p>\r\n    Now, let's see how to add an element with value ${this.newElement} to the end of a linked list.\r\n  </p>\r\n  <p>\r\n    Appending is performed as follows:\r\n  </p>\r\n  <ul>\r\n    <li>Get node referenced by <em>tail</em>;</li>\r\n    <li>Set the new node as its successor;</li>\r\n    <li>Set <em>tail's</em> reference to be the new node.</li>\r\n  </ul>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Node with value ${this.newElement} is now added to the linked list, it is referenced by and it\r\n    doesn't have a successor. However, it is referenced by both the node with value ${this.currentLast}\r\n    and <em>tail</em>.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\n\r\nexport class StartScene implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  setup(simulation: Simulation): void {\r\n    const array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(array);\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Sorting</h1>\r\n  <p>\r\n    Sorting represents a process of reordering elements of a data structure according\r\n    according to a predefined factor.\r\n  </p>\r\n  <p>\r\n    The importance of sorting lies in the fact that data searching can be optimized to\r\n    a very high level, if data is stored in a sorted manner. Sorting is also used to represent data in more readable formats.\r\n  </p>\r\n  <p>\r\n    Sorting algorithms covered in this section are:\r\n  </p>\r\n  <ul>\r\n    <li>Bubble sort;</li>\r\n    <li>Insertion sort;</li>\r\n    <li>Selection sort;</li>\r\n    <li>Merge sort;</li>\r\n    <li>Quick sort.</li>\r\n  </ul>\r\n  <p>\r\n    Let's get started :)\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {SimulationNode} from '../../../../basics/simulation-node';\nimport {BstCell} from '../../bst-cell';\nimport {BinarySearchTree} from '../binary-search-tree/binary-search-tree';\nimport {BstCellDrag} from '../../../../helpers/drag/bst-cell-drag';\nimport {SimulationLink} from '../../../../basics/simulation-link';\nimport {root} from 'rxjs/internal-compatibility';\nimport {BstCellDrawing} from '../../../../helpers/drawing/bst-cell-drawing';\n\nexport class AvlTree extends BinarySearchTree {\n\n  heights: { [cellId: number]: number; } = {};\n\n  constructor(id: number, x: number, y: number) {\n    super(id, x, y);\n  }\n\n  async add(d: SimulationNode, bstCell: BstCell, animate = true): Promise<void> {\n    await super.add(d, bstCell);\n    if (this.isValid) {\n      await this.checkBalance(bstCell, animate);\n    }\n  }\n\n  async delete(value: number, animate = true): Promise<[SimulationNode, BstCell | null, BstCell]> {\n    const [node, affectedCell, deletedCell] = await super.delete(value);\n\n    await this.checkBalance(affectedCell, animate);\n    return [node, affectedCell, deletedCell];\n  }\n\n\n  /**\n   * Updates the heights of the starting cell and all of its ancestors and checks if all nodes are balanced.\n   * If an unbalanced node shows up, performs operations of balancing.\n   * @param cell - The starting cell.\n   * @param animate\n   * @private\n   */\n  private async checkBalance(cell: BstCell, animate = true): Promise<void> {\n\n    while (!!cell) {\n      if (this.heights[cell.id] === undefined) {\n        this.setHeight(cell, 0);\n        [cell] = this.getParent(cell);\n        continue;\n      }\n      if (!cell.node) {\n        delete this.heights[cell.id];\n        [cell] = this.getParent(cell);\n        continue;\n      }\n      const leftChild = this.getLeftChild(cell);\n      const rightChild = this.getRightChild(cell);\n      const leftHeight = this.getHeight(leftChild);\n      const rightHeight = this.getHeight(rightChild);\n      this.setHeight(cell, 1 + Math.max(leftHeight, rightHeight));\n\n      const balance = leftHeight - rightHeight;\n\n      if (!cell.node) {\n        [cell] = this.getParent(cell);\n        continue;\n      }\n\n      if (balance > 1) {\n        const leftsLeft = this.getLeftChild(leftChild);\n        const leftsRight = this.getRightChild(leftChild);\n        const leftBalance = this.getHeight(leftsLeft) - this.getHeight(leftsRight);\n\n        if (leftBalance < 0) {\n          await this.leftRotation(leftChild, animate);\n          await this.rightRotation(cell, animate);\n        } else {\n          await this.rightRotation(cell, animate);\n        }\n      } else if (balance < -1) {\n        const rightsLeft = this.getLeftChild(rightChild);\n        const rightsRight = this.getRightChild(rightChild);\n        const rightBalance = this.getHeight(rightsLeft) - this.getHeight(rightsRight);\n\n        if (rightBalance > 0) {\n          await this.rightRotation(rightChild, animate);\n          await this.leftRotation(cell, animate);\n        } else {\n          await this.leftRotation(cell, animate);\n        }\n      }\n\n      [cell] = this.getParent(cell);\n    }\n  }\n\n  private async leftRotation(rotationRoot: BstCell, animate = true): Promise<void> {\n    const newRoot = this.getRightChild(rotationRoot);\n    const t = this.getLeftChild(newRoot);\n    // Perform rotation\n\n    this.linkHelper.removeLink(newRoot, t);\n    this.setRightChild(rotationRoot, t);\n    this.linkHelper.addLink(rotationRoot, t);\n\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    const [rootParent, childIndex] = this.getParent(rotationRoot);\n    this.detachParent(rotationRoot);\n    this.linkHelper.removeLink(rootParent, rotationRoot);\n    if (!rootParent) {\n      newRoot.isRoot = true;\n      newRoot.setDefaultDescriptor(rotationRoot.defaultDescriptor);\n      rotationRoot.setDefaultDescriptor(undefined);\n      rotationRoot.isRoot = false;\n    }\n    if (childIndex === 0) {\n      this.setLeftChild(rootParent, newRoot);\n    } else {\n      this.setRightChild(rootParent, newRoot);\n    }\n    if (!!rootParent) {\n      this.linkHelper.addLink(rootParent, newRoot);\n    }\n    // this.alignForces();\n    // if (animate) {\n    //   await new Promise(r => setTimeout(r, 600));\n    // }\n    this.linkHelper.removeLink(rotationRoot, newRoot);\n    this.setLeftChild(newRoot, rotationRoot);\n    this.linkHelper.addLink(newRoot, rotationRoot);\n\n    this.alignForces();\n    this.setHeight(rotationRoot, this.getUpdatedHeight(rotationRoot));\n    this.setHeight(newRoot, this.getUpdatedHeight(newRoot));\n\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n  }\n\n  private async rightRotation(rotationRoot: BstCell, animate = true): Promise<void> {\n    const newRoot = this.getLeftChild(rotationRoot);\n    const t = this.getRightChild(newRoot);\n    // Perform rotation\n\n    this.linkHelper.removeLink(newRoot, t);\n    this.setLeftChild(rotationRoot, t);\n    this.linkHelper.addLink(rotationRoot, t);\n    this.alignForces();\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n\n    const [rootParent, childIndex] = this.getParent(rotationRoot);\n    this.detachParent(rotationRoot);\n    this.linkHelper.removeLink(rootParent, rotationRoot);\n    if (!rootParent) {\n      newRoot.isRoot = true;\n      newRoot.setDefaultDescriptor(rotationRoot.defaultDescriptor);\n      rotationRoot.setDefaultDescriptor(undefined);\n      rotationRoot.isRoot = false;\n    }\n    if (childIndex === 0) {\n      this.setLeftChild(rootParent, newRoot);\n    } else {\n      this.setRightChild(rootParent, newRoot);\n    }\n    if (!!rootParent) {\n      this.linkHelper.addLink(rootParent, newRoot);\n    }\n    this.linkHelper.removeLink(rotationRoot, newRoot);\n    this.setRightChild(newRoot, rotationRoot);\n    this.linkHelper.addLink(newRoot, rotationRoot);\n    this.alignForces();\n\n    this.setHeight(rotationRoot, this.getUpdatedHeight(rotationRoot));\n    this.setHeight(newRoot, this.getUpdatedHeight(newRoot));\n\n    if (animate) {\n      await new Promise(r => setTimeout(r, 600));\n    }\n  }\n\n  private getUpdatedHeight(cell: BstCell): number {\n    const leftChild = this.getLeftChild(cell);\n    const rightChild = this.getRightChild(cell);\n    const leftHeight = this.getHeight(leftChild);\n    const rightHeight = this.getHeight(rightChild);\n\n    return 1 + Math.max(leftHeight, rightHeight);\n  }\n\n  private getHeight(cell: BstCell): number {\n    const height: number | undefined = !!cell ? this.heights[cell.id] : -1;\n    return height ?? -1;\n  }\n\n  private setHeight(cell: BstCell, height: number): void {\n    if (!cell) {\n      return;\n    }\n    this.heights[cell.id] = height;\n    cell.addToDescriptor(`h=${height}`);\n  }\n}\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class DeletionMiddle implements Scene {\r\n  id = 6;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  index = -1;\r\n  arrSize = -1;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    this.index = Math.floor(this.array.size / 2);\r\n    this.arrElement = this.array.data[this.index].node.value;\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.deleteAt(this.index);\r\n  }\r\n\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion from a given index of an array</h1>\r\n  <p>\r\n    Look at the array on the right-hand side. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    What would happen if we wanted to delete an element from the index [${this.index}] of this array.\r\n  </p>\r\n  <p>\r\n    What will happen to an empty space we're leaving after deletion of ${this.arrElement}?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After removing ${this.arrElement} from the array, that empty space from [${this.index}]\r\n    had to be gone.\r\n  </p>\r\n  <p>\r\n    That was managed by moving all the elements starting from [${this.index + 1}]\r\n    one place to the left.\r\n  </p>\r\n  `;\r\n  }\r\n}\r\n","import {Simulation} from '../../simulation';\r\nimport {MouseHelper} from './mouse-helper';\r\nimport * as d3 from 'd3';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {RedBlackTree} from '../../structures/tree/binary-tree/red-black-tree/red-black-tree';\r\nimport contextMenu from 'd3-context-menu';\r\nimport {AvlTree} from '../../structures/tree/binary-tree/avl-tree/avl-tree';\r\nimport {BinarySearchTree} from '../../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {SimulationStack} from '../../structures/array/simulation-stack';\r\nimport {SimulationQueue} from '../../structures/array/simulation-queue';\r\nexport class SvgMouse implements MouseHelper<SVGElement> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  contextMenu(): void {\r\n    const x = d3.event.x;\r\n    const y = d3.event.y;\r\n\r\n    const menu = [\r\n      {\r\n        title: 'Node',\r\n        action: async () => {\r\n          const newValue = await this.simulation.prompt('Value?');\r\n          const parsed = parseFloat(newValue);\r\n\r\n          if (isNaN(parsed)) {\r\n            return;\r\n          }\r\n          const node = new SimulationNode(parsed, -1, x, y);\r\n          this.simulation.nodeHandler.add(node);\r\n        }\r\n      },\r\n      {\r\n        title: 'Array',\r\n        action: async () => {\r\n          const size = await this.simulation.prompt('Size?');\r\n\r\n          const parsed = parseFloat(size);\r\n          if (isNaN(parsed)) {\r\n            return;\r\n          }\r\n          const arr = this.simulation.objectFactory.create('array', x, y, parsed) as SimulationArray;\r\n          this.simulation.arrayHandler.add(arr);\r\n        }\r\n      },\r\n      {\r\n        title: 'Stack',\r\n        action: async () => {\r\n          const size = await this.simulation.prompt('Size?');\r\n          const parsed = parseFloat(size);\r\n          if (isNaN(parsed)) {\r\n            return;\r\n          }\r\n          const stack = this.simulation.objectFactory.create('stack', x, y, parsed) as SimulationStack;\r\n          stack.descriptor = `stack ${this.simulation.arrayHandler.maxId}`;\r\n          this.simulation.arrayHandler.add(stack);\r\n        }\r\n      },\r\n      {\r\n        title: 'Queue',\r\n        action: async () => {\r\n          const size = await this.simulation.prompt('Size?');\r\n\r\n          const parsed = parseFloat(size);\r\n          if (isNaN(parsed)) {\r\n            return;\r\n          }\r\n          const queue = this.simulation.objectFactory.create('queue', x, y, parsed) as SimulationQueue;\r\n          queue.descriptor = `queue ${this.simulation.arrayHandler.maxId}`;\r\n\r\n          this.simulation.arrayHandler.add(queue);\r\n        }\r\n      },\r\n      {\r\n        title: 'Binary search tree',\r\n        action: async () => {\r\n          const bst = this.simulation.objectFactory.create('bst', x, y) as BinarySearchTree;\r\n          this.simulation.bstHandler.add(bst);\r\n        }\r\n      },\r\n      {\r\n        title: 'Red-black tree',\r\n        action: async () => {\r\n          const rbTree = this.simulation.objectFactory.create('rb', x, y) as RedBlackTree;\r\n          this.simulation.bstHandler.add(rbTree);\r\n        }\r\n      },\r\n      {\r\n        title: 'AVL tree',\r\n        action: async () => {\r\n          const avlTree = this.simulation.objectFactory.create('avl', x, y) as AvlTree;\r\n          this.simulation.bstHandler.add(avlTree);\r\n        }\r\n      }\r\n    ];\r\n    if (!this.simulation.interactable) {\r\n      return;\r\n    }\r\n\r\n    contextMenu(menu)(undefined, undefined);\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, any, any, any>): d3.Selection<d3.BaseType, any, any, any> {\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    element\r\n      .on('contextmenu', () => this.contextMenu());\r\n    return element;\r\n  }\r\n}\r\n","import {SimulationNodeDatum} from 'd3-force';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {SimulationArray} from '../array/simulation-array';\r\nimport {BinarySearchTree} from './binary-tree/binary-search-tree/binary-search-tree';\r\nimport {Binary} from '@angular/compiler';\r\nimport {SimulationLink} from '../../basics/simulation-link';\r\nimport {SimulationGraph} from './simulation-graph';\r\n\r\nexport class BstCell implements SimulationNodeDatum {\r\n  radius = 50;\r\n\r\n  defaultColor = '#E2E8CE';\r\n  color = '#E2E8CE';\r\n  defaultDescriptor?: string;\r\n  additionalDescriptor?: string;\r\n  descriptor?: string;\r\n  descriptorColor = '#000000';\r\n  isRoot = false;\r\n  noCollision = false;\r\n  isMouseOver = false;\r\n  isValid = true;\r\n\r\n  id: number | undefined;\r\n  fx: number | null | undefined;\r\n  fy: number | null | undefined;\r\n  vx: number | undefined;\r\n  vy: number | undefined;\r\n  _x: number | undefined;\r\n  _y: number | undefined;\r\n  cx: number | undefined;\r\n  cy: number | undefined;\r\n  graphX: number | undefined;\r\n  graphY: number | undefined;\r\n\r\n  node?: SimulationNode;\r\n  hoveringNode?: SimulationNode;\r\n  graph: SimulationGraph;\r\n\r\n  constructor(tree: SimulationGraph, id: number, x: number, y: number, descriptor?: string) {\r\n    this.graph = tree;\r\n    this.cx = x;\r\n    this.cy = y;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.graphX = x;\r\n    this.graphY = y;\r\n    this.id = id;\r\n    this.setDefaultDescriptor(descriptor);\r\n  }\r\n\r\n  setTarget(x: number, y: number): void {\r\n    this.cx = x;\r\n    this.cy = y;\r\n  }\r\n\r\n  graphMoved(x: number, y: number): void {\r\n    this.setTarget(x, y);\r\n    this.graphX = x;\r\n    this.graphY = y;\r\n  }\r\n\r\n  fixedMove(x: number, y: number): void {\r\n    this.fx = x;\r\n    this.fy = y;\r\n  }\r\n\r\n  setNode(d: SimulationNode): void {\r\n    this.node = d;\r\n    this.node.fx = this.x;\r\n    this.node.fy = this.y;\r\n    this.node.noCollision = true;\r\n    this.node.pointerEvents = false;\r\n    this.node.nodeOrder = 2;\r\n    d.lockedPlaceholder = this;\r\n\r\n  }\r\n\r\n  removeNode(): SimulationNode {\r\n    const d = this.node;\r\n    if (!d) {\r\n      return null;\r\n    }\r\n    this.node = undefined;\r\n    d.fx = undefined;\r\n    d.fy = undefined;\r\n    d.noCollision = false;\r\n    d.pointerEvents = true;\r\n    d.hoveringPlaceholder = undefined;\r\n    d.lockedPlaceholder = undefined;\r\n    d.nodeOrder = 1;\r\n    return d;\r\n  }\r\n\r\n  setDefaultColor(color: string): void {\r\n    this.defaultColor = color;\r\n    this.color = color;\r\n  }\r\n\r\n  setDefaultDescriptor(descriptor: string | undefined): void {\r\n    this.defaultDescriptor = descriptor;\r\n    this.descriptor = `${this.defaultDescriptor ?? ''} ${this.additionalDescriptor ?? ''}`;\r\n  }\r\n\r\n  addToDescriptor(descriptor: string): void {\r\n    this.additionalDescriptor = descriptor;\r\n    this.descriptor = `${this.defaultDescriptor ?? ''} ${this.additionalDescriptor ?? ''}`;\r\n  }\r\n\r\n  highlight(color: string): void {\r\n    this.color = color;\r\n  }\r\n\r\n  resetColor(): string {\r\n    this.color = this.defaultColor;\r\n    return this.color;\r\n  }\r\n\r\n  get x(): number {\r\n    return this._x;\r\n  }\r\n\r\n  set x(val: number) {\r\n    this._x = val;\r\n    if (this.node) {\r\n      this.node.x = val;\r\n    }\r\n  }\r\n\r\n  get y(): number {\r\n    return this._y;\r\n  }\r\n\r\n  set y(val: number) {\r\n    this._y = val;\r\n    if (this.node) {\r\n      this.node.y = val;\r\n    }\r\n  }\r\n}\r\n","import {DrawingHelper} from './drawing-helper';\r\nimport * as d3 from 'd3';\r\nimport {LinkedList} from '../../structures/tree/linked-list/linked-list';\r\n\r\nexport class LinkedListDrawing implements DrawingHelper<LinkedList> {\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    const treeElement = enterElement.append('g')\r\n      .attr('class', 'linked-list');\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, LinkedList, any, any>): d3.Selection<d3.BaseType, LinkedList, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n}\r\n","import {DragHelper} from './drag-helper';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport * as d3 from 'd3';\r\nimport {Simulation} from '../../simulation';\r\n\r\nexport class ArrayDrag implements DragHelper<SimulationArray> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  dragStart(d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>): void {\r\n    d3.select(arrays[i]).style('cursor', 'grabbing');\r\n  }\r\n\r\n  dragging(d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>): void {\r\n    d.setTransform(d3.event.x, d3.event.y);\r\n  }\r\n\r\n  dragEnd(d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>): void {\r\n    d3.select(arrays[i]).style('cursor', null);\r\n  }\r\n\r\n  addDragInteraction(element: d3.Selection<d3.BaseType, SimulationArray, any, any>): d3.Selection<d3.BaseType, SimulationArray, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    const drag = d3.drag<Element, SimulationArray, unknown>()\r\n      .on('start', (d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>) => this.dragStart(d, i, arrays))\r\n      .on('drag', (d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>) => this.dragging(d, i, arrays))\r\n      .on('end', (d: SimulationArray, i: number, arrays: Element[] | ArrayLike<Element>) => this.dragEnd(d, i, arrays));\r\n\r\n    element.call(drag);\r\n\r\n    return element;\r\n  }\r\n\r\n}\r\n","import {SimulationQueue} from '../../structures/array/simulation-queue';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport {Simulation} from '../../simulation';\r\nimport {MenuItem} from 'd3-context-menu';\r\n\r\nexport const queueMenu = (simulation: Simulation): MenuItem[] => [\r\n  {\r\n    title: 'Change name',\r\n    action: async (elm: SimulationQueue) => {\r\n      elm.descriptor = await simulation.prompt('New name');\r\n    }\r\n  },\r\n  {\r\n    // divider\r\n    divider: true\r\n  },\r\n  {\r\n    title: 'Enqueue',\r\n    action: async (queue: SimulationQueue) => {\r\n      const newValue = parseFloat(await simulation.prompt('Which value to enqueue'));\r\n      if (isNaN(newValue)) {\r\n        alert('Value invalid');\r\n        return;\r\n      }\r\n      const node = new SimulationNode(newValue, -1, queue.x, queue.y - 200);\r\n      simulation.nodeHandler.add(node);\r\n      await queue.enqueue(node);\r\n    }\r\n  },\r\n  {\r\n    title: 'Dequeue',\r\n    action: async (queue: SimulationQueue) => {\r\n\r\n      await queue.dequeue();\r\n    }\r\n  }\r\n];\r\n","import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {Simulation} from '../simulation/simulation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlaygroundService {\n\n}\n","import {DrawingHelper} from './drawing-helper';\r\nimport {SimulationNode} from '../../basics/simulation-node';\r\nimport * as d3 from 'd3';\r\nimport contextMenu, {MenuItem} from 'd3-context-menu';\r\nimport {ColorProvider} from '../../providers/color-provider';\r\n\r\nexport class NodeDrawing implements DrawingHelper<SimulationNode> {\r\n\r\n  radius = 40;\r\n  colorProvider: ColorProvider;\r\n\r\n  constructor(colorProvider: ColorProvider) {\r\n    this.colorProvider = colorProvider;\r\n  }\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\r\n    const node = enterElement.append('g')\r\n      .attr('class', 'node')\r\n      .attr('transform', (d: SimulationNode) => `translate(${d.x}, ${d.y})`)\r\n      .attr('pointer-events', d => d.pointerEvents ? 'auto' : 'none');\r\n      // .call(\r\n      //   d3.drag()\r\n      //     .on('drag', (d, i, nodes) => this.nodeDragging(d as SimulationNode, i, nodes))\r\n      //     .on('end', (d, i, nodes) => this.nodeDragEnd(d as SimulationNode, i, nodes))\r\n      //     .on('start', (d, i, nodes) => this.nodeDragStart(d as SimulationNode, i, nodes))\r\n      // );\r\n\r\n    node\r\n      .append('circle')\r\n      .attr('class', 'node-circle')\r\n      // .on('mouseover', (d, i, nodes) => this.nodeMouseOver(d, i, nodes))\r\n      // .on('mouseout', (d, i, nodes) => this.nodeMouseOut(d, i, nodes))\r\n      // .on('contextmenu', contextMenu(this.getContextMenu()))\r\n      .attr('r', 0)\r\n      .attr('fill', (d: SimulationNode) => this.colorProvider.getNodeColor(d))\r\n      .style('stroke-width', (d: SimulationNode) => d.highlighted ? 5 : 0)\r\n      .style('stroke-dasharray', '5,3') // make the stroke dashed\r\n      .style('stroke', 'pink')\r\n      .style('stroke-opacity', (d: SimulationNode) => d.isPlaceholder ? 0.4 : 0)\r\n      .style('stroke-width', (d: SimulationNode) => d.isPlaceholder ? 5 : 0)\r\n      .style('stroke-dasharray', (d: SimulationNode) => d.isPlaceholder ? '10,3' : '0,0') // make the stroke dashed\r\n      .style('stroke', 'black')\r\n      .style('opacity', (d: SimulationNode) => d.isPlaceholder ? 0.8 : 1)\r\n      .style('cursor', (d: SimulationNode) => d.isInteractable ? 'pointer' : 'not-allowed')\r\n      .transition()\r\n      .duration(500)\r\n      .attr('r', this.radius);\r\n\r\n    node\r\n      .append('text')\r\n      .attr('class', 'circle-value')\r\n      .attr('dy', this.radius / 4)\r\n      .text(d => d.isValueVisible ? d.value : '')\r\n      .style('text-anchor', 'middle')\r\n      .attr('dx',  this.radius / 2.3)\r\n      .style('fill', '#E2E8CE')\r\n      .attr('pointer-events', 'none')\r\n      // check if number is visible. else hide the number\r\n      .attr('font-size', d => this.calculateFontSize(d.value.toString()))\r\n      // enter animation\r\n      .style('opacity', 0)\r\n      .transition()\r\n      .duration(500)\r\n      .style('opacity', 1);\r\n\r\n    node\r\n      .append('text')\r\n      .attr('class', 'circle-name')\r\n      .style('fill', 'black')\r\n      .attr('dx', (d) => d.isPlaceholder ? 0 : -40 / 2)\r\n      .attr('dy', (d) => d.isPlaceholder ? 40 / 8 : 40 / 4)\r\n      .style('text-anchor', 'middle')\r\n      .attr('pointer-events', 'none')\r\n      .attr('font-size', 0)\r\n      .raise()\r\n      .text(d => !d.isPlaceholder ? `#${d.id}` : 'null')\r\n      .transition()\r\n      .duration(500)\r\n      .attr('font-size', 16);\r\n\r\n    node.append('line')\r\n      .attr('class', 'circle-arrow')\r\n      .attr('x1', 0)\r\n      .attr('y1', -150)\r\n      .attr('x2', 0)\r\n      .attr('y2', -100)\r\n      .attr('stroke', 'white')\r\n      .attr('stroke-width', 5)\r\n      .attr('opacity', d => d.drawArrow ? 0.8 : 0)\r\n      .attr('marker-end', 'url(#arrowhead)');\r\n\r\n    return node;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\r\n\r\n    updateElement\r\n      .attr('class', 'node')\r\n      .attr('pointer-events', d => d.pointerEvents ? 'auto' : 'none');\r\n\r\n    updateElement.select('.node-circle')\r\n      .attr('fill', (d) => this.colorProvider.getNodeColor(d))\r\n      .style('stroke-width', d => {\r\n        // if (!d.validInBST) {\r\n        //   return 5;\r\n        // }\r\n        if (d.highlighted) {\r\n          return 10;\r\n        }\r\n        if (d.isPlaceholder) {\r\n          return 5;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n      // if placeholder\r\n      .style('stroke-opacity', d => d.isPlaceholder || d.highlighted ? 0.4 : 0)\r\n      .style('stroke-dasharray', d => {\r\n        // if (d.isPlaceholder) return \"10,3\"\r\n        // if (!d.validInBST) {\r\n        //   return '5,3';\r\n        // }\r\n        if (d.highlighted) {\r\n          return '5,3';\r\n        }\r\n        else {\r\n          return '0,0';\r\n        }\r\n      })\r\n      .style('stroke', d => {\r\n        // if (!d.validInBST) {\r\n        //   return 'red';\r\n        // }\r\n        if (d.isPlaceholder) {\r\n          return 'black';\r\n        }\r\n        if (d.highlighted) {\r\n          return 'green';\r\n        }\r\n      })\r\n      .raise()\r\n      // animation\r\n      .filter((d: SimulationNode) => d.highlighted)\r\n      .transition()\r\n      .duration(400)\r\n      .attr('r', this.radius * 1.5)\r\n      .transition()\r\n      .duration(500)\r\n      .attr('r', this.radius);\r\n\r\n    updateElement\r\n      .select('.circle-value')\r\n      .text(d => d.isValueVisible ? d.value : '')\r\n      .attr('font-size', d => this.calculateFontSize(d.value.toString()))\r\n      .raise();\r\n\r\n    updateElement\r\n      .select('.circle-name')\r\n      .text(d => !d.isPlaceholder ? `#${d.id}` : 'null')\r\n      .raise();\r\n\r\n    updateElement\r\n      .select('.circle-arrow')\r\n      .attr('x1', 0)\r\n      .attr('y1', -150)\r\n      .attr('x2', 0)\r\n      .attr('y2', -100)\r\n      .attr('opacity', d => d.drawArrow ? 0.8 : 0)\r\n      .raise();\r\n\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, SimulationNode, any, any>): d3.Selection<d3.BaseType, SimulationNode, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n\r\n  private calculateFontSize(value: string): number {\r\n    let len: number;\r\n    if (!value) {\r\n      len = 1;\r\n    } else {\r\n      len = value.length;\r\n    }\r\n    if (len === 1) {\r\n      return this.radius;\r\n    }\r\n    else {\r\n      return this.radius / len * 1.5;\r\n    }\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\n\r\nexport class StartScene implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'unplayable';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  setup(simulation: Simulation): void {\r\n    const array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(array);\r\n  }\r\n\r\n  play(simulation: Simulation): void {\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Array visualization</h1>\r\n  <p>\r\n    Here, you will learn the fundamentals regarding arrays.\r\n  </p>\r\n  <p>\r\n    One such array is present on the right-hand-side of this visualization.\r\n    It consists of a collection of elements (values or variables),\r\n    each identified by at least one array index or key (denoted as<i>[index]</i>).\r\n  </p>\r\n  <p>\r\n    Try and interact with the array to familiarize yourself with the environment.\r\n    Array fundamentals which are covered in this section are as follows:\r\n  </p>\r\n  <ul>\r\n    <li>Linear search of elements;</li>\r\n    <li>Inserting elements;</li>\r\n    <li>Deleting elements;</li>\r\n    <li>Finding elements in a sorted array - <em>binary search</em>.</li>\r\n  </ul>\r\n  <p>\r\n    Let's get started :)\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {BstCell} from '../../../app/core/simulation/structures/tree/bst-cell';\r\n\r\nexport class DeletionNoChildren implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toRemove = -1;\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(8);\r\n\r\n    simulation.nodeHandler.add(nodes);\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    const cellToRemove = this.getNodeWithoutChildren(this.bst);\r\n    this.toRemove = cellToRemove.node.value;\r\n\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toRemove);\r\n  }\r\n\r\n  private getNodeWithoutChildren(bst: BinarySearchTree): BstCell {\r\n    let cell = bst.getRoot();\r\n\r\n    while (!!bst.getLeftChild(cell).node || !!bst.getRightChild(cell).node) {\r\n      const leftChild = bst.getLeftChild(cell);\r\n      if (!!leftChild.node) {\r\n        cell = leftChild;\r\n        continue;\r\n      }\r\n      const rightChild = bst.getRightChild(cell);\r\n      if (!!rightChild.node) {\r\n        cell = rightChild;\r\n      }\r\n    }\r\n\r\n    return cell;\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - No children</h1>\r\n  <p>\r\n    It's quite complicated to delete an element from a binary search tree. There are\r\n    three cases:\r\n  </p>\r\n  <ol>\r\n    <li>\r\n      <b><small>The node we're deleting</small> doesn't have any children (its children are empty leaves);</b>\r\n    </li>\r\n    <li>\r\n      <small>The node we're deleting</small> has only one child (the other one is an empty leaf);\r\n    </li>\r\n    <li>\r\n      <small>The node we're deleting</small> has two children.\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    Now, let's see the first case and remove the node with value ${this.toRemove}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    This case was quite simple, and the node containing ${this.toRemove} was simply deleted from\r\n    the tree.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {BinarySearchTree} from '../../../app/core/simulation/structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\n\r\nexport class Imbalance implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  searchValue = -1;\r\n  rootValue = -1;\r\n  rightOrLeft = 'left';\r\n  bst: BinarySearchTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(8);\r\n    nodes.sort((a, b) => a.value > b.value ? 1 : a.value === b.value ? 0 : -1);\r\n\r\n    simulation.nodeHandler.add(nodes);\r\n    this.bst = simulation.objectFactory.create('bst', 0, 0) as BinarySearchTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    this.searchValue = nodes[6].value;\r\n\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.find(this.searchValue);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Searching - imbalance</h1>\r\n  <p>\r\n    There is a chance that we might insert nodes in an increasing or decreasing order.\r\n  </p>\r\n  <p>\r\n    Then, our binary search tree will look like it looks on the right side.\r\n  </p>\r\n  <p>\r\n    Now, finding ${this.searchValue} is just like searching for that same value in a linked list.\r\n  </p>\r\n  <small>This tree leans towards the right side and it's completely unbalanced.\r\n  If the nodes were evenly spread, this tree would have been balanced</small>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    While searching for ${this.searchValue}, our only option was to go down through right children, and\r\n    after visiting almost each node, we have found ${this.searchValue}.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {DrawingHelper} from './drawing-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {DrawableHandler} from '../../handlers/drawable-handler';\r\nimport * as d3 from 'd3';\r\n\r\nexport class ArrayCellDrawing implements DrawingHelper<ArrayCell> {\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, ArrayCell, any, any>): d3.Selection<d3.BaseType, ArrayCell, any, any> {\r\n    const arrayCell = enterElement.append('g')\r\n      .attr('class', 'array-cell');\r\n\r\n    arrayCell\r\n      .append('text')\r\n      .attr('class', 'array-cell-name')\r\n      .attr('dx', (d) => d.x + d.width / 2)\r\n      .attr('dy', 125)\r\n      .text((d: ArrayCell) => d.toString())\r\n      .attr('font-size', 25)// font size\r\n      .style('fill', 'white')\r\n      .style('text-anchor', 'middle');\r\n\r\n    arrayCell\r\n      .append('rect')\r\n      .attr('class', 'array-cell-container')\r\n      .attr('x', d => d.x)\r\n      .attr('y', d => d.y)\r\n      .attr('rx', d => d.rx)\r\n      .attr('ry', d => d.ry)\r\n      .attr('width', d => d.width)\r\n      .attr('height', d => d.height)\r\n      .style('fill', d => d.color)\r\n      .style('opacity', .9)\r\n      .style('stroke-width', 5);\r\n\r\n    return arrayCell;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, ArrayCell, any, any>): d3.Selection<d3.BaseType, ArrayCell, any, any> {\r\n\r\n    updateElement\r\n      .select('.array-cell-name')\r\n      .attr('dx', (d) => d.x + d.width / 2)\r\n      .text((d: ArrayCell) => d.toString());\r\n\r\n    updateElement\r\n      .select('.array-cell-container')\r\n      .attr('x', d => d.x)\r\n      .attr('y', d => d.y)\r\n      .attr('width', d => d.width)\r\n      .attr('height', d => d.height);\r\n\r\n    updateElement\r\n      .select('.array-cell-container')\r\n      .style('fill', d => d.defaultColor)\r\n      .transition()\r\n      .duration(600)\r\n      .ease(d3.easeExpOut)\r\n      .attr('rx', d => d.rx)\r\n      .attr('ry', d => d.ry)\r\n      .style('fill', d => d.color);\r\n\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, ArrayCell, any, any>): d3.Selection<d3.BaseType, ArrayCell, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n\r\n\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\n\r\nexport class SearchScene implements Scene {\r\n  id = 1;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  nodes?: SimulationNode[];\r\n  array?: SimulationArray;\r\n  arrElement = -1;\r\n  arrSize = -1;\r\n  movedElements = '';\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0, 10) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n    if (!this.array || !this.array.data[6].node) {\r\n      this.arrElement = -1;\r\n    } else {\r\n      this.arrElement = this.array.data[6].node.value;\r\n    }\r\n\r\n    this.arrSize = !!this.array ? this.array.size : 10;\r\n    this.movedElements = this.array.data.slice(0, 6).map(d => d.node.value).join(', ');\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.array.linearSearch(this.arrElement);\r\n  }\r\n\r\n\r\n  content(): string {\r\n\r\n    return `\r\n  <h1 class=\"scene-title\">Linear search</h1>\r\n  <p>\r\n    Notice an array on the right-hand-side. It has ${this.arrSize} elements in an\r\n    arbitrary order.\r\n  </p>\r\n  <p>\r\n    What do you think would be the best method to find a node with value ${this.arrElement}?\r\n  </p>\r\n  <p>\r\n    Press play to find out :)\r\n  </p>\r\n`;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    If you guessed that you should check every element starting from the first one, then you guessed correctly.\r\n  </p>\r\n  <p>\r\n    The algorithm has checked every single element, [${this.movedElements}]\r\n    before it successfully found ${this.arrElement}.\r\n  </p>\r\n  <p>\r\n    How do we determine if element is not present in the array?\r\n  </p>\r\n`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MainFrameComponent} from './view/main-frame/main-frame.component';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ScenarioGridComponent} from './view/scenario-grid/scenario-grid.component';\nimport {SceneViewComponent} from './view/scene-view/scene-view.component';\nimport {PlaygroundComponent} from './view/playground/playground.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainFrameComponent,\n    children:\n      [\n        {\n          path: '',\n          component: ScenarioGridComponent\n        },\n        {\n          path: 'visualize/:path',\n          redirectTo: 'visualize/:path/0'\n        },\n        {\n          path: 'visualize/:path/:sceneIndex',\n          component: SceneViewComponent\n        },\n        {\n          path: 'playground',\n          component: PlaygroundComponent\n        }\n      ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {d3Element, MouseHelper} from './mouse-helper';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationLoop} from '../../handlers/simulation-loop';\r\nimport {MenuItem} from 'd3-context-menu';\r\nimport * as d3 from 'd3';\r\nimport {Simulation} from '../../simulation';\r\n\r\nexport class ArrayCellMouse implements MouseHelper<ArrayCell> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  mouseOver(d: ArrayCell, i: number, cells: d3Element[] | ArrayLike<d3Element>): void {\r\n    d.isMouseOver = true;\r\n\r\n    // if dragging node and cell not holding node, then attach it to array cell\r\n    if (!this.simulation.loop.draggedNode || !!d.node) {\r\n      return;\r\n    }\r\n\r\n    d.rx = 50;\r\n    d.ry = 50;\r\n    this.simulation.loop.draggedNode.hoveringGrid = d;\r\n\r\n    d.hoveringNode = this.simulation.loop.draggedNode;\r\n    this.simulation.loop.draggedNode.move(d.parent.x + d.x + d.width / 2, d.height / 2 + d.parent.y);\r\n\r\n    // now check if array is valid and color it accordingly\r\n  }\r\n\r\n  mouseOut(d: ArrayCell, i: number, cells: d3Element[] | ArrayLike<d3Element>): void {\r\n\r\n    d.isMouseOver = false;\r\n\r\n    d.rx = 25;\r\n    d.ry = 25;\r\n\r\n    if (!this.simulation.loop.draggedNode || !!d.node) {\r\n      return;\r\n    }\r\n\r\n    if (d.hoveringNode !== d.node) {\r\n      d.hoveringNode = d.node;\r\n    }\r\n    else {\r\n      d.hoveringNode = undefined;\r\n    }\r\n\r\n    this.simulation.loop.draggedNode.hoveringGrid = null;\r\n  }\r\n\r\n  addMouseInteraction(element: d3.Selection<d3.BaseType, ArrayCell, any, any>): d3.Selection<d3.BaseType, ArrayCell, any, any> {\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n\r\n    element\r\n      .on('mouseover', (d: ArrayCell, i: number, cells: d3Element[] | ArrayLike<d3Element>) => this.mouseOver(d, i, cells))\r\n      .on('mouseout', (d: ArrayCell, i: number, cells: d3Element[] | ArrayLike<d3Element>) => this.mouseOut(d, i, cells));\r\n\r\n    return element;\r\n  }\r\n}\r\n","import {DrawingHelper} from './drawing-helper';\r\nimport {SimulationLink} from '../../basics/simulation-link';\r\nimport * as d3 from 'd3';\r\n\r\nexport class LinkDrawingHelper implements DrawingHelper<SimulationLink> {\r\n  enter(enterElement: d3.Selection<d3.EnterElement, SimulationLink, any, any>): d3.Selection<d3.BaseType, SimulationLink, any, any> {\r\n\r\n    const linkElement = enterElement\r\n      .append('line')\r\n      .attr('class', 'link')\r\n      .attr('stroke', 'white')\r\n      .attr('stroke-width', 10)\r\n      .attr('stroke-linecap', 'round')\r\n      .attr('stroke-opacity', 0.6);\r\n\r\n    return linkElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, SimulationLink, any, any>): d3.Selection<d3.BaseType, SimulationLink, any, any> {\r\n    return updateElement;\r\n  }\r\n\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, SimulationLink, any, any>): d3.Selection<d3.BaseType, SimulationLink, any, any> {\r\n    return exitElement.remove();\r\n  }\r\n}\r\n","import {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {Heap} from '../../../app/core/simulation/structures/tree/binary-tree/heap/heap';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {RedBlackTree} from '../../../app/core/simulation/structures/tree/binary-tree/red-black-tree/red-black-tree';\r\n\r\nexport class DeletionSecondCase implements Scene {\r\n  id = 2;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  toDelete = 40;\r\n  bst: RedBlackTree;\r\n  async setup(simulation: Simulation): Promise<void> {\r\n\r\n    const nodes = this.createNodes(simulation, [30, 10, 40, 5]);\r\n    simulation.nodeHandler.add(nodes);\r\n\r\n    this.bst = simulation.objectFactory.create('rb', 0, 0) as RedBlackTree;\r\n    simulation.bstHandler.add(this.bst);\r\n\r\n    for (const node of nodes) {\r\n      await this.bst.insert(node, false);\r\n    }\r\n\r\n    const [deleted] = await this.bst.delete(5, false);\r\n    simulation.nodeHandler.remove(deleted);\r\n  }\r\n\r\n  createNodes(simulation: Simulation, values: number[]): SimulationNode[] {\r\n    const nodes: SimulationNode[] = [];\r\n    for (const value of values) {\r\n      nodes.push(simulation.objectFactory.create('node', 0, 0, value) as SimulationNode);\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    await this.bst.delete(this.toDelete);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Deletion - second case</h1>\r\n\r\n  <p>\r\n    In the second case, sibling is colored black and both of its children are\r\n    black, recoloring is performed so sibling becomes red and the deleted\r\n    node's parent becomes black.\r\n  </p>\r\n  <p>\r\n    If the deleted node's parent was red, checking is propagated up the tree.\r\n  </p>\r\n  <p>\r\n    This case is demonstrated on the right-hand side by deletion of ${this.toDelete}\r\n    from the tree.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    All the properties of red-black tree are restored now by performing tri-node-restructuring.\r\n  </p>\r\n  <small>\r\n    In this case, since 30 was root and thus black, checking wasn't propagated up the tree.\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {NodeHandler} from './handlers/node-handler';\r\nimport {ArrayHandler} from './handlers/array-handler';\r\nimport {Camera} from '../camera';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport * as d3 from 'd3';\r\nimport {SimulationLoop} from './handlers/simulation-loop';\r\nimport {NodeDrawing} from './helpers/drawing/node-drawing';\r\nimport {ColorProvider} from './providers/color-provider';\r\nimport {NodeDrag} from './helpers/drag/node-drag';\r\nimport {NodeMouse} from './helpers/mouse/node-mouse';\r\nimport {ArrayDrawing} from './helpers/drawing/array-drawing';\r\nimport {ArrayCellDrawing} from './helpers/drawing/array-cell-drawing';\r\nimport {ArrayDrag} from './helpers/drag/array-drag';\r\nimport {ArrayCellMouse} from './helpers/mouse/array-cell-mouse';\r\nimport {ArrayMouse} from './helpers/mouse/array-mouse';\r\nimport {BinarySearchTreeHandler} from './handlers/binary-search-tree-handler';\r\nimport {BstDrawing} from './helpers/drawing/bst-drawing';\r\nimport {BstCellDrawing} from './helpers/drawing/bst-cell-drawing';\r\nimport {BstCellDrag} from './helpers/drag/bst-cell-drag';\r\nimport {BstCellMouse} from './helpers/mouse/bst-cell-mouse';\r\nimport {LinkDrawingHelper} from './helpers/drawing/link-drawing-helper';\r\nimport {BstMouse} from './helpers/mouse/bst-mouse';\r\nimport {BinarySearchTree} from './structures/tree/binary-tree/binary-search-tree/binary-search-tree';\r\nimport {SimulationNode} from './basics/simulation-node';\r\nimport {SimulationArray} from './structures/array/simulation-array';\r\nimport {AvlTree} from './structures/tree/binary-tree/avl-tree/avl-tree';\r\nimport {RedBlackTree} from './structures/tree/binary-tree/red-black-tree/red-black-tree';\r\nimport {HeapHandler} from './handlers/heap-handler';\r\nimport {HeapDrawing} from './helpers/drawing/heap-drawing';\r\nimport {HeapMouse} from './helpers/mouse/heap-mouse';\r\nimport {Heap} from './structures/tree/binary-tree/heap/heap';\r\nimport {LinkedList} from './structures/tree/linked-list/linked-list';\r\nimport {LinkedListHandler} from './handlers/linked-list-handler';\r\nimport {LinkedListDrawing} from './helpers/drawing/linked-list-drawing';\r\nimport {LinkedListMouse} from './helpers/mouse/linked-list-mouse';\r\nimport {ObjectFactory} from './object-factory';\r\nimport {SvgMouse} from './helpers/mouse/svg-mouse';\r\n\r\nexport class Simulation {\r\n\r\n  canvas?: d3.Selection<any, any, d3.BaseType, any>;\r\n\r\n  loop?: SimulationLoop;\r\n\r\n  nodeHandler?: NodeHandler;\r\n  arrayHandler?: ArrayHandler;\r\n  bstHandler?: BinarySearchTreeHandler;\r\n  heapHandler?: HeapHandler;\r\n  linkedListHandler?: LinkedListHandler;\r\n\r\n  objectFactory?: ObjectFactory;\r\n  camera?: Camera;\r\n  widthHeight: BehaviorSubject<[number, number]> = new BehaviorSubject([0, 0]);\r\n  svgMouse?: SvgMouse;\r\n  interactable = true;\r\n  prompt: (header: string) => Promise<string>;\r\n\r\n  constructor(canvas: d3.Selection<any, any, d3.BaseType, any>,\r\n              prompt: (header: string) => Promise<string>) {\r\n    this.canvas = canvas;\r\n    this.prompt = prompt;\r\n  }\r\n\r\n  startSimulation(svg: d3.Selection<any, any, any, any>): void {\r\n    this.loop = new SimulationLoop();\r\n    this.loop.setupForce();\r\n\r\n    this.svgMouse = new SvgMouse(this);\r\n    this.svgMouse.addMouseInteraction(svg);\r\n    this.objectFactory = new ObjectFactory();\r\n\r\n\r\n    this.camera = new Camera(svg, this.canvas, this.widthHeight.getValue());\r\n\r\n    this.widthHeight.subscribe(val => {\r\n      this.camera.widthHeight.next(val);\r\n    });\r\n\r\n    this.camera.setZoom();\r\n    const colorProvider = new ColorProvider();\r\n    const nodeDrawing = new NodeDrawing(colorProvider);\r\n    const nodeDrag = new NodeDrag(this);\r\n    const nodeMouse = new NodeMouse(this);\r\n\r\n    this.nodeHandler = new NodeHandler(\r\n      nodeDrawing,\r\n      nodeDrag,\r\n      nodeMouse,\r\n      this.canvas,\r\n      this,\r\n      colorProvider\r\n    );\r\n\r\n    this.arrayHandler = new ArrayHandler(\r\n      this,\r\n      new ArrayDrawing(),\r\n      new ArrayCellDrawing(),\r\n      new ArrayDrag(this),\r\n      new ArrayMouse(this),\r\n      new ArrayCellMouse(this),\r\n      this.canvas\r\n    );\r\n\r\n    this.bstHandler = new BinarySearchTreeHandler(\r\n      this,\r\n      null,\r\n      new BstDrawing(),\r\n      new BstMouse(this),\r\n      new BstCellDrawing(),\r\n      new BstCellDrag(this),\r\n      new BstCellMouse(this, colorProvider),\r\n      new LinkDrawingHelper(),\r\n      this.canvas\r\n    );\r\n\r\n    this.heapHandler = new HeapHandler(\r\n      this,\r\n      null,\r\n      new HeapDrawing(),\r\n      new HeapMouse(this),\r\n      new BstCellDrawing(),\r\n      new BstCellDrag(this),\r\n      new BstCellMouse(this, colorProvider),\r\n      new LinkDrawingHelper(),\r\n      this.canvas\r\n    );\r\n\r\n    this.linkedListHandler = new LinkedListHandler(\r\n      this,\r\n      null,\r\n      new LinkedListDrawing(),\r\n      new LinkedListMouse(this),\r\n      new BstCellDrawing(),\r\n      new BstCellDrag(this),\r\n      new BstCellMouse(this, colorProvider),\r\n      new LinkDrawingHelper(),\r\n      this.canvas\r\n    );\r\n\r\n    this.loop.setHandlers(\r\n      this.nodeHandler,\r\n      this.bstHandler,\r\n      this.heapHandler,\r\n      this.linkedListHandler,\r\n      this.arrayHandler,\r\n    );\r\n  }\r\n\r\n  reset(): void {\r\n    this.loop.drawableHandlers.forEach(h => h.reset());\r\n  }\r\n}\r\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {TreeScene} from './scenes/tree-scene';\r\nimport {Insertion} from './scenes/insertion';\r\nimport {Deletion} from './scenes/deletion';\r\nimport {HeapScene} from './scenes/heap-scene';\r\nimport {FindMin} from './scenes/find-min';\r\n\r\nconst heapScenario = new Scenario('Heap', 'heap', 'Extracting the minimum value, insertion and deletion.');\r\nheapScenario.cover = 'scenarios/heap/cover.png';\r\n\r\nheapScenario.scenes = [\r\n  TreeScene,\r\n  HeapScene,\r\n  FindMin,\r\n  Insertion,\r\n  Deletion\r\n];\r\n\r\nexport default heapScenario;\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {ArrayCell} from '../../../app/core/simulation/structures/array/array-cell';\r\nimport {SimulationNode} from '../../../app/core/simulation/basics/simulation-node';\r\nimport {SimulationStack} from '../../../app/core/simulation/structures/array/simulation-stack';\r\n\r\nexport class Push implements Scene {\r\n  id = 1;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  stack: SimulationStack;\r\n  index = -1;\r\n  elements = '';\r\n  stackSize = -1;\r\n  highlighedValue = -1;\r\n  newElement = 23.11;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(6);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.stack = simulation.objectFactory.create('stack', 0, 0, 10) as SimulationStack;\r\n    simulation.arrayHandler.add(this.stack);\r\n\r\n    for (const node of nodes) {\r\n      await this.stack.push(node, false);\r\n    }\r\n    this.stack.descriptor = 'stack';\r\n    this.stackSize = !!this.stack ? this.stack.size : 10;\r\n    this.elements = this.stack.data.slice(0, this.stack.size).map(c => c.node.value).join(', ');\r\n    this.highlighedValue = this.stack.top.node.value;\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    const node = new SimulationNode(this.newElement, -1, this.stack.x, this.stack.y - 200);\r\n    simulation.nodeHandler.add(node);\r\n    await this.stack.push(node);\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Stack - Push operation</h1>\r\n  <p>\r\n    Take a look at that array on the right-hand side. That's our stack with elements ${this.elements}.\r\n  </p>\r\n  <p>\r\n    There are ${this.stackSize} elements in the stack.\r\n    The highlighted element ${this.highlighedValue} is the <em>top element</em> of the stack.\r\n  </p>\r\n  <p>\r\n    The first operation we're going to look into is <b>push</b> operation. That simply\r\n    means appending an element to the end of this array.\r\n  </p>\r\n  <p>\r\n    Let's see how elements are pushed to this stack by pushing ${this.newElement}.\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    After successfully pushing ${this.newElement} to the stack, the <em>top</em> is now at the top of the stack.\r\n  </p>\r\n  <small>\r\n    If the stack were full, the push operation would lead to a condition called <em>stack overflow</em>.\r\n  </small>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Scenario} from '../../../app/core/simulation/scenario';\r\nimport {Scene} from '../../../app/core/simulation/scene';\r\nimport {Simulation} from '../../../app/core/simulation/simulation';\r\nimport {SimulationArray} from '../../../app/core/simulation/structures/array/simulation-array';\r\nimport {BubbleSort} from '../../../app/core/simulation/structures/array/bubble-sort';\r\n\r\nexport class Bubble implements Scene {\r\n  id = 0;\r\n  isFirst: boolean;\r\n  isLast: boolean;\r\n  played: 'not_played' | 'playing' | 'played' | 'unplayable' = 'not_played';\r\n  set: boolean;\r\n  setupPath: string;\r\n\r\n  array: SimulationArray;\r\n\r\n  async setup(simulation: Simulation): Promise<void> {\r\n    const nodes = simulation.nodeHandler.generateNodes(10);\r\n    simulation.nodeHandler.add(nodes);\r\n    this.array = simulation.objectFactory.create('array', 0, 0) as SimulationArray;\r\n    simulation.arrayHandler.add(this.array);\r\n\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n      await this.array.insertAt(nodes[i], i, false);\r\n    }\r\n  }\r\n\r\n  async play(simulation: Simulation): Promise<void> {\r\n    this.array.sorting = new BubbleSort();\r\n    await this.array.sort();\r\n  }\r\n\r\n  content(): string {\r\n    return `\r\n  <h1 class=\"scene-title\">Bubble sort</h1>\r\n  <p>\r\n    Bubble sort is a simple sorting algorithm that repeatedly steps through the list,\r\n    compares adjacent elements and swaps them if they are in the wrong order.\r\n    The pass through the list is repeated until the list is sorted. The algorithm\r\n    is named for the way smaller or larger elements \"bubble\" to the top of the list.\r\n  </p>\r\n  <p>\r\n    In this example, elements will be sorted in ascending order.\r\n  </p>\r\n\r\n  <p>\r\n    Press play to sort the elements\r\n  </p>\r\n  `;\r\n  }\r\n\r\n  successContent(): string {\r\n    return `\r\n  <p>\r\n    Bubble sort has a worst-case and average complexity of <em>О(n<sup>2</sup>)</em>, where n is the\r\n    number of items being sorted. Most practical sorting algorithms have substantially\r\n    better worst-case or average complexity, often <em>О(n logn)</em>. Even other  <em>О(n<sup>2</sup>)</em> sorting\r\n    algorithms, such as insertion sort, generally run faster than bubble sort, and are no\r\n    more complex. Therefore, bubble sort is not a practical sorting algorithm.\r\n  </p>\r\n    `;\r\n  }\r\n\r\n}\r\n","import {Selection} from 'd3-selection';\nimport * as d3 from 'd3';\nimport {SimulationNode} from '../basics/simulation-node';\nimport {defaultRadius} from '../../consts';\nimport {NodeHandler} from './node-handler';\nimport {PositionHelper} from '../helpers/position-helper';\nimport {ColorProvider} from '../providers/color-provider';\nimport {DrawableHandler} from './drawable-handler';\nimport {SimulationArray} from '../structures/array/simulation-array';\nimport {BinarySearchTree} from '../structures/tree/binary-tree/binary-search-tree/binary-search-tree';\nimport {BstCell} from '../structures/tree/bst-cell';\nimport {SimulationLink} from '../basics/simulation-link';\nimport {BinaryTree} from '../structures/tree/binary-tree/binary-tree';\nimport {SimulationGraph} from '../structures/tree/simulation-graph';\n\nexport class SimulationLoop {\n  nodeElements?: Selection<any, any, d3.BaseType, any>;\n  bstCellElements?: Selection<any, any, d3.BaseType, any>;\n  texts?: Selection<any, any, d3.BaseType, any>;\n  links?: Selection<any, any, d3.BaseType, any>;\n  arrows?: Selection<any, any, d3.BaseType, any>;\n  arrayElements?: Selection<any, any, d3.BaseType, any>;\n\n  force: d3.Simulation<any, any>;\n  draggedNode?: SimulationNode;\n\n  nodes: (SimulationNode | SimulationArray | BstCell)[] = [];\n\n  drawableHandlers: DrawableHandler<SimulationNode | SimulationArray | SimulationGraph>[] = [];\n\n  setupForce(): void {\n    this.force = d3.forceSimulation([])\n\n      .force('x',\n        d3.forceX()\n          .x((d: SimulationNode) => d.cx)\n          .strength(.2)\n      )\n      .force('y',\n        d3.forceY()\n          .y((d: SimulationNode) => d.cy)\n          .strength(.2)\n      )\n      .force(\n        'link',\n        d3.forceLink([])\n          .distance(100)\n          .strength(.2)\n      )\n      .force(\n        'collision',\n        d3.forceCollide()\n          .strength(1)\n          .radius((n: SimulationNode | BstCell) => n.radius)\n      )\n      .alphaTarget(.5)\n      .velocityDecay(.6)\n      .on('tick', this.ticked(30));\n  }\n\n  ticked(interval: number): () => void {\n    let then = Date.now();\n    return () => {\n      const now = Date.now();\n      const elapsed = now - then;\n\n      const fpsInterval = 1000 / interval;\n      if (elapsed > fpsInterval) {\n        then = now - (elapsed / fpsInterval);\n\n        const svg = d3.select('svg');\n        svg.lower();\n\n\n        this.nodeElements = svg.selectAll('.node');\n        this.arrayElements = svg.selectAll('.array');\n        this.bstCellElements = svg.selectAll('.bst-cell');\n\n        this.nodes = this.bstCellElements.data().concat(this.nodeElements.data().filter(d => !d.noCollision));\n        this.force.nodes(this.nodes);\n\n        this.links = svg.selectAll('.link');\n        // @ts-ignore\n        this.force.force('link').links(this.links);\n\n        this.drawableHandlers.forEach(handler => handler.draw());\n\n        this.nodeElements\n          ?.attr('transform', (d: SimulationNode) => `translate(${d.x}, ${d.y})`);\n\n        this.arrayElements\n          ?.attr('transform', d => `translate(${d.x}, ${d.y})`);\n\n        this.bstCellElements\n          ?.attr('transform', d => `translate(${d.x}, ${d.y})`);\n\n        this.links\n          ?.attr('x1', (d: SimulationLink) => d.source.x)\n          ?.attr('y1', (d: SimulationLink) => d.source.y + d.yDisplacement)\n          ?.attr('x2', (d: SimulationLink) => d.target.x)\n          ?.attr('y2', (d: SimulationLink) => d.target.y + d.yDisplacement);\n\n      }\n    };\n  }\n\n  setHandlers(...drawableHandlers: DrawableHandler<SimulationNode | SimulationArray | SimulationGraph>[]): void {\n    this.drawableHandlers = drawableHandlers;\n  }\n}\n","import {Scenario} from '../../app/core/simulation/scenario';\r\nimport {Stack} from './scenes/stack';\r\nimport {Push} from './scenes/push';\r\nimport {Pop} from './scenes/pop';\r\nimport {Enqueue} from './scenes/enqueue';\r\nimport {Queue} from './scenes/queue';\r\nimport {Dequeue} from './scenes/dequeue';\r\nimport {CircularQueue} from './scenes/circular-queue';\r\n\r\nconst stackQueueScenario = new Scenario('Stack and queue', 'stack-queue', 'Array implementations of stack and queue.');\r\nstackQueueScenario.cover = 'scenarios/stack-queue/cover.png';\r\nstackQueueScenario.scenes = [\r\n  Stack,\r\n  Push,\r\n  Pop,\r\n  Queue,\r\n  Enqueue,\r\n  Dequeue,\r\n  CircularQueue\r\n];\r\n\r\nexport default stackQueueScenario;\r\n","import {DragHelper} from './drag-helper';\r\nimport * as d3 from 'd3';\r\nimport {Selection} from 'd3-selection';\r\nimport {ArrayCell} from '../../structures/array/array-cell';\r\nimport {SimulationArray} from '../../structures/array/simulation-array';\r\nimport {Simulation} from '../../simulation';\r\nimport {BstCell} from '../../structures/tree/bst-cell';\r\n\r\nexport class BstCellDrag implements DragHelper<BstCell> {\r\n\r\n  simulation: Simulation;\r\n\r\n  constructor(simulation: Simulation) {\r\n    this.simulation = simulation;\r\n  }\r\n\r\n  dragStart(d: BstCell, i: number, cells: Element[] | ArrayLike<Element>): void {\r\n\r\n    d.fixedMove(d3.event.x, d3.event.y);\r\n    d3.select(cells[i]).style('cursor', 'grabbing');\r\n    d3.select(cells[i]).raise();\r\n  }\r\n\r\n  dragging(d: BstCell, i: number, cells: Element[] | ArrayLike<Element>): void {\r\n\r\n    d.fixedMove(d3.event.x, d3.event.y);\r\n\r\n  }\r\n\r\n  dragEnd(d: BstCell, i: number, cells: Element[] | ArrayLike<Element>): void {\r\n\r\n    d.fx = undefined;\r\n    d.fy = undefined;\r\n    d.graph.moveCell(d, d3.event.x, d3.event.y);\r\n\r\n\r\n    d3.select(cells[i]).style('cursor', null);\r\n\r\n  }\r\n\r\n  addDragInteraction(element: d3.Selection<d3.BaseType, BstCell, any, any>): d3.Selection<d3.BaseType, BstCell, any, any> {\r\n\r\n    if (!this.simulation.interactable) {\r\n      return element;\r\n    }\r\n\r\n    const drag = d3.drag<Element, BstCell, unknown>()\r\n      .on('start', (d: BstCell, i: number, cells: Element[] | ArrayLike<Element>) => this.dragStart(d, i, cells))\r\n      .on('drag', (d: BstCell, i: number, cells: Element[] | ArrayLike<Element>) => this.dragging(d, i, cells))\r\n      .on('end', (d: BstCell, i: number, cells: Element[] | ArrayLike<Element>) => this.dragEnd(d, i, cells));\r\n\r\n    element.call(drag);\r\n\r\n    return element;\r\n  }\r\n\r\n}\r\n","import {DrawableHandler} from './drawable-handler';\r\nimport {SimulationNode} from '../basics/simulation-node';\r\nimport * as d3 from 'd3';\r\nimport {DragHelper} from '../helpers/drag/drag-helper';\r\nimport {DrawingHelper} from '../helpers/drawing/drawing-helper';\r\nimport {MouseHelper} from '../helpers/mouse/mouse-helper';\r\nimport {SimulationArray} from '../structures/array/simulation-array';\r\nimport {ArrayCell} from '../structures/array/array-cell';\r\nimport {BstCell} from '../structures/tree/bst-cell';\r\nimport {Simulation} from '../simulation';\r\nimport {BstCellDrag} from '../helpers/drag/bst-cell-drag';\r\nimport {BstCellMouse} from '../helpers/mouse/bst-cell-mouse';\r\nimport {LinkDrawingHelper} from '../helpers/drawing/link-drawing-helper';\r\nimport {SimulationLink} from '../basics/simulation-link';\r\nimport {Heap} from '../structures/tree/binary-tree/heap/heap';\r\n\r\nexport class HeapHandler implements DrawableHandler<Heap> {\r\n\r\n  dragHelper: DragHelper<Heap>;\r\n  drawingHelper: DrawingHelper<Heap>;\r\n  mouseHelper: MouseHelper<Heap>;\r\n  simulation: Simulation;\r\n\r\n  bstCellDrawingHelper: DrawingHelper<BstCell>;\r\n  bstCellDragHelper: DragHelper<BstCell>;\r\n  bstCellMouseHelper: MouseHelper<BstCell>;\r\n\r\n  linkDrawingHelper: DrawingHelper<SimulationLink>;\r\n  data: Heap[] = [];\r\n  maxId = 0;\r\n  canvas: d3.Selection<any, any, any, any>;\r\n\r\n  constructor(simulation: Simulation,\r\n              dragHelper: DragHelper<Heap>,\r\n              drawingHelper: DrawingHelper<Heap>,\r\n              mouseHelper: MouseHelper<Heap>,\r\n              bstCellDrawingHelper: DrawingHelper<BstCell>,\r\n              bstCellDragHelper: DragHelper<BstCell>,\r\n              bstCellMouseHelper: MouseHelper<BstCell>,\r\n              linkDrawingHelper: DrawingHelper<SimulationLink>,\r\n              canvas: d3.Selection<any, any, any, any>) {\r\n    this.simulation = simulation;\r\n    this.dragHelper = dragHelper;\r\n    this.drawingHelper = drawingHelper;\r\n    this.mouseHelper = mouseHelper;\r\n    this.bstCellDrawingHelper = bstCellDrawingHelper;\r\n    this.bstCellDragHelper = bstCellDragHelper;\r\n    this.bstCellMouseHelper = bstCellMouseHelper;\r\n    this.linkDrawingHelper = linkDrawingHelper;\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  add(tree: Heap): void {\r\n    tree.id = this.maxId++;\r\n    tree.setRoot();\r\n    this.data.push(tree);\r\n  }\r\n\r\n  draw(): void {\r\n    const treeElements = this.canvas\r\n      .selectAll('.heap')\r\n      .data(this.data, (tree: Heap) => tree.id)\r\n      .join(enterElement => this.enter(enterElement),\r\n        updateElement => this.update(updateElement),\r\n        exitElement => this.exit(exitElement));\r\n\r\n    treeElements.lower();\r\n  }\r\n\r\n\r\n  enter(enterElement: d3.Selection<d3.EnterElement, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    const treeElement = this.drawingHelper.enter(enterElement);\r\n    this.mouseHelper.addMouseInteraction(treeElement);\r\n    treeElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: Heap) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n        const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n        this.bstCellDragHelper.addDragInteraction(cellElement);\r\n        this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n        return cellElement;\r\n      });\r\n\r\n    treeElement\r\n      .selectAll('.link')\r\n      .data((d: Heap) => d.getLinks(), (link: SimulationLink) => `${link.source.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      });\r\n    return treeElement;\r\n  }\r\n\r\n  update(updateElement: d3.Selection<d3.BaseType, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    this.drawingHelper.update(updateElement);\r\n    updateElement\r\n      .selectAll('.bst-cell')\r\n      .data((d: Heap) => d.getData(), (cell: BstCell) => cell.id)\r\n      .join(enterCell => {\r\n          const cellElement = this.bstCellDrawingHelper.enter(enterCell);\r\n          this.bstCellDragHelper.addDragInteraction(cellElement);\r\n          this.bstCellMouseHelper.addMouseInteraction(cellElement);\r\n          return cellElement;\r\n        },\r\n        updateCell => this.bstCellDrawingHelper.update(updateCell),\r\n        exitCell => this.bstCellDrawingHelper.exit(exitCell));\r\n\r\n    updateElement\r\n      .selectAll('.link')\r\n      .data((d: Heap) => d.getLinks(), (link: SimulationLink) => `${link.target.id}_${link.target.id}`)\r\n      .join(enterLink => {\r\n        const linkElement = this.linkDrawingHelper.enter(enterLink);\r\n        linkElement.lower();\r\n        return linkElement;\r\n      },\r\n        updateLink => this.linkDrawingHelper.update(updateLink).lower(),\r\n        exitLink => this.linkDrawingHelper.exit(exitLink));\r\n    return updateElement;\r\n  }\r\n\r\n  exit(exitElement: d3.Selection<d3.BaseType, Heap, any, any>): d3.Selection<d3.BaseType, Heap, any, any> {\r\n    return this.drawingHelper.exit(exitElement);\r\n  }\r\n\r\n  reset(): void {\r\n    this.maxId = 0;\r\n    this.data = [];\r\n  }\r\n\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}